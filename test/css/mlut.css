@charset "UTF-8";

/*
Normalize

Simple css normalization that correcting old browsers bugs and not affecting other styles.

Styleguide: core-styles.normalize
*/

main {
	display: block;
}

img {
	max-width: 100%;
	height: auto;
	border: 0;
}

legend {
	display: table;
	box-sizing: border-box;
	max-width: 100%;
	white-space: normal;
}

[hidden] {
	display: none !important;
}

/* This comment needed for add @charset "utf-8"; in source because sass compiler erased this at-rule without it: утф8 */

/*
Getting started

There are 2 ways to start using MLUT:

- assembled distributive
- developer toolkit

Weight: 0

Styleguide: start
*/

/*
Installation

### [Git](https://github.com/mr150/mlut) ###
```
git clone https://github.com/mr150/mlut.git
```

### NPM ###
```
npm i mlut -D
```
### Download ###
Download assembled CSS from [here](https://unpkg.com/mlut@latest/dist/css/mlut.min.css) or link it from A-ERP server:
```html
<link href="http://a-erp.com/data/181219/1643392985173395.css" rel="stylesheet">
```

### CDN ###
```html
<link href="https://unpkg.com/mlut@latest/dist/css/mlut.min.css" rel="stylesheet">
```

Weight: 0

Styleguide: start.install
*/

/*
Usage

### HTML ###
Before starting work, make sure you have the correct HTML5 doctype:
```html
<!DOCTYPE html>
```
and the responsive viewport meta tag:
```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

### Distributive ###
You can get assembled MLUT code and include it to your project. There are some ways to get a distributive.

- if used `git clone`, files are located in the `dist/` folder
- if used `npm`, files are in `node_modules/mlut/dist/`

Add the file to your page like here:
```html
<link href="css/mlut.min.css" rel="stylesheet">
```
And just add MLUT classes to markup:
```html
<div class="row D-f">
	<div class="row__col W3gc_md">
		<h3>Simple text</h3>
```
Try [examples](section-examples.html) with ready HTML.

### Toolkit ###
To use all MLUT features you need an assembly. There are 3 ways:

- If you don't want to develop MLUT, it's recommended to use [MLUT project template](https://github.com/mr150/mlut-project)
- [Clone](#kssref-start-install) MLUT repo and use configured assembly from it
- Setup assembly yourself use [technologies list](./)

#### Assembly ####
If you cloned git repo:
```
npm i
```
Run dev server with live reload, code linting and documentation building:
```
npm run dev
```
or
```
gulp
```
Build without dev server:
```
npm run build
```

#### Styles ####
Once the assembly is configured, import sass tools and settings to your `style.scss`
```scss
@import "includes/settings";
@import "includes/functions";
@import "includes/mixins";
```
Then you can import blocks and utilities how it is done in the `src/sass/mlut.scss` to get the standard build. Or you can import only what you need:
```scss
@import "../core-blocks/wrapper/wrapper";
@import "../core-utils/display";

@include mlu-bpm($mlu-bp-md) {
	.input--common {
		padding: mlu-px2em(16px) 16px;
	}
}
```

Weight: 1

Styleguide: start.usage
*/

/*
Basic concepts

Before reading the documentation, learn MLUT basic concepts.

Weight: 1

Styleguide: concepts
*/

/*
DOM node

HTML-element. Any tag on the page. For example:
```html
<p>This is DOM node</p>
<div>I am DOM node too</div>
```

Weight: 0

Styleguide: concepts.dom_node
*/

/*
Block

Independent page component that can be reused. Examples: [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper), [row](section-core-blocks.html#kssref-core-blocks-row).

Weight: 1

Styleguide: concepts.block
*/

/*
Element

A part of a block that cannot be used without it.

The names of the elements are constructed according to the scheme: `block-name__element-name`. The element name is separated from the block name by two underscores '__'.

Note that the *element* and the *HTML-element* are different concepts.

Examples: [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col),  [ratio-block__content](section-core-blocks.html#kssref-core-blocks-ratio-block-ratio-block__content).

Weight: 2

Styleguide: concepts.element
*/

/*
Modifier

A entity that defines the appearance and behavior of a block or an element.

The name of the modifier is separated from the name of the block or element by two hyphens `--`.

Examples: [ratio-block--4x3](section-core-blocks.html#kssref-core-blocks-ratio-block), `ratio-block--1x1`.

A modifier cannot be used in isolation from a modifiable block or element.

Weight: 3

Styleguide: concepts.modifier
*/

/*
BEM entity

Blocks, elements, and modifiers are all called BEM entities. For now, BEM entities in MLUT are represented as CSS classes.

Weight: 4

Styleguide: concepts.bem_entity
*/

/*
Breakpoint

The width of the screen on which the styles change. In MLUT, the default breakpoints are:
* `xs` \- minimum width `0px-520px`
* `sm` \- horizontal orientation of smartphone `520px-760px`
* `md` \- small tablet `760px-960px`
* `lg` \- square monitor `960px-1168px`
* `xl` \- wide screen `>1168px`

Weight: 5

Styleguide: concepts.breakpoint
*/

/*
Utility

An entity that, depending on the parameters, does 1 action with the DOM node styles. Utilities change 1 CSS property or group of related properties.

Utility class names are formed according to the scheme:
1. optional pseudo-class or pseudo-element: `h` - hover, `af` - after etc. Separated from the utility name by underscore '_'.
1. utility name. Written with capital letter. Most utility names are [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations.
1. optional value. Valid are number, [abbreviations](https://docs.emmet.io/cheat-sheet/) and keywords. Values are set according to	[Emmet rules](https://docs.emmet.io/css-abbreviations/#supplying-values-with-units). Abbreviation and keywords are separated by a hyphen '-' from utility name.
1. optional breakpoint name: `sm`, `lg`, etc. Separated from the utility value by underscore '_'.

Utility class name example: `Tt`, `Mb2r`, `D-ib_sm`, `h_Bgc-main`.

There are some special abbreviations for color utilities:
* `t` - `transparent`
* `i` - `inherit`
* `cc` - `curentColor`

Utilities in MLUT are divided into *common* and *modified*.

* **Common** \- utilities that are named and work like CSS properties.
* **Modified** \- utilities that affect several CSS properties. The names of such utilities begin with 'm' prefix.

Weight: 6

Styleguide: concepts.utility
*/

/*
Layout

The relative layout of DOM nodes on the page.

Weight: 7

Styleguide: concepts.layout
*/

/*
Modular grid

Space on the page divided into a certain number of columns with gutters.

In MLUT on the `sm` breakpoint, the grid has 4 columns, on `md` and above - 12. This means that the grid divides the space into 4 equal parts on `sm` and 12 parts on `md` and above. These parts called *columns*. Columns are separated by indents which are called *gutters*.

The gutters have different widths at different breakpoints. From `xs` to `lg` gutter is 12px. From `lg` gutter is 16px.

You can set the [width](section-core-utils.html#kssref-core-utils-bxz-w) and [offset](section-core-utils.html#kssref-core-utils-margin-ml) for the layout parts in the grid units. These are units of measure that you can use for number values of utilities just like any other units in CSS. There are 3 types of grid units:
* **grid-columns** \- abbreviated `gc`. 1gc is width of 1 column. Grid-columns are mainly used with [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col).
* **grid-spans** \- `gs`. 1gs is width of 1 column with 2 gutters.
* **grid-gutters** \- `gg`. 1gg is width of 1 gutter.

Using the [grid-debug](section-core-blocks.html#kssref-core-blocks-grid-debug) block you can see the graphic display of the grid.

Modular grid are generated depending on this [settings](section-sass-tools.html#kssref-sass-tools-settings-grid).

Weight: 8

Styleguide: concepts.grid
*/

/*
Core blocks

Set of universal [blocks](section-concepts.html#kssref-concepts-block) for using on any project. Some blocks contain [elements](section-concepts.html#kssref-concepts-element) and [modifiers](section-concepts.html#kssref-concepts-modifier).

Core blocks don't contain, or almost don't contain styles such as colors, backgrounds, etc. Such styles are set on the 'theme' or 'design' layers. To style blocks or their elements, use utilities or modifiers such as `block--mod`.

Weight: 2

Styleguide: core-blocks
*/

/*
Core utilities

Set of utilities that can be used on any project.

Utilities are grouped by sections. Each section lists the standard utilities that come with the MLUT core. Modified utilities, utilities with more values and non-standard values are allocated in subsections.

In the description of the utilities, there may be a '**Parameters**' item in which the available values are listed. Instead of the utility value, the '`initial`' keyword may be specified. We will get this effect when using the utility with no value. The range of values can be specified as `0..3`.

If the property does not have a special value 'i' then 'i' value means `inherit`.

Some utilities responsive by design or have only responsive values. It will be indicated in the description like this: *Responsive*.

For some utilities, there is a description for non-developers.

Weight: 3

Styleguide: core-utils
*/

/*
Core styles

You can find their in `sass/base/`.

Weight: 4

Styleguide: core-styles
*/

/*
Sass tools

Available when using MLUT as a [toolkit](section-start.html#kssref-start-usage).

Weight: 5

Styleguide: sass-tools
*/

/*
Examples

Additional examples of core blocks, utilities, tools and ready-made components.

Weight: 6

Styleguide: examples
*/

/*
Settings

Grid settings, compilation flags, constants and more. All core settings are in the `sass/includes/_settings.scss`.

Styleguide: sass-tools.settings
*/

/*
Functions

Useful functions. All MLUT functions have 'mlu' prefix. You can find all functions in `sass/includes/_functions.scss`.

Styleguide: sass-tools.functions
*/

/*
Mixins

Useful mixins. All MLUT mixins have 'mlu' prefix. You can find all mixins in `sass/includes/_mixins.scss`.

Styleguide: sass-tools.mixins
*/

/*===CORE-BLOCKS===*/

/*
Page

Block for normalize browser styles of `body`. Designed for `body` tag.

It has `height: 100%` for sticky footer.

Styleguide: core-blocks.page
*/

.page {
	height: 100%;
	margin: 0px;
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Cantarell, Ubuntu, "Fira Sans", "Droid Sans", "Helvetica Neue", Arial, sans-serif;
}

/*
Row

Block for creating layouts. Suitable for columns, cards and horizontal lists. By default, `inline-block` technology is used for layouts. Using [D utility](section-core-utils.html#kssref-core-utils-visual-d), you can change the layout technology to flexbox.

Parts of the layout within a `row` are created using the elements:
* [row__col](#kssref-core-blocks-row-row__col)
* [row__item](#kssref-core-blocks-row-row__item)

`Rows` can be put into each other an unlimited number of times.

`Row` contains CSS counter named `mlu-row-item`.

Markup: ../../../docs/examples/core-blocks/row/row.html

Styleguide: core-blocks.row
*/

/*
row__col

The main element for creating columns in layout. By default, it stretches the entire width of the container. The columns have gutters on the sides and bottom.

The gutters are implemented using the `margin` property. For this reason, the percentage width must be specified using the CSS `calc()`. <br>
If `calc()` is not supported by the browser, then margin is provided in percent as fallback:
```scss
margin: 0 1.5% 24px;
margin: 0 calc(12px) 24px;
```
so that the layout does not collapse. Similar fallback used in the [wrapper](#kssref-core-blocks-wrapper) for fields.

The size of gutter fallback you can find in the [settings](section-sass-tools.html#kssref-sass-tools-settings-general) in `$mlu-grid-gutter-fallback.`

Column width is set using [W utility](section-core-utils.html#kssref-core-utils-bxz-w). See example [above](#kssref-core-blocks-row).

You can create nested layouts with a mix of `row` and `row__col` on the same DOM node. If you don't need double fields in the nested row, use the mix with the `row__item`. See example below.

All examples of the work of nested layouts are [here](section-examples.html#kssref-examples-nested_layouts).

Markup: ../../../docs/examples/core-blocks/row/row__col.html

Styleguide: core-blocks.row.row__col
*/

/*
row__item

Element for creating parts of the layout. By default, it stretches across the width of the content.

The sizes and offsets are set with help of utilities.

Markup: ../../../docs/examples/core-blocks/row/row__item.html

Styleguide: core-blocks.row.row__item
*/

/*
Set of ready layouts

To use the layout, click on 'Markup:', copy HTML from the example and paste it onto the page. 'Col' in the name of the layout means column.

The stylization of the columns is made for demo. It only works in this documentation.

Styleguide: examples.layouts
*/

/*
3 equal cols

Markup: ../../../docs/examples/layouts/3ec.html

Styleguide: examples.layouts.3ec
*/

/*
1 big col and 1 small

This example shows the variants for working the outermost fields in the layout. In all other layouts, you can work with fields similarly.

Markup: ../../../docs/examples/layouts/1bc1sc.html

Styleguide: examples.layouts.1bc1sc
*/

/*
4 equal cols

Markup: ../../../docs/examples/layouts/4ec.html

Styleguide: examples.layouts.4ec
*/

/*
2 equal cols. 4 equal cols inside the second

Markup: ../../../docs/examples/layouts/2ec4ecin2-nd.html

Styleguide: examples.layouts.2ec4ecin2_nd
*/

/*
2 equal cols. 2 full width cols inside the second

Markup: ../../../docs/examples/layouts/2ec2fwcin2-nd.html

Styleguide: examples.layouts.2ec2fwcin2_nd
*/

/*
3 equal cols. 3 full width cols in each.

Markup: ../../../docs/examples/layouts/3fwcin3ec.html

Styleguide: examples.layouts.3fwcin3ec
*/

/*
3 full width cols. 2 equal cols inside the second

Markup: ../../../docs/examples/layouts/3fwc2ecin2-nd.html

Styleguide: examples.layouts.3fwc2ecin2_nd
*/

/*
2 equal cols. 4 full width cols inside the second col

Markup: ../../../docs/examples/layouts/2ec4fwcin2-nd.html

Styleguide: examples.layouts.2ec4fwcin2_nd
*/

/*
3 centered cards with fixed width

Markup: ../../../docs/examples/layouts/3fc.html

Styleguide: examples.layouts.3fc
*/

/*
Nested layouts

All variants of nested layouts. A column with a nested layout has a gray background to demonstrate the different behavior of the gutters.

Styleguide: examples.nested_layouts
*/

/*
Layout in col

Markup: ../../../docs/examples/nested-row/row-in-col.html

Styleguide: examples.nested_layouts.row_in_col
*/

/*
Layout nested in col

By default layout nested in col with gutters and margin bottom.

Mx-1gg - layout with negative gutters nested in col.
Mb-2gg - layout with negative margin bottom nested in col with gutters.
Mb-2gg.Mx-1gg - layout with negative gutters and margin bottom nested in col.

Markup: ../../../docs/examples/nested-row/row-nested-col.hbs

Styleguide: examples.nested_layouts.row_nested_col
*/

/*
Case of nesting #7

Layout with negative gutters nested in col without margin bottom.

Markup: ../../../docs/examples/nested-row/row-nested-col7.html

Styleguide: examples.nested_layouts.row_nested_col.case7
*/

.row {
	position: relative;
	display: block;
	margin: 0px;
	padding: 0px;
	font-size: 0px;
	list-style: none;
	counter-reset: mlu-row-item;
}

.row__col,
.row__item {
	position: relative;
	display: inline-block;
	max-width: 100%;
	box-sizing: border-box;
	font-size: 16px;
	font-size: 1rem;
	text-align: left;
	vertical-align: top;
	direction: ltr;
}

.row__col.row,
.row__item.row {
	font-size: 0px;
}

.row__col > :first-child:not([class]),
.row__item > :first-child:not([class]) {
	margin-top: 0px;
}

.row__col > :last-child:not([class]),
.row__item > :last-child:not([class]) {
	margin-bottom: 0px;
}

.row__col {
	width: 97%;
	width: calc(100% - 24px);
	margin: 0 1.5% 24px;
	margin: 0 calc(12px) 24px;
}

.row__col.row {
	margin-bottom: 0px;
}

/*
Wrapper

The block-container for the main content of the page. The maximum width is set in the [settings](section-sass-tools.html#kssref-sass-tools-settings-blocks). The default is `1200px`.

The container has sides `padding` that equal to gutters so that the content does not stick to sides on small screens. On wide screens the container is centered.

Like in [row__col](#kssref-core-blocks-row-row__col), in wrapper is used `calc()` fallback for fields:
```scss
padding-right: 1.5%;
padding-left: 1.5%;
padding-right: calc(12px);
padding-left: calc(12px);
```

Markup: ../../../docs/examples/core-blocks/wrapper/wrapper.html

Styleguide: core-blocks.wrapper
*/

.wrapper {
	display: block;
	max-width: 1200px;
	margin: 0 auto;
	padding-right: 1.5%;
	padding-left: 1.5%;
	padding-right: calc(12px);
	padding-left: calc(12px);
}

/*
Ratio-block

Block for creating containers, with proportional width and height. Implemented using a pseudo-element with a `padding-bottom` in %.

The default aspect ratio is 16:9.

.ratio-block--4x3 - 4:3 aspect ratio.
.ratio-block--1x1 - 1:1 aspect ratio.

Markup: ../../../docs/examples/core-blocks/ratio-block/ratio-block.hbs

Styleguide: core-blocks.ratio-block
*/

/*
ratio-block__content

An element for inserting content that will be resize proportionally. See example [above](#kssref-core-blocks-ratio-block)

Styleguide: core-blocks.ratio-block.ratio-block__content
*/

/*
Responsive iframe

Responsive `iframe` with [ratio-block](section-core-blocks.html#kssref-core-blocks-ratio-block). Width is set for example. Use modifiers to change the aspect ratio.

Markup: ../../../docs/examples/core-blocks/ratio-block/iframe.html

Styleguide: examples.other.responsive_iframe
*/

.ratio-block {
	position: relative;
}

.ratio-block:before {
	display: block;
	width: 100%;
	padding-bottom: 56.25%;
	content: "";
}

.ratio-block--1x1:before {
	padding-bottom: 100%;
}

.ratio-block--4x3:before {
	padding-bottom: 75%;
}

.ratio-block__content {
	position: absolute;
	top: 0px;
	left: 0px;
	width: 100%;
	height: 100%;
}

/*
Btn

Block for creating buttons. It normalizes styles.

Markup: ../../../docs/examples/core-blocks/btn/btn.html

Styleguide: core-blocks.btn
*/

.btn {
	display: inline-block;
	box-sizing: border-box;
	margin: 0px;
	font-family: inherit;
	font-size: 1rem;
	line-height: normal;
	text-align: center;
	text-decoration: none;
	vertical-align: top;
	border: 0;
	cursor: pointer;
}

/*
Input

Block for creating inputs. Normalizes styles.

Markup: ../../../docs/examples/core-blocks/input/input.html

Styleguide: core-blocks.input
*/

.input {
	display: inline-block;
	box-sizing: border-box;
	margin: 0px;
	font: inherit;
	border: 0;
}

/*===DESIGN-BLOCKS===*/

/*===CORE-UTILS===*/

/*
Position

* `Pos`
* `Pos-a`
* `Pos-f`
* `T0`
* `R0`
* `B0`
* `L0`

Styleguide: core-utils.pos
*/

/*
Z

`z-index`.

0..3 - `z-index` available range. You can change it in utilities [settings](section-sass-tools.html#kssref-sass-tools-settings-utils).
max - max value. By default: `9999`.

Styleguide: core-utils.pos.z
*/

/*
mXy

X and Y coordinate axes. Change `top` or `bottom` and `right` or `left`.

0 - set T0, R0, B0 and L0.
50p - centered DOM node with `Pos-a` or `Pos-f` using `T50p`, `L50p` and `transform`.

Styleguide: core-utils.pos.xy
*/

.Pos {
	position: relative;
}

.Pos-a {
	position: absolute;
}

.Pos-f {
	position: fixed;
}

.T0 {
	top: 0px;
}

.R0 {
	right: 0px;
}

.B0 {
	bottom: 0px;
}

.L0 {
	left: 0px;
}

.mXy0 {
	top: 0px;
	right: 0px;
	bottom: 0px;
	left: 0px;
}

.mXy50p {
	top: 50%;
	left: 50%;
	-webkit-transform: translate(-50%, -50%);
	-ms-transform: translate(-50%, -50%);
	transform: translate(-50%, -50%);
}

.Z0 {
	z-index: 0;
}

.Z1 {
	z-index: 1;
}

.Z2 {
	z-index: 2;
}

.Z3 {
	z-index: 3;
}

.Z-max {
	z-index: 9999;
}

/*
D

Display. Sets the display type.

D - block. The DOM node stretches on the full width of the container and creates line breaks before and after. *Responsive*.
D-ib - inline-block. The width of the DOM node depends on the width of the content. Inline-blocks line up in one line like a letters and wrap if they don’t fit. *Responsive*.
D-f - flex. Turns an DOM node into a flex container. Can be used to progressive enhancement the [row](section-core-blocks.html#kssref-core-blocks-row) layouts. Child DOM nodes will be stretched to the full height of the container. By default, child DOM nodes are not wrap to the new line and are compressed in width until they go beyond the line. *Responsive*.
D-if - inline-flex. Combines inline-block and flex container. *Responsive*.
D-n - none. Hides the DOM node as if it is not on the page. *Responsive*.

Markup: ../../../docs/examples/core-utils/visual-formatting/d.hbs

Styleguide: core-utils.visual.d
*/

/*
mD

Modified display.

mD-f - `D-f` with line breaks.
mD-if - `D-if` with `Fxw-w`.

Styleguide: core-utils.visual.md
*/

.D {
	display: block;
}

.D-ib {
	display: inline-block;
}

.D-tb {
	display: table;
}

.D-tbc {
	display: table-cell;
}

.D-tbr {
	display: table-row;
}

.D-itb {
	display: inline-table;
}

.D-f {
	display: flex;
}

.D-if {
	display: inline-flex;
}

.D-n {
	display: none;
}

.mD-f {
	display: flex;
	flex-wrap: wrap;
}

.mD-if {
	display: inline-flex;
	flex-wrap: wrap;
}

/*
Flex

A group of utilities for managing flex-containers and flex-elements. Modified flex utilities are needed to manage [row-layouts](section-core-blocks.html#kssref-core-blocks-row) and their elements.

* `Fxd-c`
* `Fxg1` \- flex-element occupies the remaining free space in the line.
* `Fxsh0`
* `Fxw-wr`
* `Fxw-w`
* `As-s` \- stretches the flex-element to full height.
* `Jc` \- all values except `flex-start`.

Styleguide: core-utils.flex
*/

/*
Jc

Justify content. You can use it as additional horizontal alignment variants for row-layouts. Works only with flex-container. *Responsive*.

Jc-sa - space-around.
Jc-sb - space-between.
Jc-sa_xl - space-between on `xl` breakpoint.

Markup: ../../../docs/examples/core-utils/flex/jc.hbs

Styleguide: core-utils.flex.jc
*/

/*
mAs

Modified align self. Set `vertical-align` for common DOM nodes and `align-self` for flex-element.

Can be used to vertically align an element in row-layouts. Partially works without flex-container.

* `fs` \- top.
* `c` \- center.
* `fe` \- bottom.
* `b` \- text baseline.

Markup: ../../../docs/examples/core-utils/flex/mas.html

Styleguide: core-utils.flex.mas
*/

/*
mJc

Modified justify content. Combines [Ta](#kssref-core-utils-text-ta) and [Jc](#kssref-core-utils-flex-jc) utilities. Can be used to horizontal alignment with progressive enhancement for row-layouts. *Responsive*.

* `mJc-fs` \- left. *Only responsive*.

mJc-c - center.
mJc-fe - right.

Markup: ../../../docs/examples/core-utils/flex/mjc.hbs

Styleguide: core-utils.flex.mjc
*/

/*
mAi

Modified align items. Set `vertical-align` for child DOM nodes and `align-items` for flex-container.

Can be used to vertically align an elements in row-layouts. Partially works without flex-container.

mAi-fs - top
mAi-c - center
mAi-fe - bottom
mAi-b - text baseline

Markup: ../../../docs/examples/core-utils/flex/mai.hbs

Styleguide: core-utils.flex.mai
*/

.Fxd-c {
	flex-direction: column;
}

.Fxg1 {
	flex-grow: 1;
}

.Fxsh0 {
	flex-shrink: 0;
}

.Fxw-wr {
	flex-wrap: wrap-reverse;
}

.Fxw-w {
	flex-wrap: wrap;
}

.As-s {
	align-self: stretch;
}

.mAs-b {
	align-self: baseline;
	vertical-align: baseline;
}

.mAs-fs {
	align-self: flex-start;
	vertical-align: top;
}

.mAs-c {
	align-self: center;
	vertical-align: middle;
}

.mAs-fe {
	align-self: flex-end;
	vertical-align: bottom;
}

.Jc-fe {
	justify-content: flex-end;
}

.Jc-c {
	justify-content: center;
}

.Jc-sa {
	justify-content: space-around;
}

.Jc-sb {
	justify-content: space-between;
}

.mJc-c {
	justify-content: center;
	text-align: center;
}

.mJc-fe {
	justify-content: flex-end;
	text-align: right;
}

.mAi-fs {
	align-items: flex-start;
}

.mAi-fs > * {
	vertical-align: top;
}

.mAi-c {
	align-items: center;
}

.mAi-c > * {
	vertical-align: middle;
}

.mAi-fe {
	align-items: flex-end;
}

.mAi-fe > * {
	vertical-align: bottom;
}

.mAi-b {
	align-items: baseline;
}

.mAi-b > * {
	vertical-align: baseline;
}

/*
W

Width. You can set width in the grid-columns(gc) or in the grid-spans(gs).

If you specify the width in grid units on one breakpoint, then the width is preserved on all subsequent breakpoints.

* `W-a` \- default DOM node width. Depends on DOM node [display type](#kssref-core-utils-visual-d). *Responsive*.
* `W50p` \- 50%.
* `W100p`
* `W-card` \- fixed width for cards. You can change it in utilities [settings](section-sass-tools.html#kssref-sass-tools-settings-utils).
* `W1gc` \- 1/2 of grid in grid-columns on `xs` breakpoint, because on `xs`, grid has 2 columns.
* `W2gc`
* `W1gc_sm..W4gc_sm` \- range of available width in `gc` on `sm` breakpoint, because on `sm`, grid has 4 columns. You can change grid options in [settings](section-sass-tools.html#kssref-sass-tools-settings-grid). Contains CSS `calc()` fallback.
* `W1gc..W12gc` \- available width in `gc` on all breakpoints, starting with `md`.
* `W1gs_sm..W4gs_sm` \- range of available width in grid spans on `sm`.
* `W1gs..W12gs`

Markup: ../../../docs/examples/core-utils/box-sizing/w.html

Styleguide: core-utils.bxz.w
*/

.W-a {
	width: auto;
}

.W1gc {
	width: 47%;
	width: calc(50% - 24px);
}

.W2gc {
	width: 97%;
	width: calc(100% - 24px);
}

.W50p {
	width: 50%;
}

.W100p {
	width: 100%;
}

/*
Box sizing

Utilities for DOM nodes size management.

* `Maw100p`
* `Maw-n`
* `H100p`
* `Bxz`

Styleguide: core-utils.bxz
*/

.W-card {
	max-width: 288px;
}

.Maw100p {
	max-width: 100%;
}

.Maw-n {
	max-width: none;
}

.H100p {
	height: 100%;
}

.Bxz {
	box-sizing: border-box;
}

/*
Margin

You can set some margins in the grid-gutters(gg). For example margin top - `Mt` and margin bottom - `Mb`.

Vertical margins in grid-gutters are converted to `rems`. This affects accessibility, because margins will be scaled when changing font sizes in the browser settings.

* `M0` \- clear all margins.
* `M-a`
* `Mr0`
* `Mt0`
* `Mt1gg..Mt4gg`
* `Mb0`
* `Mb1gg..Mb4gg`
* `Mb-2gg`

Styleguide: core-utils.margin
*/

/*
Ml

Margin left. You can set left margin in the grid-columns(gc), grid-gutters(gg) or in the grid-spans(gs). So you can set the offset for layout elements.

* `Ml-a` \- *Responsive*.
* `Ml0` \- *Responsive*.
* `Ml-2gg..Ml2gg` \- the range includes 2 negative margins and 2 positive.
* `Ml1gg` \- Partial *responsive* on `lg` and `xl`. It is needed to return the default column gutter.
* `Ml1gc..Ml10gc` \- available margin in `gc` on all breakpoints, starting with `md`.
* `Ml1gs..Ml10gs`

Markup: ../../../docs/examples/core-utils/margin/ml.html

Styleguide: core-utils.margin.ml
*/

/*
Mx

Margin on X axis. Sets left and right margin.

* `Mx-a` \- centered the DOM node with a given width and `block` [display type](#kssref-core-utils-visual-d). *Responsive*.
* `Mx1gg` \- *responsive*.
* `Mx-1gg` \- it needed for imposes left and right margins of the outermost columns on the fields of the [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper). This behavior is necessary so that there are no double fields in the layout, using [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) or `Mx1gg`.
* `Mx0` \- *responsive*.

Markup: ../../../docs/examples/core-utils/margin/mx.html

Styleguide: core-utils.margin.mx
*/

.M0 {
	margin: 0px;
}

.M-a {
	margin: auto;
}

.Ml-a {
	margin-left: auto;
}

.Mx-a {
	margin-left: auto;
	margin-right: auto;
}

.Mt0 {
	margin-top: 0;
}

.Mr0 {
	margin-right: 0;
}

.Mb0 {
	margin-bottom: 0;
}

.Ml0 {
	margin-left: 0;
}

.Mt4gg {
	margin-top: 3rem;
}

.Mb4gg {
	margin-bottom: 3rem;
}

.Mt3gg {
	margin-top: 2.25rem;
}

.Mb3gg {
	margin-bottom: 2.25rem;
}

.Mt2gg {
	margin-top: 1.5rem;
}

.Mb2gg {
	margin-bottom: 1.5rem;
}

.Mt1gg {
	margin-top: 0.75rem;
}

.Mb1gg {
	margin-bottom: 0.75rem;
}

.Mb-2gg {
	margin-bottom: -24px;
}

.Ml-2gg {
	margin-left: -24px;
}

.Ml2gg {
	margin-left: 24px;
}

.Ml-1gg {
	margin-left: -12px;
}

.Ml1gg {
	margin-left: 12px;
}

.Mx1gg {
	margin-right: 1.5%;
	margin-left: 1.5%;
	margin-right: 12px;
	margin-left: 12px;
}

.Mx-1gg {
	margin-right: -1.5%;
	margin-left: -1.5%;
	margin-right: calc(-12px);
	margin-left: calc(-12px);
}

/*
Padding

* `P0` \- clear all paddings.
* `P8` \- creates paddings of 8px all around.
* `Pt1gg` \- works similarly [Mt1gg](#kssref-core-utils-margin)
* `Pb1gg`
* `Px1gg`

Styleguide: core-utils.padding
*/

.P0 {
	padding: 0px;
}

.P8 {
	padding: 0.5em 8px;
}

.Pt1gg {
	padding-top: 0.75rem;
}

.Pb1gg {
	padding-bottom: 0.75rem;
}

.Px1gg {
	padding-right: 1.5%;
	padding-left: 1.5%;
	padding-right: calc(12px);
	padding-left: calc(12px);
}

/*
Visual formatting

* `D-tb`
* `D-tbc`
* `D-tbr`
* `D-itb`
* `Fl` \- turn on wrapping text on the right.
* `Fl-r` \- turn on wrapping text on the left.
* `Ov`
* `Ov-a` \- adds a scrollbar if the content does not fit into the container.

Styleguide: core-utils.visual
*/

/*
mCl

Modified clear. It is clearfix utility. Use it with a container whose child DOM nodes have `Fl`.

Markup: ../../../docs/examples/core-utils/visual-formatting/mcl.html

Styleguide: core-utils.visual.mcl
*/

/*
mV

Modified visibility.

mV-vh - visually hides the DOM node but leaves it accessible to the screen readers and robots. For comparison `D-n` hides the DOM node from all.

Markup: ../../../docs/examples/core-utils/visual-formatting/mv.hbs

Styleguide: core-utils.visual.mv
*/

/*
mAll

Modified `all`.

* `sr` \- soft reset, reset some default browser styles:
	* `margin`
	* `padding`
	* `border`
	* `font`
	* `list-style`

Markup: ../../../docs/examples/core-utils/visual-formatting/mall.html

Styleguide: core-utils.visual.mall
*/

.Fl {
	float: left;
}

.Fl-r {
	float: right;
}

.mCl:after {
	display: table;
	clear: both;
	content: "";
}

.Ov {
	overflow: hidden;
}

.Ov-a {
	overflow: auto;
}

.mV-vh {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0px;
	overflow: hidden;
	white-space: nowrap;
	border: 0px;
	clip: rect(0 0 0 0);
}

.mAll-sr {
	margin: 0;
	padding: 0;
	font: inherit;
	list-style: none;
	border: 0;
}

/*
Font

* `F-i`
* `Fw400` \- normal font weight.
* `Fw700` \- **bold**.
* `Fs` \- *italic*.
* `Fs-n` \- normal font style.
* `Fz-i`

Styleguide: core-utils.f
*/

/*
mFz

Modified font size.

0 - Accessibly hides the text inside the DOM node.

Styleguide: core-utils.f.mfz
*/

.F-i {
	font: inherit;
}

.Fw400 {
	font-weight: 400;
}

.Fw700 {
	font-weight: 700;
}

.Fs {
	font-style: italic;
}

.Fs-n {
	font-style: normal;
}

.Fz-i {
	font-size: inherit;
}

.mFz0 {
	overflow: hidden;
	color: transparent;
	text-indent: 120%;
	white-space: nowrap;
	font-size: 0px;
}

.mFz0::-moz-selection {
	color: transparent;
}

.mFz0::selection {
	color: transparent;
}

/*
Text

Group of utilities that manage the display of text.

* `Tt` \- UPPERCASE.
* `Tt-n` \- remove text transform.
* `C-i`
* `Lh-n` \- line-height normal.

Styleguide: core-utils.text
*/

/*
Ta

Text alignment.

initial - left.
c - center.
r - right.

Styleguide: core-utils.text.ta
*/

/*
Td

Text decoration.

initial - remove text decoration.
u - <u>underline</u>.
l - ~~strikethrough~~.

Styleguide: core-utils.text.td
*/

/*
Dir

Direction. Sets direction of text and order items in row-layout. When specifying a breakpoint, the utility *only* works on it.

Dir-r - right to left. *Responsive*.
Dir-r_md - only on md.

Markup: ../../../docs/examples/core-utils/text/dir.hbs

Styleguide: core-utils.text.dir
*/

/*
mTov

Modified text overflow. Removes line breaks in the text and displays ellipsis at the end of the line if the text does not fit in the container. DOM node with `mTov` should have a width limit.

Markup: ../../../docs/examples/core-utils/text/mtov.html

Styleguide: core-utils.text.mtov
*/

.Ta {
	text-align: left;
}

.Ta-c {
	text-align: center;
}

.Ta-r {
	text-align: right;
}

.Td {
	text-decoration: none;
}

.Td-u {
	text-decoration: underline;
}

.Td-l {
	text-decoration: line-through;
}

.Tt {
	text-transform: uppercase;
}

.Tt-n {
	text-transform: none;
}

.mTov {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

.C-i {
	color: inherit;
}

.Lh-n {
	line-height: normal;
}

.Dir-r {
	direction: rtl;
}

/*
Background

* `Bgr-n`
* `Bgsz-cv`
* `Bgsz-ct`

Styleguide: core-utils.bg
*/

/*
mBgp

Modified `background-position`. Includes `Bgr-n`.

c - center.

Styleguide: core-utils.bg.mbgp
*/

.Bgr-n {
	background-repeat: no-repeat;
}

.mBgp-c {
	background-repeat: no-repeat;
	background-position: center;
}

.Bgsz-cv {
	background-size: cover;
}

.Bgsz-ct {
	background-size: contain;
}

/*
Border

* `Bdcl-c` \- remove the separation between table cells.
* `Bdrs50p` \- makes the shape visually round.

Styleguide: core-utils.bd
*/

.Bdcl-c {
	border-collapse: collapse;
}

.Bdrs50p {
	border-radius: 50%;
}

/*===DESIGN-UTILS===*/

@media (min-width: 520px) {
	.D-n_sm {
		display: none;
	}

	.D_sm {
		display: block;
	}

	.D-ib_sm {
		display: inline-block;
	}

	.D-f_sm {
		display: flex;
	}

	.D-if_sm {
		display: inline-flex;
	}

	.Jc-sa_sm {
		justify-content: space-around;
	}

	.Jc-sb_sm {
		justify-content: space-between;
	}

	.mJc-fs_sm {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_sm {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_sm {
		justify-content: flex-end;
		text-align: right;
	}

	.W-a_sm {
		width: auto;
	}

	.W1gc_sm {
		width: 22%;
		width: calc(25% - 24px);
	}

	.W1gs_sm {
		width: 25%;
	}

	.W2gc_sm {
		width: 47%;
		width: calc(50% - 24px);
	}

	.W2gs_sm {
		width: 50%;
	}

	.W3gc_sm {
		width: 72%;
		width: calc(75% - 24px);
	}

	.W3gs_sm {
		width: 75%;
	}

	.W4gc_sm {
		width: 97%;
		width: calc(100% - 24px);
	}

	.W4gs_sm {
		width: 100%;
	}

	.Ml-a_sm {
		margin-left: auto;
	}

	.Mx-a_sm {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_sm {
		margin-left: 12px;
		margin-right: 12px;
	}

	.Mx0_sm {
		margin-left: 0;
		margin-right: 0;
	}
}

@media (min-width: 760px) {
	.D-n_md {
		display: none;
	}

	.D_md {
		display: block;
	}

	.D-ib_md {
		display: inline-block;
	}

	.D-f_md {
		display: flex;
	}

	.D-if_md {
		display: inline-flex;
	}

	.Jc-sa_md {
		justify-content: space-around;
	}

	.Jc-sb_md {
		justify-content: space-between;
	}

	.mJc-fs_md {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_md {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_md {
		justify-content: flex-end;
		text-align: right;
	}

	.W-a_md {
		width: auto;
	}

	.W1gc_md {
		width: calc(8.333% - 24px);
	}

	.W1gs_md {
		width: 8.333%;
	}

	.Ml1gs_md {
		margin-left: 8.333%;
	}

	.Ml1gc_md {
		margin-left: calc(8.333% + 12px);
	}

	.W2gc_md {
		width: calc(16.666% - 24px);
	}

	.W2gs_md {
		width: 16.666%;
	}

	.Ml2gs_md {
		margin-left: 16.666%;
	}

	.Ml2gc_md {
		margin-left: calc(16.666% + 12px);
	}

	.W3gc_md {
		width: calc(25% - 24px);
	}

	.W3gs_md {
		width: 25%;
	}

	.Ml3gs_md {
		margin-left: 25%;
	}

	.Ml3gc_md {
		margin-left: calc(25% + 12px);
	}

	.W4gc_md {
		width: calc(33.333% - 24px);
	}

	.W4gs_md {
		width: 33.333%;
	}

	.Ml4gs_md {
		margin-left: 33.333%;
	}

	.Ml4gc_md {
		margin-left: calc(33.333% + 12px);
	}

	.W5gc_md {
		width: calc(41.666% - 24px);
	}

	.W5gs_md {
		width: 41.666%;
	}

	.Ml5gs_md {
		margin-left: 41.666%;
	}

	.Ml5gc_md {
		margin-left: calc(41.666% + 12px);
	}

	.W6gc_md {
		width: calc(50% - 24px);
	}

	.W6gs_md {
		width: 50%;
	}

	.Ml6gs_md {
		margin-left: 50%;
	}

	.Ml6gc_md {
		margin-left: calc(50% + 12px);
	}

	.W7gc_md {
		width: calc(58.333% - 24px);
	}

	.W7gs_md {
		width: 58.333%;
	}

	.Ml7gs_md {
		margin-left: 58.333%;
	}

	.Ml7gc_md {
		margin-left: calc(58.333% + 12px);
	}

	.W8gc_md {
		width: calc(66.666% - 24px);
	}

	.W8gs_md {
		width: 66.666%;
	}

	.Ml8gs_md {
		margin-left: 66.666%;
	}

	.Ml8gc_md {
		margin-left: calc(66.666% + 12px);
	}

	.W9gc_md {
		width: calc(75% - 24px);
	}

	.W9gs_md {
		width: 75%;
	}

	.Ml9gs_md {
		margin-left: 75%;
	}

	.Ml9gc_md {
		margin-left: calc(75% + 12px);
	}

	.W10gc_md {
		width: calc(83.333% - 24px);
	}

	.W10gs_md {
		width: 83.333%;
	}

	.Ml10gs_md {
		margin-left: 83.333%;
	}

	.Ml10gc_md {
		margin-left: calc(83.333% + 12px);
	}

	.W11gc_md {
		width: calc(91.666% - 24px);
	}

	.W11gs_md {
		width: 91.666%;
	}

	.W12gc_md {
		width: calc(100% - 24px);
	}

	.W12gs_md {
		width: 100%;
	}

	.Ml-a_md {
		margin-left: auto;
	}

	.Mx-a_md {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_md {
		margin-left: 12px;
		margin-right: 12px;
	}

	.Mx0_md {
		margin-left: 0;
		margin-right: 0;
	}
}

@media (min-width: 960px) {
	.row__col {
		margin-right: calc(16px);
		margin-left: calc(16px);
	}

	.row__col {
		margin-bottom: 32px;
	}

	.wrapper {
		padding-right: calc(16px);
		padding-left: calc(16px);
	}

	.D-n_lg {
		display: none;
	}

	.D_lg {
		display: block;
	}

	.D-ib_lg {
		display: inline-block;
	}

	.D-f_lg {
		display: flex;
	}

	.D-if_lg {
		display: inline-flex;
	}

	.Jc-sa_lg {
		justify-content: space-around;
	}

	.Jc-sb_lg {
		justify-content: space-between;
	}

	.mJc-fs_lg {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_lg {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_lg {
		justify-content: flex-end;
		text-align: right;
	}

	.W1gc {
		width: calc(50% - 32px);
	}

	.W2gc {
		width: calc(100% - 32px);
	}

	.W-a_lg {
		width: auto;
	}

	.W1gc_sm {
		width: calc(25% - 32px);
	}

	.W2gc_sm {
		width: calc(50% - 32px);
	}

	.W3gc_sm {
		width: calc(75% - 32px);
	}

	.W4gc_sm {
		width: calc(100% - 32px);
	}

	.W1gc_md {
		width: calc(8.333% - 32px);
	}

	.Ml1gc_md {
		margin-left: calc(8.333% + 16px);
	}

	.W2gc_md {
		width: calc(16.666% - 32px);
	}

	.Ml2gc_md {
		margin-left: calc(16.666% + 16px);
	}

	.W3gc_md {
		width: calc(25% - 32px);
	}

	.Ml3gc_md {
		margin-left: calc(25% + 16px);
	}

	.W4gc_md {
		width: calc(33.333% - 32px);
	}

	.Ml4gc_md {
		margin-left: calc(33.333% + 16px);
	}

	.W5gc_md {
		width: calc(41.666% - 32px);
	}

	.Ml5gc_md {
		margin-left: calc(41.666% + 16px);
	}

	.W6gc_md {
		width: calc(50% - 32px);
	}

	.Ml6gc_md {
		margin-left: calc(50% + 16px);
	}

	.W7gc_md {
		width: calc(58.333% - 32px);
	}

	.Ml7gc_md {
		margin-left: calc(58.333% + 16px);
	}

	.W8gc_md {
		width: calc(66.666% - 32px);
	}

	.Ml8gc_md {
		margin-left: calc(66.666% + 16px);
	}

	.W9gc_md {
		width: calc(75% - 32px);
	}

	.Ml9gc_md {
		margin-left: calc(75% + 16px);
	}

	.W10gc_md {
		width: calc(83.333% - 32px);
	}

	.Ml10gc_md {
		margin-left: calc(83.333% + 16px);
	}

	.W11gc_md {
		width: calc(91.666% - 32px);
	}

	.W12gc_md {
		width: calc(100% - 32px);
	}

	.W1gc_lg {
		width: calc(8.333% - 32px);
	}

	.W1gs_lg {
		width: 8.333%;
	}

	.Ml1gs_lg {
		margin-left: 8.333%;
	}

	.Ml1gc_lg {
		margin-left: calc(8.333% + 16px);
	}

	.W2gc_lg {
		width: calc(16.666% - 32px);
	}

	.W2gs_lg {
		width: 16.666%;
	}

	.Ml2gs_lg {
		margin-left: 16.666%;
	}

	.Ml2gc_lg {
		margin-left: calc(16.666% + 16px);
	}

	.W3gc_lg {
		width: calc(25% - 32px);
	}

	.W3gs_lg {
		width: 25%;
	}

	.Ml3gs_lg {
		margin-left: 25%;
	}

	.Ml3gc_lg {
		margin-left: calc(25% + 16px);
	}

	.W4gc_lg {
		width: calc(33.333% - 32px);
	}

	.W4gs_lg {
		width: 33.333%;
	}

	.Ml4gs_lg {
		margin-left: 33.333%;
	}

	.Ml4gc_lg {
		margin-left: calc(33.333% + 16px);
	}

	.W5gc_lg {
		width: calc(41.666% - 32px);
	}

	.W5gs_lg {
		width: 41.666%;
	}

	.Ml5gs_lg {
		margin-left: 41.666%;
	}

	.Ml5gc_lg {
		margin-left: calc(41.666% + 16px);
	}

	.W6gc_lg {
		width: calc(50% - 32px);
	}

	.W6gs_lg {
		width: 50%;
	}

	.Ml6gs_lg {
		margin-left: 50%;
	}

	.Ml6gc_lg {
		margin-left: calc(50% + 16px);
	}

	.W7gc_lg {
		width: calc(58.333% - 32px);
	}

	.W7gs_lg {
		width: 58.333%;
	}

	.Ml7gs_lg {
		margin-left: 58.333%;
	}

	.Ml7gc_lg {
		margin-left: calc(58.333% + 16px);
	}

	.W8gc_lg {
		width: calc(66.666% - 32px);
	}

	.W8gs_lg {
		width: 66.666%;
	}

	.Ml8gs_lg {
		margin-left: 66.666%;
	}

	.Ml8gc_lg {
		margin-left: calc(66.666% + 16px);
	}

	.W9gc_lg {
		width: calc(75% - 32px);
	}

	.W9gs_lg {
		width: 75%;
	}

	.Ml9gs_lg {
		margin-left: 75%;
	}

	.Ml9gc_lg {
		margin-left: calc(75% + 16px);
	}

	.W10gc_lg {
		width: calc(83.333% - 32px);
	}

	.W10gs_lg {
		width: 83.333%;
	}

	.Ml10gs_lg {
		margin-left: 83.333%;
	}

	.Ml10gc_lg {
		margin-left: calc(83.333% + 16px);
	}

	.W11gc_lg {
		width: calc(91.666% - 32px);
	}

	.W11gs_lg {
		width: 91.666%;
	}

	.W12gc_lg {
		width: calc(100% - 32px);
	}

	.W12gs_lg {
		width: 100%;
	}

	.Ml1gg_lg {
		margin-left: 16px;
	}

	.Ml0_lg {
		margin-left: 0;
	}

	.Mt4gg {
		margin-top: 4rem;
	}

	.Mb4gg {
		margin-bottom: 4rem;
	}

	.Mt3gg {
		margin-top: 3rem;
	}

	.Mb3gg {
		margin-bottom: 3rem;
	}

	.Mt2gg {
		margin-top: 2rem;
	}

	.Mb2gg {
		margin-bottom: 2rem;
	}

	.Mt1gg {
		margin-top: 1rem;
	}

	.Mb1gg {
		margin-bottom: 1rem;
	}

	.Mb-2gg {
		margin-bottom: -32px;
	}

	.Ml-2gg {
		margin-left: -32px;
	}

	.Ml2gg {
		margin-left: 32px;
	}

	.Ml-1gg {
		margin-left: -16px;
	}

	.Ml1gg {
		margin-left: 16px;
	}

	.Mx1gg {
		margin-right: 16px;
		margin-left: 16px;
	}

	.Mx-1gg {
		margin-right: calc(-16px);
		margin-left: calc(-16px);
	}

	.Ml-a_lg {
		margin-left: auto;
	}

	.Mx-a_lg {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_lg {
		margin-left: 16px;
		margin-right: 16px;
	}

	.Mx0_lg {
		margin-left: 0;
		margin-right: 0;
	}

	.Pt1gg {
		padding-top: 1rem;
	}

	.Pb1gg {
		padding-bottom: 1rem;
	}

	.Px1gg {
		padding-right: calc(16px);
		padding-left: calc(16px);
	}
}

@media (min-width: 1168px) {
	.D-n_xl {
		display: none;
	}

	.D_xl {
		display: block;
	}

	.D-ib_xl {
		display: inline-block;
	}

	.D-f_xl {
		display: flex;
	}

	.D-if_xl {
		display: inline-flex;
	}

	.Jc-sa_xl {
		justify-content: space-around;
	}

	.Jc-sb_xl {
		justify-content: space-between;
	}

	.mJc-fs_xl {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_xl {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_xl {
		justify-content: flex-end;
		text-align: right;
	}

	.W-a_xl {
		width: auto;
	}

	.W1gc_xl {
		width: calc(8.333% - 32px);
	}

	.W1gs_xl {
		width: 8.333%;
	}

	.Ml1gs_xl {
		margin-left: 8.333%;
	}

	.Ml1gc_xl {
		margin-left: calc(8.333% + 16px);
	}

	.W2gc_xl {
		width: calc(16.666% - 32px);
	}

	.W2gs_xl {
		width: 16.666%;
	}

	.Ml2gs_xl {
		margin-left: 16.666%;
	}

	.Ml2gc_xl {
		margin-left: calc(16.666% + 16px);
	}

	.W3gc_xl {
		width: calc(25% - 32px);
	}

	.W3gs_xl {
		width: 25%;
	}

	.Ml3gs_xl {
		margin-left: 25%;
	}

	.Ml3gc_xl {
		margin-left: calc(25% + 16px);
	}

	.W4gc_xl {
		width: calc(33.333% - 32px);
	}

	.W4gs_xl {
		width: 33.333%;
	}

	.Ml4gs_xl {
		margin-left: 33.333%;
	}

	.Ml4gc_xl {
		margin-left: calc(33.333% + 16px);
	}

	.W5gc_xl {
		width: calc(41.666% - 32px);
	}

	.W5gs_xl {
		width: 41.666%;
	}

	.Ml5gs_xl {
		margin-left: 41.666%;
	}

	.Ml5gc_xl {
		margin-left: calc(41.666% + 16px);
	}

	.W6gc_xl {
		width: calc(50% - 32px);
	}

	.W6gs_xl {
		width: 50%;
	}

	.Ml6gs_xl {
		margin-left: 50%;
	}

	.Ml6gc_xl {
		margin-left: calc(50% + 16px);
	}

	.W7gc_xl {
		width: calc(58.333% - 32px);
	}

	.W7gs_xl {
		width: 58.333%;
	}

	.Ml7gs_xl {
		margin-left: 58.333%;
	}

	.Ml7gc_xl {
		margin-left: calc(58.333% + 16px);
	}

	.W8gc_xl {
		width: calc(66.666% - 32px);
	}

	.W8gs_xl {
		width: 66.666%;
	}

	.Ml8gs_xl {
		margin-left: 66.666%;
	}

	.Ml8gc_xl {
		margin-left: calc(66.666% + 16px);
	}

	.W9gc_xl {
		width: calc(75% - 32px);
	}

	.W9gs_xl {
		width: 75%;
	}

	.Ml9gs_xl {
		margin-left: 75%;
	}

	.Ml9gc_xl {
		margin-left: calc(75% + 16px);
	}

	.W10gc_xl {
		width: calc(83.333% - 32px);
	}

	.W10gs_xl {
		width: 83.333%;
	}

	.Ml10gs_xl {
		margin-left: 83.333%;
	}

	.Ml10gc_xl {
		margin-left: calc(83.333% + 16px);
	}

	.W11gc_xl {
		width: calc(91.666% - 32px);
	}

	.W11gs_xl {
		width: 91.666%;
	}

	.W12gc_xl {
		width: calc(100% - 32px);
	}

	.W12gs_xl {
		width: 100%;
	}

	.Ml1gg_xl {
		margin-left: 16px;
	}

	.Ml0_xl {
		margin-left: 0;
	}

	.Ml-a_xl {
		margin-left: auto;
	}

	.Mx-a_xl {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_xl {
		margin-left: 16px;
		margin-right: 16px;
	}

	.Mx0_xl {
		margin-left: 0;
		margin-right: 0;
	}

	.Dir-r_xl {
		direction: rtl;
	}
}

@media (min-width: 520px) and (max-width: 759px) {
	.Dir-r_sm {
		direction: rtl;
	}
}

@media (min-width: 760px) and (max-width: 959px) {
	.Dir-r_md {
		direction: rtl;
	}
}

@media (min-width: 960px) and (max-width: 1167px) {
	.Dir-r_lg {
		direction: rtl;
	}
}