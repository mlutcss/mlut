@charset "UTF-8";

/*
Getting started

There are 2 ways to start using MLUT:

- assembled distributive
- developer toolkit

Weight: 0

Styleguide: start
*/

/*
Installation

### [Git](https://github.com/mr150/mlut) ###
```
git clone https://github.com/mr150/mlut.git
```

### NPM ###
```
npm i mlut -D
```

### CDN ###
```html
<link href="https://unpkg.com/mlut@latest/dist/css/mlut.min.css" rel="stylesheet">
```
```html
<script src="https://unpkg.com/mlut@latest/dist/js/mlut.min.js"></script>
```
### Download ###
Download assembled files: [CSS](https://unpkg.com/mlut@latest/dist/css/mlut.min.css), [JS](https://unpkg.com/mlut@latest/dist/js/mlut.min.js)

Weight: 0

Styleguide: start.install
*/

/*
Usage

### HTML ###
Before starting work, make sure you have the correct HTML5 doctype:
```html
<!DOCTYPE html>
```
and the responsive viewport meta tag:
```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

### Distributive ###
You can get assembled MLUT code and include it to your project. There are some ways to get a distributive.

- just plug in with CDN
- if used `git clone`, files are located in the `dist/` folder
- if used `npm`, files are in `node_modules/mlut/dist/`

Add the file to your page like here:
```html
<link href="css/mlut.min.css" rel="stylesheet">
<script src="js/mlut.min.js"></script>
```
And just add MLUT classes to markup:
```html
<div class="row D-f">
	<div class="row__col W3c_md">
		<h3>Simple text</h3>
```
Try [examples](section-examples.html) with ready HTML.

### Toolkit ###
To use all MLUT features you need an assembly. There are 3 ways:

- Use [MLUT project template](https://github.com/mr150/mlut-project)
- Use [npm](#kssref-start-install), import tools from `node_modules/mlut/src/` and setup assembly based on [technologies list](./)
- [Clone](#kssref-start-install) MLUT repo and use configured assembly from it

#### Assembly ####
If you cloned git repo:
```
npm i
```
Run dev server with live reload, code linting and documentation building:
```
npm run dev
```
or
```
gulp
```
Build without dev server:
```
npm run build
```

#### Styles ####
Once the assembly is configured, import sass tools and settings to your `style.scss`
```scss
@import "tools/settings";
@import "tools/functions";
@import "tools/mixins";
```
Then you can import blocks and utilities how it is done in the [src/sass/mlut.scss](https://github.com/mr150/mlut/blob/master/src/sass/mlut.scss) to get the standard build. Or you can import only what you need:
```scss
@import "core/blocks/wrapper";
@import "core/utils/display";

@include mlu-bpm("md") {
	.inp--common {
		padding: mlu-px2em(16px) 16px;
	}
}
```

Weight: 1

Styleguide: start.usage
*/

/*
Basic concepts

Before reading the documentation, learn MLUT basic concepts.

Weight: 1

Styleguide: concepts
*/

/*
Block

Independent page component that can be reused. Examples: [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper), [row](section-core-blocks.html#kssref-core-blocks-row).

Weight: 1

Styleguide: concepts.block
*/

/*
Element

A part of a block that cannot be used without it.

The names of the elements are constructed according to the scheme: `block-name__element-name`. The element name is separated from the block name by two underscores '__'.

Note that the *element* and the *HTML-element* are different concepts.

Examples: [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col),  [ratio-block__content](section-core-blocks.html#kssref-core-blocks-ratio-block-ratio-block__content).

Weight: 2

Styleguide: concepts.element
*/

/*
Modifier

A entity that defines the appearance and behavior of a block or an element.

The name of the modifier is separated from the name of the block or element by two hyphens `--`.

Examples: [ratio-block--4x3](section-core-blocks.html#kssref-core-blocks-ratio-block), `ratio-block--1x1`.

A modifier cannot be used in isolation from a modifiable block or element.

Weight: 3

Styleguide: concepts.modifier
*/

/*
Breakpoint

The width of the screen on which the styles change. In MLUT, the default breakpoints are:
* `xs` \- minimum width `0px-520px`
* `sm` \- horizontal orientation of smartphone `520px-760px`
* `md` \- small tablet `760px-960px`
* `lg` \- square monitor `960px-1168px`
* `xl` \- wide screen `>1168px`

Weight: 5

Styleguide: concepts.breakpoint
*/

/*
Utility

An entity that, depending on the parameters, does 1 action with the DOM node styles. Utilities change 1 CSS property or group of related properties.

Utility class names are formed according to the scheme:
1. optional pseudo-class, pseudo-element, selector modifier or state: `h` - hover, `af` - after, `nojs` - javascript disabled etc. Allowed several states in the same class. States are separated by a hyphen: `h-f` - hover, focus. States separated from the utility name by underscore '_'. More about states [below](#kssref-concepts-utility-states).
1. utility name. Written with capital letter. Most utility names are [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations([pdf](https://yadi.sk/i/VcKfz5u7DBHrLA)).
1. optional value. Valid are:
	* number
	* CSS or MLUT keywords
	* MLUT variables
	* [CSS custom properties](section-core-styles.html#kssref-core-styles-css_vars).

	Values are set according to	[Emmet rules](https://docs.emmet.io/css-abbreviations/#supplying-values-with-units). Keywords and variables are separated by a hyphen '-' from utility name. Custom property is separated from the utility name by two hyphens. Its name may contain lowercase letters and numbers.
1. optional breakpoint name: `sm`, `lg`, etc. Separated from the utility value by underscore '_'.

Utility class name example: `Tt`, `Mb2r`, `D-ib_sm`, `h_Bgc-bd0`, `Fz--gg-rem`.

There are some special abbreviations for color utilities:
* `t` - `transparent`
* `i` - `inherit`
* `cc` - `curentColor`

Weight: 6

Styleguide: concepts.utility
*/

/*
Types

Utilities in MLUT come in 3 types:

* **Common** \- named and work like CSS properties.
* **Custom** \- manage one or more related CSS [custom properties](section-core-styles.html#kssref-core-styles-css_vars). Their names begin with a hyphen and are abbreviations of the names of the corresponding properties. Examples: `-Gg`.
* **Modified** \- affect several CSS properties. The names of such utilities begin with 'm' prefix.

Weight: 0

Styleguide: concepts.utility.types
*/

/*
Directions

Some utilities have directions. There are 7 of them:
* 4 main directions - top, right, bottom, left. They are registered in the map [$mlu-main-directions](section-sass-tools.html#kssref-sass-tools-settings-general).
* 3 combined direction - `x`(left, right), `y`(top, bottom) and `xy`(all main directions).

The direction is used in the names of utilities, as well as in some mixins. 1 letter is used to indicate the direction(`Mt`, `Pb`), with the exception of `xy`. In the names of utilities `xy` is not indicated(`M`, `P`), and 2 letters `xy` are passed in mixins.

Weight: 1

Styleguide: concepts.utility.dirs
*/

/*
MLUT keywords and variables

**MLUT keywords** are strings values. Their names can only contain lowercase letters. Keywords include:
* names of breakpoints - `sm`, `lg`, etc. Permissible to use only in custom and modified utilities
* `min` and `max`. Allowed to use only in utils with number values
* abbreviations for invented values that are not in the CSS specification. Allowed to use only in custom and modified utilities

**MLUT variables** exist only at the agreement level. Essentially, they are similar to Sass variables, which are compiled into CSS values. They can take any value, including CSS custom properties. Variable name can contain only lowercase letters and numbers, and must also end in a number: `bd0`, `gr2` etc. Example: [Maw-fx0](section-core-utils.html#kssref-core-utils-bxz-maw).

Weight: 1

Styleguide: concepts.utility.mlut_kw_var
*/

/*
Creation

For convenient creation of frequently used utilities, a [group of mixins](section-sass-tools.html#kssref-sass-tools-mixins-util_wrappers) has been prepared. They are wrappers over the main mixins for creating utilities:
- [mk-util](section-sass-tools.html#kssref-sass-tools-mixins-mk_util)
- [mk-util-directions](section-sass-tools.html#kssref-sass-tools-mixins-mk_util_dir)
- [mk-state](section-sass-tools.html#kssref-sass-tools-mixins-mk_state)

Weight: 2

Styleguide: concepts.utility.creation
*/

/*
States

States in MLUT called the implementation of some features of the CSS using utilities, such as pseudo-classes, selectors combinators etc.
States also include utilities values that work under certain conditions that are not related with CSS.
Available states for utilities are listed in the [settings](section-sass-tools.html#kssref-sass-tools-settings-utils-states).
States are created using the [mk-state](section-sass-tools.html#kssref-sass-tools-mixins-mk_state) mixin. It can create 3 types of states based on the types of values in the states map:
1. pseudo-classes and pseudo-elements. In states map the value is a string - `"h": "hover"`
1. multiple selectors with pseudo-classes. State value is a list - `"h-f": ("hover", "focus")`
1. just the utilities values that work under certain conditions. State value is a null - `"nojs": null`

In the core there are utilities with states whose creation has not yet been implemented:
* `sp` \- utility inside the @supports at-rule. It will only work if the CSS property, value, or @supports supported by the browser.
* `chl` \- utility will work on all children. Means `> *`.

#### Javascript on/off

Using the `js` and `nojs` states, you can add utilities that work depending on the presence of javascript in the browser.
* if you want the utility to work only when javascript is loaded, just add the `js` state to it in the markup.
* if the utility should work only without javascript, create a value for it with the `nojs` state using a mixins.

Note that if the utility has other states, `js` and `nojs` should be indicated first: `js-h_Bgc-mn0`, `nojs-sp_D-f`.

This mechanism is implemented using the [init.js](section-core-scripts.html#kssref-core-scripts-init) script.

Weight: 1

Styleguide: concepts.utility.states
*/

/*
Space unit

Abbreviated '`su`'. Units of measure for any dimensions. Widths, indents, line height, etc. By default, 1su is 4px. All sizes and indents in MLUT are multiple 1su.

You can set value of `su` in [settings](section-sass-tools.html#kssref-sass-tools-settings-general).

Weight: 7

Styleguide: concepts.su
*/

/*
Modular grid

Space on the page divided into a certain number of columns with gutters.

In MLUT on the `xs` and `sm` breakpoint, the grid has 4 columns. On `md` and above - 12. This means that the grid divides the space into 4 equal parts on `sm` and 12 parts on `md` and above. These parts called **columns**. Columns are separated by indents which are called **gutters**.

The gutters have different widths at different breakpoints. From `xs` to `lg` gutter is 12px. From `lg` gutter is 16px.

Using the [grid-debug](section-core-blocks.html#kssref-core-blocks-grid-debug) block you can see the graphic display of the grid.

### Grid units

These are units of measure that you can use for number values of utilities just like any other units in CSS. There are 4 types of grid units:
* **variable columns** \- abbreviated `c`. 1c is 1 column width which changes dynamically depending on the [formula](section-core-blocks.html#kssref-core-blocks-row-row__col). Using [custom utilities](section-core-utils.html#kssref-core-utils-custom), you can get values equal to both `gc` and `gs`.
* **grid-columns** \- `gc`. 1gc is width of 1 column.
* **grid-spans** \- `gs`. 1gs is width of 1 column with 2 gutters.
* **grid-gutters** \- `gg`. 1gg is width of 1 gutter.

In the standard MLUT build, only `c` and `gg` are used. Other units can be used in some [mixins](section-sass-tools.html#kssref-sass-tools-mixins-w).

Modular grid are generated depending on this [settings](section-sass-tools.html#kssref-sass-tools-settings-grid).

Weight: 8

Styleguide: concepts.grid
*/

/*
Core blocks

Set of universal [blocks](section-concepts.html#kssref-concepts-block) for using on any project. Some blocks contain [elements](section-concepts.html#kssref-concepts-element) and [modifiers](section-concepts.html#kssref-concepts-modifier).

Core blocks don't contain, or almost don't contain styles such as colors, backgrounds, etc. Such styles are set on the theme or 'design' layer. To style blocks or their elements, use utilities or modifiers such as `block--mod`.

Weight: 2

Styleguide: core-blocks
*/

/*
Core utilities

Set of utilities that can be used on any project.

Utilities are grouped by sections. The description of each section lists the values of the utilities that relate to it and are included in the MLUT core. Modified utilities, utilities with more values and non-standard values are allocated in subsections. Values of common utilities correspond to [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations([pdf](https://yadi.sk/i/VcKfz5u7DBHrLA)). If written that all values are available in the utility, you can see them in the Emmet cheat sheet from the link above.

In the description of the utilities, there may be a '**Parameters**' item in which the available values are listed. Instead of the utility value, the '`initial`' keyword may be specified. We will get this effect when using the utility with no value. The range of values can be specified as `0..3`.

If the property does not have a special value 'i' then 'i' value means `inherit`.

Some utilities responsive by design or have only responsive values. It will be indicated in the description like this: *Responsive*.

For some utilities, there is a description for non-developers.

In the examples of the work of some utilities for demonstration, other utilities may be used like this: '`Util1.Util2`'. In the markup, instead of a dot, you need to use a space to separate utilities, like this: "`Util1 Util2`"

Weight: 3

Styleguide: core-utils
*/

/*
Core styles

You can find their in `sass/core/`.

Weight: 4

Styleguide: core-styles
*/

/*
Core scripts

Scripts that complement the MLUT core functionality.

Weight: 5

Styleguide: core-scripts
*/

/*
Sass tools

Available when using MLUT as a [toolkit](section-start.html#kssref-start-usage).

Weight: 6

Styleguide: sass-tools
*/

/*
Sass modules

Modules include themes, tools, utility sets, and more. Now there are not many modules included in MLUT, so their documentation will be in this section.

Names of variables, mixins, and sass functions in modules must have prefixes `mabbreviated module name`. For themes, this prefix should look like: `mttheme name`. The names of common CSS classes in modules must comply with [BEM](https://ru.bem.info/) naming rules.

## Themes

Design theme can be used on different sites. They may contain utilities, styles with BEM naming, tools and more. Theme example see [here](section-sass_modules.html#kssref-sass_modules-demo_theme).

Each theme consists of at least 2 parts: *config* and *init*.
- the config contains data on the basis of which the theme is created: variables, maps with utility values, etc.
- in the init file all parts of the theme and, if necessary, other modules are included. After including all required parts, the theme is generated.

Themes can be imported to the MLUT assembly for make a single bundle or builded as separate files. To add a theme to your styles, just import an int file. You can also use only the theme config to make it custom build.

The theme documentation is up to you. At a minimum, you should specify:
- main colors
- dependencies
- gzipped size
- info about unusual parts of the theme, such as mixins, additional styles, etc.

Following these rules you can create your own module. Your module can be added to MLUT. To do this, send a issue, pull-request or contact the maintainer in any other way. Also you can create your own modules collection in a separate repository.

Weight: 7

Styleguide: sass_modules
*/

/*
Examples

Additional examples of core blocks, utilities, tools and ready-made components. If in the markup you meet the `{{modifier_class}}` construct, then substitute the necessary classes from the examples instead of it, or just erase

Weight: 8

Styleguide: examples
*/

/*
Settings

Grid settings, compilation flags, constants and more. All core settings are in the `sass/tools/settings/`.

Styleguide: sass-tools.settings
*/

/*
Columns and gutters

Columns count and gutters value on breakpoints.

Breakpoint | Columns | Gutter
:---:  | :---: | :---:
xs | 4 | 12px
sm | 4 | 12px
md | 12 | 12px
lg | 12 | 16px
xl | 12 | 16px

Styleguide: sass-tools.settings.grid.cols
*/

/*
Functions

Useful functions. All MLUT functions have 'mlu' prefix. You can find all functions in `sass/tools/functions/`.

Styleguide: sass-tools.functions
*/

/*
General

General purpose functions.

Styleguide: sass-tools.functions.general
*/

/*
Math

Functions for calculations.

Styleguide: sass-tools.functions.math
*/

/*
Getters

Functions-getters from settings maps and more.

Styleguide: sass-tools.functions.getters
*/

/*
Mixins

Useful mixins. All MLUT mixins have 'mlu' prefix. You can find all mixins in `sass/tools/mixins/`.

Styleguide: sass-tools.mixins
*/

/*
General

General purpose mixins.

Styleguide: sass-tools.mixins.general
*/

/*
Grid system

Mixins that implement the grid system.

Styleguide: sass-tools.mixins.grid
*/

/*
Blocks

Mixins for creating blocks and working with them.

Styleguide: sass-tools.mixins.blocks
*/

/*
Utilities

Mixins for creating utilities and working with them.

Styleguide: sass-tools.mixins.utils
*/

/*
CSS variables

Global CSS custom properties which used in MLUT. Their names are stored in variables and can be changed in [settings](section-sass-tools.html#kssref-sass-tools-settings-css_vars-names). Names of such variables correspond to the original names of custom properties. Global custom properties names begin with the `mlu` prefix.

The values and meaning of many custom properties correspond to the [SASS settings](section-sass-tools.html#kssref-sass-tools-settings) of MLUT core. But unlike them, custom properties can be changed dynamically without recompiling.

Custom properties are used as a progressive enhancement. By default, fallback is enabled for browsers that do not support them. Generation of custom properties is controlled by [$mlu-flag-css-vars](section-sass-tools.html#kssref-sass-tools-settings-flags).

Remember that custom properties do not work in all browsers. This means that part of the settings, such as dynamically changing the gutters and the number of columns in the grid system, also does not work everywhere.

In some blocks and utilities, custom properties are also used. Look for info about them in the description of the corresponding block or utility.

You can find global CSS variables in `sass/core/variables.scss`.

--mlu-gg = 12px - [grid gutter](section-concepts.html#kssref-concepts-grid) in `px`.
Value sets [here](section-sass-tools.html#kssref-sass-tools-settings-grid-gutters).
Fallback is [$mlu-grid-default-gtr](section-sass-tools.html#kssref-sass-tools-settings-general).
--mlu-gg-rem = 0.75rem - grid gutter in `rem`.
--mlu-grid-cols = 4 - number of columns in the [grid system](section-concepts.html#kssref-concepts-grid). Sets by [$mlu-grid-cols-xs](section-sass-tools.html#kssref-sass-tools-settings-grid) and changes on breakpoints according to the [settings](section-sass-tools.html#kssref-sass-tools-settings-grid-breakpoints).

Styleguide: core-styles.css_vars
*/

:root {
	--mlu-gg: 12px;
	--mlu-gg-rem: 0.75rem;
	--mlu-grid-cols: 4;
}

/*
Normalize

Simple css normalization that correcting old browsers bugs and not affecting other styles.

Styleguide: core-styles.normalize
*/

main {
	display: block;
}

img {
	max-width: 100%;
	height: auto;
	border: 0;
}

legend {
	display: table;
	box-sizing: border-box;
	max-width: 100%;
	white-space: normal;
}

[hidden] {
	display: none !important;
}

/*===CORE-BLOCKS===*/

/*
Btn

Block for creating buttons. It normalizes styles.

Markup: ../../../docs/examples/core-blocks/btn/btn.html

Styleguide: core-blocks.btn
*/

.btn {
	display: inline-block;
	box-sizing: border-box;
	margin: 0;
	font-family: inherit;
	font-size: 1rem;
	line-height: normal;
	text-align: center;
	text-decoration: none;
	vertical-align: top;
	background: none;
	border: 0;
	cursor: pointer;
}

/*
Inp

Block for creating inputs. Normalizes styles.

Markup: ../../../docs/examples/core-blocks/inp/inp.html

Styleguide: core-blocks.inp
*/

.inp {
	display: inline-block;
	box-sizing: border-box;
	margin: 0px;
	font-family: inherit;
	font-size: 1rem;
	border: 0;
}

/*
Row

Block for creating layouts. Suitable for columns, cards and horizontal lists. By default, `inline-block` technology is used for layouts. Using [D utility](section-core-utils.html#kssref-core-utils-bxz-d), you can change the layout technology to flexbox.

if the [$mlu-flag-css-vars](section-sass-tools.html#kssref-sass-tools-settings-flags) = 2, then the styles for correct work of layouts which using inline-blocks will be disabled.

Parts of the layout within a `row` are created using the elements:
* [row__col](#kssref-core-blocks-row-row__col)
* [row__item](#kssref-core-blocks-row-row__item)

`Rows` can be put into each other an unlimited number of times.

`Row` contains CSS counter named `mlu-row-item`.

Markup: ../../../docs/examples/core-blocks/row/row.html

Styleguide: core-blocks.row
*/

/*
row__col

The main element for creating columns in layout. By default, it stretches the entire width of the container. The columns have gutters on the sides and bottom.

The gutters are implemented using the `margin` and [CSS custom properties](section-core-styles.html#kssref-core-styles-css_vars).
If `var()` is not supported by the browser, then fallback are provided:
```scss
margin-right: 16px;
margin-left: 16px;
margin-right: var(--mlu-gg);
margin-left: var(--mlu-gg);
margin-bottom: 2rem;
margin-bottom: calc(var(--mlu-gg-rem) * 2);
```
similar fallback used in the [wrapper](#kssref-core-blocks-wrapper) for fields and everywhere for gutters if [$mlu-flag-css-vars](section-sass-tools.html#kssref-sass-tools-settings-flags) = 1.

The size of gutter fallback you can find in the [settings](section-sass-tools.html#kssref-sass-tools-settings-general) in `$mlu-grid-default-gtr`.

Column width is set using [W utility](section-core-utils.html#kssref-core-utils-bxz-w). See example [above](#kssref-core-blocks-row). The formulas for calculating the width and offset for the column are stored in the custom properties. In `--gc-rule` for W and `--mgc-rule` for [Ml utility](section-core-utils.html#kssref-core-utils-margin-ml). These formulas:
```scss
--gc-rule: calc((var(--gc) - 0.0001) / var(--mlu-grid-cols) * 100% - var(--gc-diff) * 2);
--mgc-rule: calc((var(--mgc) - 0.0001) / var(--mlu-grid-cols) * 100% + var(--gc-diff));
```
`--gc` or `--mgc` is the value of the width or offset in the grid columns. This is a custom property of the utility.<br>
`(var(--gc) - 0.0001)` - fix for calc() [bug](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15637241/) in Edge 16-18.<br>
`--mlu-grid-cols` - the number of columns in the grid system. This is a [global](section-core-styles.html#kssref-core-styles-css_vars) custom property that can be changed on any DOM node.<br>
`--gc-diff` - variable is equal to the gutter if the gutter at the columns is created using margin. In `row__col` is equal 1gg.<br>
Some of these variables can be changed using [custom utilities](section-core-utils.html#kssref-core-utils-custom).

You can create nested layouts with a mix of `row` and `row__col` on the same DOM node. If you don't need double fields in the nested row, use the mix with the `row__item`. See example below.

All examples of the work of nested layouts are [here](section-examples.html#kssref-examples-nested_layouts).

Markup: ../../../docs/examples/core-blocks/row/row__col.html

Styleguide: core-blocks.row.row__col
*/

/*
row__item

Element for creating parts of the layout. By default, it stretches across the width of the content.

The sizes and offsets are set with help of utilities.

Like a `row__col`, an element contains formulas for calculating width and offset. But `gc-diff` here is equal 0px.

Markup: ../../../docs/examples/core-blocks/row/row__item.html

Styleguide: core-blocks.row.row__item
*/

/*
Set of ready layouts

To use the layout, click on 'Markup:', copy HTML from the example and paste it onto the page. 'Col' in the name of the layout means column.

The stylization of the columns is made for demo. It only works in this documentation.

Styleguide: examples.layouts
*/

/*
3 equal cols

Markup: ../../../docs/examples/layouts/3ec.html

Styleguide: examples.layouts.3ec
*/

/*
1 big col and 1 small

This example shows the variants for working the outermost fields in the layout. In all other layouts, you can work with fields similarly.

Markup: ../../../docs/examples/layouts/1bc1sc.html

Styleguide: examples.layouts.1bc1sc
*/

/*
4 equal cols

Markup: ../../../docs/examples/layouts/4ec.html

Styleguide: examples.layouts.4ec
*/

/*
2 equal cols. 4 equal cols inside the second

Markup: ../../../docs/examples/layouts/2ec4ecin2-nd.html

Styleguide: examples.layouts.2ec4ecin2_nd
*/

/*
2 equal cols. 2 full width cols inside the second

Markup: ../../../docs/examples/layouts/2ec2fwcin2-nd.html

Styleguide: examples.layouts.2ec2fwcin2_nd
*/

/*
3 equal cols. 3 full width cols in each.

Markup: ../../../docs/examples/layouts/3fwcin3ec.html

Styleguide: examples.layouts.3fwcin3ec
*/

/*
3 full width cols. 2 equal cols inside the second

Markup: ../../../docs/examples/layouts/3fwc2ecin2-nd.html

Styleguide: examples.layouts.3fwc2ecin2_nd
*/

/*
2 equal cols. 4 full width cols inside the second col

Markup: ../../../docs/examples/layouts/2ec4fwcin2-nd.html

Styleguide: examples.layouts.2ec4fwcin2_nd
*/

/*
3 centered cards with fixed width

Markup: ../../../docs/examples/layouts/3fc.html

Styleguide: examples.layouts.3fc
*/

/*
Nested layouts

All variants of nested layouts. A column with a nested layout has a gray background to demonstrate the different behavior of the gutters.

Styleguide: examples.nested_layouts
*/

/*
Layout in col

Markup: ../../../docs/examples/nested-row/row-in-col.html

Styleguide: examples.nested_layouts.row_in_col
*/

/*
Layout nested in col

By default layout nested in col with gutters and margin bottom.

Mx-1gg - layout with negative gutters nested in col.
Mb-2gg - layout with negative margin bottom nested in col with gutters.
Mb-2gg.Mx-1gg - layout with negative gutters and margin bottom nested in col.

Markup: ../../../docs/examples/nested-row/row-nested-col.hbs

Styleguide: examples.nested_layouts.row_nested_col
*/

/*
Case of nesting #7

Layout with negative gutters nested in col without margin bottom.

Markup: ../../../docs/examples/nested-row/row-nested-col7.html

Styleguide: examples.nested_layouts.row_nested_col.case7
*/

.row {
	position: relative;
	display: block;
	margin: 0px;
	padding: 0px;
	font-size: 0px;
	list-style: none;
	counter-reset: mlu-row-item;
}

.row__col,
.row__item {
	--gc-diff: 0px;
	--gc-rule: calc((var(--gc) - 0.0001) / var(--mlu-grid-cols) * 100% - var(--gc-diff) * 2);
	--mgc-rule: calc((var(--mgc) - 0.0001) / var(--mlu-grid-cols) * 100% + var(--gc-diff));
	position: relative;
	display: inline-block;
	max-width: 100%;
	box-sizing: border-box;
	vertical-align: top;
	font-size: 16px;
	font-size: 1rem;
}

.row__col.row,
.row__item.row {
	font-size: 0px;
}

.row__col > :first-child:not([class]),
.row__item > :first-child:not([class]) {
	margin-top: 0px;
}

.row__col > :last-child:not([class]),
.row__item > :last-child:not([class]) {
	margin-bottom: 0px;
}

.row__col {
	--gc-diff: var(--mlu-gg);
	width: calc(100% - 32px);
	width: calc(100% - var(--mlu-gg) * 2);
	margin-right: 16px;
	margin-left: 16px;
	margin-right: 16px;
	margin-left: 16px;
	margin-right: var(--mlu-gg);
	margin-left: var(--mlu-gg);
	margin-bottom: 2rem;
	margin-bottom: 2rem;
	margin-bottom: calc(var(--mlu-gg-rem) * 2);
}

.row__col.row {
	margin-bottom: 0px;
}

/*
Wrapper

The block-container for the main content of the page. The maximum width is set in the [settings](section-sass-tools.html#kssref-sass-tools-settings-blocks). The default is `1200px`.

The container has sides `padding` that equal to gutters so that the content does not stick to sides on small screens. On wide screens the container is centered.

Like in [row__col](#kssref-core-blocks-row-row__col), in wrapper is used `var()` fallback for fields:
```scss
padding-right: 16px;
padding-left: 16px;
padding-right: var(--mlu-gg);
padding-left: var(--mlu-gg);
```

Markup: ../../../docs/examples/core-blocks/wrapper/wrapper.html

Styleguide: core-blocks.wrapper
*/

.wrapper {
	display: block;
	max-width: 1200px;
	margin: 0 auto;
	padding-right: 16px;
	padding-left: 16px;
	padding-right: 16px;
	padding-left: 16px;
	padding-right: var(--mlu-gg);
	padding-left: var(--mlu-gg);
}

/*
Ratio-block

Block for creating containers, with proportional width and height. Implemented using a pseudo-element with a `padding-bottom` in %.

The default aspect ratio is 16:9.

.ratio-block--4x3 - 4:3 aspect ratio.
.ratio-block--1x1 - 1:1 aspect ratio.

Markup: ../../../docs/examples/core-blocks/ratio-block/ratio-block.hbs

Styleguide: core-blocks.ratio-block
*/

/*
ratio-block__content

An element for inserting content that will be resize proportionally. See example [above](#kssref-core-blocks-ratio-block)

Styleguide: core-blocks.ratio-block.ratio-block__content
*/

/*
Responsive iframe

Responsive `iframe` with [ratio-block](section-core-blocks.html#kssref-core-blocks-ratio-block). Width is set for example. Use modifiers to change the aspect ratio.

Markup: ../../../docs/examples/core-blocks/ratio-block/iframe.html

Styleguide: examples.other.responsive_iframe
*/

.ratio-block {
	position: relative;
}

.ratio-block:before {
	display: block;
	width: 100%;
	padding-bottom: 56.25%;
	content: "";
}

.ratio-block--1x1:before {
	padding-bottom: 100%;
}

.ratio-block--4x3:before {
	padding-bottom: 75%;
}

.ratio-block__content {
	position: absolute;
	top: 0px;
	left: 0px;
	width: 100%;
	height: 100%;
}

/*
Styling helpers

Useful tools set for designing mockup.

Weight: 0

Styleguide: sass_modules.styl_help
*/

/*===DESIGN-STYLES===*/

/*===CORE-UTILS===*/

/*
Custom

Utilities that manage [CSS custom properties](section-core-styles.html#kssref-core-styles-css_vars) which used in MLUT.

Styleguide: core-utils.custom
*/

/*
-Gg

Controls gutters: `--mlu--gg` and `--mlu-gg-rem`.

* `-Gg1su..-Gg5su` \- *Responsive*.

-Gg1su - gutter is 8px
-Gg5su_xl - gutter is 20px on `xl`

Markup: ../../../docs/examples/core-utils/custom/gg.hbs

Styleguide: core-utils.custom.gg
*/

/*
-Gcc

Grid columns count. Sets number of columns in grid system on DOM node. Controls `--mlu-grid-cols`.

* `-Gcc` \- columns number is equal [$mlu-grid-default-cols](section-sass-tools.html#kssref-sass-tools-settings-grid). *Responsive* only.

-Gcc-sm - keyword that means number of columns on `sm` breakpoint. There is on all breakpoints except `sm`.<br> Available selector modifier `chl`. See [example](section-examples.html#kssref-examples-layouts-2ec4ecin2_nd).
-Gcc10_md - only *Responsive*. Available `chl` state.

Markup: ../../../docs/examples/core-utils/custom/gcc.hbs

Styleguide: core-utils.custom.gcc
*/

/*
-Gcd

Grid columns diff. Controls `--gc-diff` from grid column width [formula](section-core-blocks.html#kssref-core-blocks-row-row__col).

* `-Gcd1gg` \- 1 gutter

-Gcd0 - 0px

Markup: ../../../docs/examples/core-utils/custom/gcd.hbs

Styleguide: core-utils.custom.gcd
*/

/*
-Gcr

Grid columns rule. Controls `--gc-rule` and `--mgc-rule` .

-Gcr - sets the standard formula from [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) for calculating the column widths for utilities W and M. <br>The difference of the formula is that `--gc-diff` has fallback value `--mlu-gg`.

Markup: ../../../docs/examples/core-utils/custom/gcr.hbs

Styleguide: core-utils.custom.gcr
*/

.-Gg1su {
	--mlu-gg: 4px;
	--mlu-gg-rem: 0.25rem;
}

.-Gg2su {
	--mlu-gg: 8px;
	--mlu-gg-rem: 0.5rem;
}

.-Gg3su {
	--mlu-gg: 12px;
	--mlu-gg-rem: 0.75rem;
}

.-Gg4su {
	--mlu-gg: 16px;
	--mlu-gg-rem: 1rem;
}

.-Gg5su {
	--mlu-gg: 20px;
	--mlu-gg-rem: 1.25rem;
}

.chl_-Gcc-sm > * {
	--mlu-grid-cols: 4;
}

.chl_-Gcc10 > * {
	--mlu-grid-cols: 10;
}

.-Gcc-sm {
	--mlu-grid-cols: 4;
}

.-Gcd0 {
	--gc-diff: 0px;
}

.-Gcd1gg {
	--gc-diff: var(--mlu-gg);
}

.-Gcr {
	--gc-rule: calc((var(--gc) - 0.0001) / var(--mlu-grid-cols) * 100% - var(--gc-diff, var(--mlu-gg)) * 2);
	--mgc-rule: calc((var(--mgc) - 0.0001) / var(--mlu-grid-cols) * 100% + var(--gc-diff, var(--mlu-gg)));
}

/*
Position

* `Pos`
* `Pos-s`
* `Pos-a` - *responsive*
* `Pos-f`
* `T0`, `R0`, `B0`, `L0`
* `T100p`, `R100p`, `B100p`, `L100p`
* `mX0` - set R0 and L0
* `mY0` - set T0 and B0

Styleguide: core-utils.pos
*/

/*
Z

`z-index`.

0..3 - `z-index` available range. You can change it in utilities [settings](section-sass-tools.html#kssref-sass-tools-settings-utils).
-1 - move DOM node under parent node.
max = 9999 - max value.

Styleguide: core-utils.pos.z
*/

/*
mXy

X and Y coordinate axes. Change `top` or `bottom` and `right` or `left`.

0 - set T0, R0, B0 and L0.
50p - centered DOM node with `Pos-a` or `Pos-f` using `T50p`, `L50p` and `transform`.

Styleguide: core-utils.pos.xy
*/

.Pos {
	position: relative;
}

.Pos-s {
	position: static;
}

.Pos-a {
	position: absolute;
}

.Pos-f {
	position: fixed;
}

.T0 {
	top: 0;
}

.R0 {
	right: 0;
}

.B0 {
	bottom: 0;
}

.L0 {
	left: 0;
}

.mX0 {
	right: 0;
	left: 0;
}

.mY0 {
	top: 0;
	bottom: 0;
}

.mXy0 {
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

.T100p {
	top: 100%;
}

.R100p {
	right: 100%;
}

.B100p {
	bottom: 100%;
}

.L100p {
	left: 100%;
}

.mXy50p {
	top: 50%;
	left: 50%;
	-webkit-transform: translate(-50%, -50%);
	-ms-transform: translate(-50%, -50%);
	transform: translate(-50%, -50%);
}

.Z-max {
	z-index: 9999;
}

.Z-1 {
	z-index: -1;
}

.Z0 {
	z-index: 0;
}

.Z1 {
	z-index: 1;
}

.Z2 {
	z-index: 2;
}

.Z3 {
	z-index: 3;
}

/*
D

Display. Sets the display type.

* `D-tb`
* `D-tbc`
* `D-tbr`
* `D-itb`
* `D-g` \- grid. *Responsive*.
* `sp_D-f` \- useful if the flexbox layout in IE11 has many bugs.

D - block. The DOM node stretches on the full width of the container and creates line breaks before and after. *Responsive*.
D-ib - inline-block. The width of the DOM node depends on the width of the content. Inline-blocks line up in one line like a letters and wrap if they don’t fit. *Responsive*.
D-f - flex. Turns an DOM node into a flex container. Can be used to progressive enhancement the [row](section-core-blocks.html#kssref-core-blocks-row) layouts. Child DOM nodes will be stretched to the full height of the container. By default, child DOM nodes are not wrap to the new line and are compressed in width until they go beyond the line. *Responsive*.
D-if - inline-flex. Combines inline-block and flex container. *Responsive*.
D-n - none. Hides the DOM node as if it is not on the page. *Responsive*.

Markup: ../../../docs/examples/core-utils/visual-formatting/d.hbs

Styleguide: core-utils.bxz.d
*/

/*
mD

Modified display.

mD-f - `D-f` with line breaks.
mD-if - `D-if` with `Fxw-w`.

Styleguide: core-utils.bxz.md
*/

.D {
	display: block;
}

.D-ib {
	display: inline-block;
}

.D-tb {
	display: table;
}

.D-tbc {
	display: table-cell;
}

.D-tbr {
	display: table-row;
}

.D-itb {
	display: inline-table;
}

.D-f {
	display: flex;
}

.D-if {
	display: inline-flex;
}

.D-g {
	display: grid;
}

.D-n {
	display: none;
}

.mD-f {
	display: flex;
	flex-wrap: wrap;
}

.mD-if {
	display: inline-flex;
	flex-wrap: wrap;
}

@supports (display: flex) {
	.sp_D-f {
		display: flex;
	}
}

/*
Flex

A group of utilities for managing flex-containers and flex-elements.

Most of modified flex utilities **turned off** and available with flag [$mlu-flag-flex-pe](section-sass-tools.html#kssref-sass-tools-settings-flags). They are needed to manage [row-layouts](section-core-blocks.html#kssref-core-blocks-row) and their elements.

* `Fxg1` \- flex-element occupies the remaining free space in the line.
* `Fxsh0`
* `Fx-i`
* `Ord-1..Ord2` \- sequence number for flex-element

Styleguide: core-utils.flex
*/

/*
Fxd

Flex direction.

* `Fxd-r` \- row. Only *Responsive*

Fxd-rr - row-reverse. *Responsive*
Fxd-c - column
Fxd-cr - column-reverse

Markup: ../../../docs/examples/core-utils/flex/fxd.hbs

Styleguide: core-utils.flex.fxd
*/

/*
Fxw

Flex wrap.

wr - wrap-reverse
w - wrap. *Responsive*.
n - nowrap. only *Responsive*.

Styleguide: core-utils.flex.fxw
*/

/*
Jc

Justify content. All values are *Responsive*. `fs` only *Responsive*.

Jc-sa - space-around
Jc-sb - space-between
Jc-fe_xl - flex-end on `xl` breakpoint

Markup: ../../../docs/examples/core-utils/flex/jc.hbs

Styleguide: core-utils.flex.jc
*/

/*
As

Align self. Available all values.

Markup: ../../../docs/examples/core-utils/flex/as.html

Styleguide: core-utils.flex.as
*/

/*
Ai

Align items. All values are *Responsive*. `s` only *Responsive*.

Ai-fs - top
Ai-c - center
Ai-fe - bottom
Ai-b - text baseline

Markup: ../../../docs/examples/core-utils/flex/ai.hbs

Styleguide: core-utils.flex.ai
*/

/*
Ac

Align content.

Ac-fs - top
Ac-c - center
Ac-fe - bottom
Ac-sa - space-around
Ac-sb - space-between

Markup: ../../../docs/examples/core-utils/flex/ac.hbs

Styleguide: core-utils.flex.ac
*/

/*
mAs

Modified align self. Set `vertical-align` for common DOM nodes and `align-self` for flex-element.

Can be used to vertically align an element in row-layouts. Partially works without flex-container. Has the same values as `As`.

Styleguide: core-utils.flex.mas
*/

/*
mJc

Modified justify content. Combines [Ta](#kssref-core-utils-text-ta) and [Jc](#kssref-core-utils-flex-jc) utilities. Can be used to horizontal alignment with progressive enhancement for row-layouts.

All values are available and correspond to `Jc` if [flex-pe](section-sass-tools.html#kssref-sass-tools-settings-flags) flag turned on. By default available one value.

mJc-c - center.

Styleguide: core-utils.flex.mjc
*/

/*
mAi

Modified align items. Set `vertical-align` for child DOM nodes and `align-items` for flex-container.

Can be used to vertically align an elements in row-layouts. Partially works without flex-container. Has the same values as `Ai`.

Styleguide: core-utils.flex.mai
*/

.Fxd-rr {
	flex-direction: row-reverse;
}

.Fxd-c {
	flex-direction: column;
}

.Fxd-cr {
	flex-direction: column-reverse;
}

.Fxg1 {
	flex-grow: 1;
}

.Fxsh0 {
	flex-shrink: 0;
}

.Fx-i {
	flex: inherit;
}

.Fxw-wr {
	flex-wrap: wrap-reverse;
}

.Fxw-w {
	flex-wrap: wrap;
}

.Ac-fs {
	align-content: flex-start;
}

.Ac-fe {
	align-content: flex-end;
}

.Ac-c {
	align-content: center;
}

.Ac-sa {
	align-content: space-around;
}

.Ac-sb {
	align-content: space-between;
}

.As-s {
	align-self: stretch;
}

.As-fs {
	align-self: flex-start;
}

.As-fe {
	align-self: flex-end;
}

.As-c {
	align-self: center;
}

.As-b {
	align-self: baseline;
}

.Jc-fe {
	justify-content: flex-end;
}

.Jc-c {
	justify-content: center;
}

.Jc-sa {
	justify-content: space-around;
}

.Jc-sb {
	justify-content: space-between;
}

.mJc-c {
	justify-content: center;
	text-align: center;
}

.Ai-fs {
	align-items: flex-start;
}

.Ai-fe {
	align-items: flex-end;
}

.Ai-b {
	align-items: baseline;
}

.Ai-c {
	align-items: center;
}

.Ord-1 {
	order: -1;
}

.Ord0 {
	order: 0;
}

.Ord1 {
	order: 1;
}

.Ord2 {
	order: 2;
}

/*
W

Width. You can set width in the variable columns(`c`).

If you specify the width in grid units on one breakpoint, then the width is preserved on all subsequent breakpoints.

* `W-a` \- default DOM node width. Depends on DOM node [display type](#kssref-core-utils-bxz-d). *Responsive*.
* `W-i` \- inherit value from parent DOM node. *Responsive*.
* `W100p` \- for browsers which not support custom properties.
* `W1c..W4c` \- range of available width in variable columns on `xs` and `sm` breakpoints, because on `xs` and `sm`, grid has 4 columns. See grid options in [settings](section-sass-tools.html#kssref-sass-tools-settings-grid).
* `W1c..W12c` \- available width in `c` on all breakpoints, starting with `md`.

Markup: ../../../docs/examples/core-utils/box-sizing/w.html

Styleguide: core-utils.bxz.w
*/

.W1c {
	--gc: 1;
	width: calc(25% - 32px);
	width: var(--gc-rule, 25%);
}

.W2c {
	--gc: 2;
	width: calc(50% - 32px);
	width: var(--gc-rule, 50%);
}

.W3c {
	--gc: 3;
	width: calc(75% - 32px);
	width: var(--gc-rule, 75%);
}

.W4c {
	--gc: 4;
	width: calc(100% - 32px);
	width: var(--gc-rule, 100%);
}

.W100p {
	width: 100%;
}

.W-a {
	width: auto;
}

.W-i {
	width: inherit;
}

/*
Box sizing

Utilities for DOM nodes size management.

* `H100p`
* `H0`
* `Mih100vh`
* `Mih100p`
* `Bxz`
* `Fl` \- turn on wrapping text on the right.
* `Fl-r` \- turn on wrapping text on the left.

Styleguide: core-utils.bxz
*/

/*
Maw

Max-width.

fx0 - fixed width for cards. You can change it in utilities [settings](section-sass-tools.html#kssref-sass-tools-settings-utils).
100p - 100%
n - none

Styleguide: core-utils.bxz.maw
*/

/*
mCl

Modified clear. It is clearfix utility. Use it with a container whose child DOM nodes have `Fl`.

Markup: ../../../docs/examples/core-utils/visual-formatting/mcl.html

Styleguide: core-utils.bxz.mcl
*/

/*
Ov

Controls content display in case of overflow

Ov - hidden.
Ov-a - auto. Adds a scrollbar if the content does not fit into the container.
Ov.Ovx-a - auto. Scrollbar on X axis.
Ov.Ovy-a - auto. Scrollbar on Y axis.

Markup: ../../../docs/examples/core-utils/visual-formatting/ov.hbs

Styleguide: core-utils.bxz.ov
*/

.Maw-fx0 {
	max-width: 288px;
}

.Maw100p {
	max-width: 100%;
}

.Maw-n {
	max-width: none;
}

.H100p {
	height: 100%;
}

.H0 {
	height: 0;
}

.Mih100p {
	min-height: 100%;
}

.Mih100vh {
	min-height: 100vh;
}

.Bxz {
	box-sizing: border-box;
}

.Fl {
	float: left;
}

.Fl-r {
	float: right;
}

.mCl:after {
	display: table;
	clear: both;
	content: "";
}

.Ov {
	overflow: hidden;
}

.Ov-a {
	overflow: auto;
}

.Ovx-a {
	overflow-x: auto;
}

.Ovy-a {
	overflow-y: auto;
}

/*
Margin

You can set some margins in the grid-gutters(gg). For example margin top - `Mt` and margin bottom - `Mb`. By default, margins in `gg` contain `var()` fallback as [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col)

Vertical margins in grid-gutters are converted to `rems`. This affects accessibility, because margins will be scaled when changing font sizes in the browser settings.

* `M0` \- clear all margins.
* `M-a`
* `M-i` \- inherit all margins
* `Mr0`
* `Mt0`
* `Mt1gg..Mt4gg`

Styleguide: core-utils.margin
*/

/*
Ml

Margin left. You can set left margin in the [grid units](section-concepts.html#kssref-concepts-grid)(gg, c) or [space units](section-concepts.html#kssref-concepts-su)(su). So you can set the offset for layout elements.

* `Ml-a` \- *Responsive*.
* `Ml0` \- *Responsive*.
* `Ml-2gg..Ml2gg` \- the range includes 2 negative margins and 2 positive.
* `Ml1gg` \- it is needed to return the default column gutter. *Responsive*.
* `Ml1c..Ml10c` \- available margin in `c` on all breakpoints, starting with `md`.

Markup: ../../../docs/examples/core-utils/margin/ml.html

Styleguide: core-utils.margin.ml
*/

/*
Mb

Margin bottom. You can set bottom margin in the grid-gutters(gg) or [space units](section-concepts.html#kssref-concepts-su)(su).

* `Mb0` \- *Responsive*
* `Mb1gg..Mb4gg`
* `Mb2gg` \- *Responsive*
* `Mb1su..Mb6su`
* `Mb-2gg`

Styleguide: core-utils.margin.mb
*/

/*
Mx

Margin on X axis. Sets left and right margin.

* `Mx-a` \- centered the DOM node with a given width and `block` [display type](#kssref-core-utils-bxz-d). *Responsive*.
* `Mx1gg` \- *Responsive*.
* `Mx-1gg` \- it needed for imposes left and right padding of the outermost columns on the fields of the [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper). This behavior is necessary so that there are no double fields in the layout, using [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) or `Mx1gg`.
* `Mx0` \- only *responsive*.

Markup: ../../../docs/examples/core-utils/margin/mx.html

Styleguide: core-utils.margin.mx
*/

.M0 {
	margin: 0;
}

.M-a {
	margin: auto;
}

.M-i {
	margin: inherit;
}

.Mt0 {
	margin-top: 0;
}

.Mr0 {
	margin-right: 0;
}

.Mb0 {
	margin-bottom: 0;
}

.Ml0 {
	margin-left: 0;
}

.Ml-a {
	margin-left: auto;
}

.Mx-a {
	margin-right: auto;
	margin-left: auto;
}

.Mt4gg {
	margin-top: 4rem;
	margin-top: 4rem;
	margin-top: calc(var(--mlu-gg-rem) * 4);
}

.Mb4gg {
	margin-bottom: 4rem;
	margin-bottom: 4rem;
	margin-bottom: calc(var(--mlu-gg-rem) * 4);
}

.Mt3gg {
	margin-top: 3rem;
	margin-top: 3rem;
	margin-top: calc(var(--mlu-gg-rem) * 3);
}

.Mb3gg {
	margin-bottom: 3rem;
	margin-bottom: 3rem;
	margin-bottom: calc(var(--mlu-gg-rem) * 3);
}

.Mt2gg {
	margin-top: 2rem;
	margin-top: 2rem;
	margin-top: calc(var(--mlu-gg-rem) * 2);
}

.Mb2gg {
	margin-bottom: 2rem;
	margin-bottom: 2rem;
	margin-bottom: calc(var(--mlu-gg-rem) * 2);
}

.Mt1gg {
	margin-top: 1rem;
	margin-top: 1rem;
	margin-top: var(--mlu-gg-rem);
}

.Mb1gg {
	margin-bottom: 1rem;
	margin-bottom: 1rem;
	margin-bottom: var(--mlu-gg-rem);
}

.Mb-2gg {
	margin-bottom: -2rem;
	margin-bottom: -2rem;
	margin-bottom: calc(var(--mlu-gg-rem) * -2);
}

.Mb1su {
	margin-bottom: 0.25rem;
}

.Mb2su {
	margin-bottom: 0.5rem;
}

.Mb3su {
	margin-bottom: 0.75rem;
}

.Mb4su {
	margin-bottom: 1rem;
}

.Mb5su {
	margin-bottom: 1.25rem;
}

.Mb6su {
	margin-bottom: 1.5rem;
}

.Mx-1gg {
	margin-right: -16px;
	margin-right: -16px;
	margin-right: calc(var(--mlu-gg) * -1);
	margin-left: -16px;
	margin-left: -16px;
	margin-left: calc(var(--mlu-gg) * -1);
}

.Mx1gg {
	margin-right: 16px;
	margin-right: 16px;
	margin-right: var(--mlu-gg);
	margin-left: 16px;
	margin-left: 16px;
	margin-left: var(--mlu-gg);
}

.Ml-2gg {
	margin-left: -32px;
	margin-left: -32px;
	margin-left: calc(var(--mlu-gg) * -2);
}

.Ml-1gg {
	margin-left: -16px;
	margin-left: -16px;
	margin-left: calc(var(--mlu-gg) * -1);
}

.Ml1gg {
	margin-left: 16px;
	margin-left: 16px;
	margin-left: var(--mlu-gg);
}

.Ml2gg {
	margin-left: 32px;
	margin-left: 32px;
	margin-left: calc(var(--mlu-gg) * 2);
}

/*
Padding

* `P0` \- clear all paddings.
* `P1su..P4su` \- creates padding all around.
* `P1gg`
* `Pt1gg..Pt2gg` \- works similarly [Mt1gg](#kssref-core-utils-margin)
* `Pb1gg..Pb2gg`

Styleguide: core-utils.padding
*/

/*
Px

Padding on X axis. Sets left and right padding.

* `Px1gg`

Styleguide: core-utils.padding.px
*/

.P0 {
	padding: 0;
}

.P1su {
	padding: 0.25rem 4px;
}

.P2su {
	padding: 0.5rem 8px;
}

.P3su {
	padding: 0.75rem 12px;
}

.P4su {
	padding: 1rem 16px;
}

.P1gg {
	padding: 1rem 16px;
	padding: var(--mlu-gg-rem) var(--mlu-gg);
}

.Pt1gg {
	padding-top: 1rem;
	padding-top: 1rem;
	padding-top: var(--mlu-gg-rem);
}

.Pt2gg {
	padding-top: 2rem;
	padding-top: 2rem;
	padding-top: calc(var(--mlu-gg-rem) * 2);
}

.Pb1gg {
	padding-bottom: 1rem;
	padding-bottom: 1rem;
	padding-bottom: var(--mlu-gg-rem);
}

.Pb2gg {
	padding-bottom: 2rem;
	padding-bottom: 2rem;
	padding-bottom: calc(var(--mlu-gg-rem) * 2);
}

.Pl1gg {
	padding-left: 16px;
	padding-left: 16px;
	padding-left: var(--mlu-gg);
}

.Px1gg {
	padding-right: 16px;
	padding-right: 16px;
	padding-right: var(--mlu-gg);
	padding-left: 16px;
	padding-left: 16px;
	padding-left: var(--mlu-gg);
}

/*
Text

Group of utilities that manage the display of text.

* `C-i`
* `Whs-nw`
* `Whs-p`
* `Lh-n` \- line-height normal.
* `Lh1`

Styleguide: core-utils.text
*/

/*
Ta

Text alignment.

initial - left *Responsive*.
c - center *Responsive*.
r - right *Responsive*.

Styleguide: core-utils.text.ta
*/

/*
Tt

Text transform.

initial - UPPERCASE.
l - lowercase.
n - remove text transform.
c - Each Word Begins With A Capital Letter.

Styleguide: core-utils.text.tt
*/

/*
Td

Text decoration.

initial - remove text decoration.
u - <u>underline</u>.
l - ~~strikethrough~~.
o - overline.

Styleguide: core-utils.text.td
*/

/*
Dir

Direction. Unility available if [$mlu-flag-flex-pe](section-sass-tools.html#kssref-sass-tools-settings-flags) turned on. Sets direction of text and order items in row-layout.

l - left to right *Responsive* only.
r - right to left *Responsive*.

Styleguide: core-utils.text.dir
*/

/*
mTov

Modified text overflow. Removes line breaks in the text and displays ellipsis at the end of the line if the text does not fit in the container. DOM node with `mTov` should have a width limit.

Markup: ../../../docs/examples/core-utils/text/mtov.html

Styleguide: core-utils.text.mtov
*/

.Ta {
	text-align: left;
}

.Ta-c {
	text-align: center;
}

.Ta-r {
	text-align: right;
}

.Td {
	text-decoration: none;
}

.Td-u {
	text-decoration: underline;
}

.Td-l {
	text-decoration: line-through;
}

.Td-o {
	text-decoration: overline;
}

.Tt {
	text-transform: uppercase;
}

.Tt-n {
	text-transform: none;
}

.Tt-l {
	text-transform: lowercase;
}

.Tt-c {
	text-transform: capitalize;
}

.mTov {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

.C-i {
	color: inherit;
}

.Lh-n {
	line-height: normal;
}

.Lh1 {
	line-height: 1;
}

.Whs-nw {
	white-space: nowrap;
}

.Whs-p {
	white-space: pre;
}

/*
Font

* `F-i`
* `Ff-ss0` \- sans serif system fonts stack. Sets [here](section-sass-tools.html#kssref-sass-tools-settings-utils).
* `Fw400` \- normal font weight.
* `Fw700` \- **bold**.
* `Fs` \- *italic*.
* `Fs-n` \- normal font style.
* `Fz-i`

Styleguide: core-utils.f
*/

/*
mFz

Modified font size.

0 - Accessibly hides the text inside the DOM node.

Styleguide: core-utils.f.mfz
*/

.F-i {
	font: inherit;
}

.Ff-ss0 {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Cantarell, Ubuntu, "Fira Sans", "Droid Sans", "Helvetica Neue", Arial, sans-serif;
}

.Fw400 {
	font-weight: 400;
}

.Fw700 {
	font-weight: 700;
}

.Fs {
	font-style: italic;
}

.Fs-n {
	font-style: normal;
}

.Fz-i {
	font-size: inherit;
}

.mFz0 {
	overflow: hidden;
	text-indent: 120%;
	white-space: nowrap;
	font-size: 0px;
}

/*
Border

By default, the text color of the DOM node is used for the border.

* `Bd` \- <span class="Bd">add border with 1px width all around.</span>
* `Bdt` \- add border with 1px width on top.
* `Bdr` \- border right.
* `Bdb` \- border bottom.
* `Bdl` \- border left.
* `Bdx` \- left and rigth.
* `Bdy` \- top and bottom.
* `Bdcl-c` \- remove the separation between table cells.
* `Bdrs50p` \- makes the shape visually round.

Styleguide: core-utils.bd
*/

/*
Bdw

Border width.

0 - remove border
2 - <div class="Bd Bdw2 P2su Mb1gg">2px</div>
1su - <div class="Bd Bdw1su P2su">1 space unit</div>

Styleguide: core-utils.bd.bdw
*/

/*
Bds

Border style. Changes the style of the border on **all** sides at once.

dt - <div class="Bd Bdw1su Bds-dt P2su Mb1gg">dotted</div>
ds - <div class="Bd Bdw1su Bds-ds P2su">dashed</div>

Styleguide: core-utils.bd.bds
*/

.Bd {
	border: 1px solid;
}

.Bdt {
	border-top: 1px solid;
}

.Bdr {
	border-right: 1px solid;
}

.Bdb {
	border-bottom: 1px solid;
}

.Bdl {
	border-left: 1px solid;
}

.Bdy {
	border-top: 1px solid;
	border-bottom: 1px solid;
}

.Bdx {
	border-right: 1px solid;
	border-left: 1px solid;
}

.Bds-dt {
	border-style: dotted;
}

.Bds-ds {
	border-style: dashed;
}

.Bdw0 {
	border-width: 0;
}

.Bdw2 {
	border-width: 2px;
}

.Bdw1su {
	border-width: 4px;
}

.Bdcl-c {
	border-collapse: collapse;
}

.Bdrs50p {
	border-radius: 50%;
}

/*
Background

Group of utilities for managing the background image of DOM node.

* `Bga-f`
* `Bga-l`

Styleguide: core-utils.bg
*/

/*
Bgp

Position of background.

t - top
r - right
b - bottom
c - center
rt - right top
rb - right bottom
lb - left bottom

Styleguide: core-utils.bg.bgp
*/

/*
Bgr

Repeat of background.

n - no repeat
x - repeat on X axis
y - repeat on Y

Styleguide: core-utils.bg.bgr
*/

/*
Bgsz

Background size.

cv - cover. Stretches the background image so that it covers the entire space of the container.
ct - contain. Stretches the background image to the maximum possible size so it does not go beyond the background of the container. The image does not change the proportions.

Styleguide: core-utils.bg.bgsz
*/

.Bgr-n {
	background-repeat: no-repeat;
}

.Bgr-x {
	background-repeat: repeat-x;
}

.Bgr-y {
	background-repeat: repeat-y;
}

.Bgp-c {
	background-position: center;
}

.Bgp-t {
	background-position: top;
}

.Bgp-r {
	background-position: right;
}

.Bgp-b {
	background-position: bottom;
}

.Bgp-rt {
	background-position: right top;
}

.Bgp-rb {
	background-position: right bottom;
}

.Bgp-lb {
	background-position: left bottom;
}

.Bgsz-cv {
	background-size: cover;
}

.Bgsz-ct {
	background-size: contain;
}

.Bga-f {
	background-attachment: fixed;
}

.Bga-l {
	background-attachment: local;
}

/*
Animation

* `Trs-all` \- transition duration sets [here](section-sass-tools.html#kssref-sass-tools-settings-utils).

Styleguide: core-utils.anim
*/

.Trs-all {
	/* autoprefixer: off */
	transition: all 0.3s;
}

/*
Misc

* `Rsz-n`

Styleguide: core-utils.misc
*/

/*
mAll

Modified `all`.

* `sr` \- soft reset, reset some default browser styles:
	* `margin`
	* `padding`
	* `border`
	* `font`
	* `list-style`

Markup: ../../../docs/examples/core-utils/visual-formatting/mall.html

Styleguide: core-utils.misc.mall
*/

.Rsz-n {
	resize: none;
}

.mAll-sr {
	margin: 0;
	padding: 0;
	font: inherit;
	list-style: none;
	border: 0;
}

/*
Visual formatting

* `Ol0`
* `Op0`
* `V`

Styleguide: core-utils.visual
*/

/*
mV

Modified visibility.

mV-vh - visually hides the DOM node but leaves it accessible to the screen readers and robots. For comparison `D-n` hides the DOM node from all. *Responsive*.

Markup: ../../../docs/examples/core-utils/visual-formatting/mv.hbs

Styleguide: core-utils.visual.mv
*/

.Ol0 {
	outline: 0px;
}

.Ol0::-moz-focus-inner {
	border: 0;
}

.Op0 {
	opacity: 0;
}

.V {
	visibility: hidden;
}

.mV-vh {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0px;
	overflow: hidden;
	white-space: nowrap;
	border: 0px;
	clip: rect(0 0 0 0);
}

/*===DESIGN-UTILS===*/

@media (min-width:520px) {
	.-Gg1su_sm {
		--mlu-gg: 4px;
		--mlu-gg-rem: 0.25rem;
	}

	.-Gg2su_sm {
		--mlu-gg: 8px;
		--mlu-gg-rem: 0.5rem;
	}

	.-Gg3su_sm {
		--mlu-gg: 12px;
		--mlu-gg-rem: 0.75rem;
	}

	.-Gg4su_sm {
		--mlu-gg: 16px;
		--mlu-gg-rem: 1rem;
	}

	.-Gg5su_sm {
		--mlu-gg: 20px;
		--mlu-gg-rem: 1.25rem;
	}

	.-Gcc_sm {
		--mlu-grid-cols: 12;
	}

	.-Gcc10_sm {
		--mlu-grid-cols: 10;
	}

	.Pos-a_sm {
		position: absolute;
	}

	.D_sm {
		display: block;
	}

	.D-ib_sm {
		display: inline-block;
	}

	.D-f_sm {
		display: flex;
	}

	.D-if_sm {
		display: inline-flex;
	}

	.D-g_sm {
		display: grid;
	}

	.D-n_sm {
		display: none;
	}

	.Fxd-rr_sm {
		flex-direction: row-reverse;
	}

	.Fxd-r_sm {
		flex-direction: row;
	}

	.Fxw-w_sm {
		flex-wrap: wrap;
	}

	.Fxw-n_sm {
		flex-wrap: nowrap;
	}

	.Jc-fs_sm {
		justify-content: flex-start;
	}

	.Jc-fe_sm {
		justify-content: flex-end;
	}

	.Jc-c_sm {
		justify-content: center;
	}

	.Jc-sa_sm {
		justify-content: space-around;
	}

	.Jc-sb_sm {
		justify-content: space-between;
	}

	.Ai-s_sm {
		align-items: stretch;
	}

	.Ai-fs_sm {
		align-items: flex-start;
	}

	.Ai-fe_sm {
		align-items: flex-end;
	}

	.Ai-b_sm {
		align-items: baseline;
	}

	.Ai-c_sm {
		align-items: center;
	}

	.W1c_sm {
		--gc: 1;
		width: calc(25% - 32px);
		width: var(--gc-rule, 25%);
	}

	.W2c_sm {
		--gc: 2;
		width: calc(50% - 32px);
		width: var(--gc-rule, 50%);
	}

	.W3c_sm {
		--gc: 3;
		width: calc(75% - 32px);
		width: var(--gc-rule, 75%);
	}

	.W4c_sm {
		--gc: 4;
		width: calc(100% - 32px);
		width: var(--gc-rule, 100%);
	}

	.W-a_sm {
		width: auto;
	}

	.W-i_sm {
		width: inherit;
	}

	.Mb0_sm {
		margin-bottom: 0;
	}

	.Mx0_sm {
		margin-right: 0;
		margin-left: 0;
	}

	.Ml-a_sm {
		margin-left: auto;
	}

	.Mx-a_sm {
		margin-right: auto;
		margin-left: auto;
	}

	.Mb2gg_sm {
		margin-bottom: 2rem;
		margin-bottom: 2rem;
		margin-bottom: calc(var(--mlu-gg-rem) * 2);
	}

	.Mx1gg_sm {
		margin-right: 16px;
		margin-right: 16px;
		margin-right: var(--mlu-gg);
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ml1gg_sm {
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ta_sm {
		text-align: left;
	}

	.Ta-c_sm {
		text-align: center;
	}

	.Ta-r_sm {
		text-align: right;
	}

	.mV-vh_sm {
		position: absolute;
		width: 1px;
		height: 1px;
		margin: -1px;
		padding: 0px;
		overflow: hidden;
		white-space: nowrap;
		border: 0px;
		clip: rect(0 0 0 0);
	}
}

@media (min-width:760px) {
	:root {
		--mlu-grid-cols: 12;
	}

	.-Gg1su_md {
		--mlu-gg: 4px;
		--mlu-gg-rem: 0.25rem;
	}

	.-Gg2su_md {
		--mlu-gg: 8px;
		--mlu-gg-rem: 0.5rem;
	}

	.-Gg3su_md {
		--mlu-gg: 12px;
		--mlu-gg-rem: 0.75rem;
	}

	.-Gg4su_md {
		--mlu-gg: 16px;
		--mlu-gg-rem: 1rem;
	}

	.-Gg5su_md {
		--mlu-gg: 20px;
		--mlu-gg-rem: 1.25rem;
	}

	.-Gcc_md {
		--mlu-grid-cols: 12;
	}

	.-Gcc10_md {
		--mlu-grid-cols: 10;
	}

	.-Gcc-sm_md {
		--mlu-grid-cols: 4;
	}

	.Pos-a_md {
		position: absolute;
	}

	.D_md {
		display: block;
	}

	.D-ib_md {
		display: inline-block;
	}

	.D-f_md {
		display: flex;
	}

	.D-if_md {
		display: inline-flex;
	}

	.D-g_md {
		display: grid;
	}

	.D-n_md {
		display: none;
	}

	.Fxd-rr_md {
		flex-direction: row-reverse;
	}

	.Fxd-r_md {
		flex-direction: row;
	}

	.Fxw-w_md {
		flex-wrap: wrap;
	}

	.Fxw-n_md {
		flex-wrap: nowrap;
	}

	.Jc-fs_md {
		justify-content: flex-start;
	}

	.Jc-fe_md {
		justify-content: flex-end;
	}

	.Jc-c_md {
		justify-content: center;
	}

	.Jc-sa_md {
		justify-content: space-around;
	}

	.Jc-sb_md {
		justify-content: space-between;
	}

	.Ai-s_md {
		align-items: stretch;
	}

	.Ai-fs_md {
		align-items: flex-start;
	}

	.Ai-fe_md {
		align-items: flex-end;
	}

	.Ai-b_md {
		align-items: baseline;
	}

	.Ai-c_md {
		align-items: center;
	}

	.W1c_md {
		--gc: 1;
		width: calc(8.333% - 32px);
		width: var(--gc-rule, 8.333%);
	}

	.Ml1c_md {
		--mgc: 1;
		margin-left: calc(8.333% + 16px);
		margin-left: var(--mgc-rule, 8.333%);
	}

	.W2c_md {
		--gc: 2;
		width: calc(16.666% - 32px);
		width: var(--gc-rule, 16.666%);
	}

	.Ml2c_md {
		--mgc: 2;
		margin-left: calc(16.666% + 16px);
		margin-left: var(--mgc-rule, 16.666%);
	}

	.W3c_md {
		--gc: 3;
		width: calc(25% - 32px);
		width: var(--gc-rule, 25%);
	}

	.Ml3c_md {
		--mgc: 3;
		margin-left: calc(25% + 16px);
		margin-left: var(--mgc-rule, 25%);
	}

	.W4c_md {
		--gc: 4;
		width: calc(33.333% - 32px);
		width: var(--gc-rule, 33.333%);
	}

	.Ml4c_md {
		--mgc: 4;
		margin-left: calc(33.333% + 16px);
		margin-left: var(--mgc-rule, 33.333%);
	}

	.W5c_md {
		--gc: 5;
		width: calc(41.666% - 32px);
		width: var(--gc-rule, 41.666%);
	}

	.Ml5c_md {
		--mgc: 5;
		margin-left: calc(41.666% + 16px);
		margin-left: var(--mgc-rule, 41.666%);
	}

	.W6c_md {
		--gc: 6;
		width: calc(50% - 32px);
		width: var(--gc-rule, 50%);
	}

	.Ml6c_md {
		--mgc: 6;
		margin-left: calc(50% + 16px);
		margin-left: var(--mgc-rule, 50%);
	}

	.W7c_md {
		--gc: 7;
		width: calc(58.333% - 32px);
		width: var(--gc-rule, 58.333%);
	}

	.Ml7c_md {
		--mgc: 7;
		margin-left: calc(58.333% + 16px);
		margin-left: var(--mgc-rule, 58.333%);
	}

	.W8c_md {
		--gc: 8;
		width: calc(66.666% - 32px);
		width: var(--gc-rule, 66.666%);
	}

	.Ml8c_md {
		--mgc: 8;
		margin-left: calc(66.666% + 16px);
		margin-left: var(--mgc-rule, 66.666%);
	}

	.W9c_md {
		--gc: 9;
		width: calc(75% - 32px);
		width: var(--gc-rule, 75%);
	}

	.Ml9c_md {
		--mgc: 9;
		margin-left: calc(75% + 16px);
		margin-left: var(--mgc-rule, 75%);
	}

	.W10c_md {
		--gc: 10;
		width: calc(83.333% - 32px);
		width: var(--gc-rule, 83.333%);
	}

	.Ml10c_md {
		--mgc: 10;
		margin-left: calc(83.333% + 16px);
		margin-left: var(--mgc-rule, 83.333%);
	}

	.W11c_md {
		--gc: 11;
		width: calc(91.666% - 32px);
		width: var(--gc-rule, 91.666%);
	}

	.W12c_md {
		--gc: 12;
		width: calc(100% - 32px);
		width: var(--gc-rule, 100%);
	}

	.W-a_md {
		width: auto;
	}

	.W-i_md {
		width: inherit;
	}

	.Mb0_md {
		margin-bottom: 0;
	}

	.Mx0_md {
		margin-right: 0;
		margin-left: 0;
	}

	.Ml-a_md {
		margin-left: auto;
	}

	.Mx-a_md {
		margin-right: auto;
		margin-left: auto;
	}

	.Mb2gg_md {
		margin-bottom: 2rem;
		margin-bottom: 2rem;
		margin-bottom: calc(var(--mlu-gg-rem) * 2);
	}

	.Mx1gg_md {
		margin-right: 16px;
		margin-right: 16px;
		margin-right: var(--mlu-gg);
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ml1gg_md {
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ta_md {
		text-align: left;
	}

	.Ta-c_md {
		text-align: center;
	}

	.Ta-r_md {
		text-align: right;
	}

	.mV-vh_md {
		position: absolute;
		width: 1px;
		height: 1px;
		margin: -1px;
		padding: 0px;
		overflow: hidden;
		white-space: nowrap;
		border: 0px;
		clip: rect(0 0 0 0);
	}
}

@media (min-width:960px) {
	:root {
		--mlu-gg: 16px;
	}

	:root {
		--mlu-gg-rem: 1rem;
	}

	.-Gg1su_lg {
		--mlu-gg: 4px;
		--mlu-gg-rem: 0.25rem;
	}

	.-Gg2su_lg {
		--mlu-gg: 8px;
		--mlu-gg-rem: 0.5rem;
	}

	.-Gg3su_lg {
		--mlu-gg: 12px;
		--mlu-gg-rem: 0.75rem;
	}

	.-Gg4su_lg {
		--mlu-gg: 16px;
		--mlu-gg-rem: 1rem;
	}

	.-Gg5su_lg {
		--mlu-gg: 20px;
		--mlu-gg-rem: 1.25rem;
	}

	.-Gcc_lg {
		--mlu-grid-cols: 12;
	}

	.-Gcc10_lg {
		--mlu-grid-cols: 10;
	}

	.-Gcc-sm_lg {
		--mlu-grid-cols: 4;
	}

	.Pos-a_lg {
		position: absolute;
	}

	.D_lg {
		display: block;
	}

	.D-ib_lg {
		display: inline-block;
	}

	.D-f_lg {
		display: flex;
	}

	.D-if_lg {
		display: inline-flex;
	}

	.D-g_lg {
		display: grid;
	}

	.D-n_lg {
		display: none;
	}

	.Fxd-rr_lg {
		flex-direction: row-reverse;
	}

	.Fxd-r_lg {
		flex-direction: row;
	}

	.Fxw-w_lg {
		flex-wrap: wrap;
	}

	.Fxw-n_lg {
		flex-wrap: nowrap;
	}

	.Jc-fs_lg {
		justify-content: flex-start;
	}

	.Jc-fe_lg {
		justify-content: flex-end;
	}

	.Jc-c_lg {
		justify-content: center;
	}

	.Jc-sa_lg {
		justify-content: space-around;
	}

	.Jc-sb_lg {
		justify-content: space-between;
	}

	.Ai-s_lg {
		align-items: stretch;
	}

	.Ai-fs_lg {
		align-items: flex-start;
	}

	.Ai-fe_lg {
		align-items: flex-end;
	}

	.Ai-b_lg {
		align-items: baseline;
	}

	.Ai-c_lg {
		align-items: center;
	}

	.W1c_lg {
		--gc: 1;
		width: calc(8.333% - 32px);
		width: var(--gc-rule, 8.333%);
	}

	.Ml1c_lg {
		--mgc: 1;
		margin-left: calc(8.333% + 16px);
		margin-left: var(--mgc-rule, 8.333%);
	}

	.W2c_lg {
		--gc: 2;
		width: calc(16.666% - 32px);
		width: var(--gc-rule, 16.666%);
	}

	.Ml2c_lg {
		--mgc: 2;
		margin-left: calc(16.666% + 16px);
		margin-left: var(--mgc-rule, 16.666%);
	}

	.W3c_lg {
		--gc: 3;
		width: calc(25% - 32px);
		width: var(--gc-rule, 25%);
	}

	.Ml3c_lg {
		--mgc: 3;
		margin-left: calc(25% + 16px);
		margin-left: var(--mgc-rule, 25%);
	}

	.W4c_lg {
		--gc: 4;
		width: calc(33.333% - 32px);
		width: var(--gc-rule, 33.333%);
	}

	.Ml4c_lg {
		--mgc: 4;
		margin-left: calc(33.333% + 16px);
		margin-left: var(--mgc-rule, 33.333%);
	}

	.W5c_lg {
		--gc: 5;
		width: calc(41.666% - 32px);
		width: var(--gc-rule, 41.666%);
	}

	.Ml5c_lg {
		--mgc: 5;
		margin-left: calc(41.666% + 16px);
		margin-left: var(--mgc-rule, 41.666%);
	}

	.W6c_lg {
		--gc: 6;
		width: calc(50% - 32px);
		width: var(--gc-rule, 50%);
	}

	.Ml6c_lg {
		--mgc: 6;
		margin-left: calc(50% + 16px);
		margin-left: var(--mgc-rule, 50%);
	}

	.W7c_lg {
		--gc: 7;
		width: calc(58.333% - 32px);
		width: var(--gc-rule, 58.333%);
	}

	.Ml7c_lg {
		--mgc: 7;
		margin-left: calc(58.333% + 16px);
		margin-left: var(--mgc-rule, 58.333%);
	}

	.W8c_lg {
		--gc: 8;
		width: calc(66.666% - 32px);
		width: var(--gc-rule, 66.666%);
	}

	.Ml8c_lg {
		--mgc: 8;
		margin-left: calc(66.666% + 16px);
		margin-left: var(--mgc-rule, 66.666%);
	}

	.W9c_lg {
		--gc: 9;
		width: calc(75% - 32px);
		width: var(--gc-rule, 75%);
	}

	.Ml9c_lg {
		--mgc: 9;
		margin-left: calc(75% + 16px);
		margin-left: var(--mgc-rule, 75%);
	}

	.W10c_lg {
		--gc: 10;
		width: calc(83.333% - 32px);
		width: var(--gc-rule, 83.333%);
	}

	.Ml10c_lg {
		--mgc: 10;
		margin-left: calc(83.333% + 16px);
		margin-left: var(--mgc-rule, 83.333%);
	}

	.W11c_lg {
		--gc: 11;
		width: calc(91.666% - 32px);
		width: var(--gc-rule, 91.666%);
	}

	.W12c_lg {
		--gc: 12;
		width: calc(100% - 32px);
		width: var(--gc-rule, 100%);
	}

	.W-a_lg {
		width: auto;
	}

	.W-i_lg {
		width: inherit;
	}

	.Mb0_lg {
		margin-bottom: 0;
	}

	.Mx0_lg {
		margin-right: 0;
		margin-left: 0;
	}

	.Ml-a_lg {
		margin-left: auto;
	}

	.Mx-a_lg {
		margin-right: auto;
		margin-left: auto;
	}

	.Mb2gg_lg {
		margin-bottom: 2rem;
		margin-bottom: 2rem;
		margin-bottom: calc(var(--mlu-gg-rem) * 2);
	}

	.Mx1gg_lg {
		margin-right: 16px;
		margin-right: 16px;
		margin-right: var(--mlu-gg);
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ml1gg_lg {
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ta_lg {
		text-align: left;
	}

	.Ta-c_lg {
		text-align: center;
	}

	.Ta-r_lg {
		text-align: right;
	}

	.mV-vh_lg {
		position: absolute;
		width: 1px;
		height: 1px;
		margin: -1px;
		padding: 0px;
		overflow: hidden;
		white-space: nowrap;
		border: 0px;
		clip: rect(0 0 0 0);
	}
}

@media (min-width:1168px) {
	.-Gg1su_xl {
		--mlu-gg: 4px;
		--mlu-gg-rem: 0.25rem;
	}

	.-Gg2su_xl {
		--mlu-gg: 8px;
		--mlu-gg-rem: 0.5rem;
	}

	.-Gg3su_xl {
		--mlu-gg: 12px;
		--mlu-gg-rem: 0.75rem;
	}

	.-Gg4su_xl {
		--mlu-gg: 16px;
		--mlu-gg-rem: 1rem;
	}

	.-Gg5su_xl {
		--mlu-gg: 20px;
		--mlu-gg-rem: 1.25rem;
	}

	.-Gcc_xl {
		--mlu-grid-cols: 12;
	}

	.-Gcc10_xl {
		--mlu-grid-cols: 10;
	}

	.-Gcc-sm_xl {
		--mlu-grid-cols: 4;
	}

	.Pos-a_xl {
		position: absolute;
	}

	.D_xl {
		display: block;
	}

	.D-ib_xl {
		display: inline-block;
	}

	.D-f_xl {
		display: flex;
	}

	.D-if_xl {
		display: inline-flex;
	}

	.D-g_xl {
		display: grid;
	}

	.D-n_xl {
		display: none;
	}

	.Fxd-rr_xl {
		flex-direction: row-reverse;
	}

	.Fxd-r_xl {
		flex-direction: row;
	}

	.Fxw-w_xl {
		flex-wrap: wrap;
	}

	.Fxw-n_xl {
		flex-wrap: nowrap;
	}

	.Jc-fs_xl {
		justify-content: flex-start;
	}

	.Jc-fe_xl {
		justify-content: flex-end;
	}

	.Jc-c_xl {
		justify-content: center;
	}

	.Jc-sa_xl {
		justify-content: space-around;
	}

	.Jc-sb_xl {
		justify-content: space-between;
	}

	.Ai-s_xl {
		align-items: stretch;
	}

	.Ai-fs_xl {
		align-items: flex-start;
	}

	.Ai-fe_xl {
		align-items: flex-end;
	}

	.Ai-b_xl {
		align-items: baseline;
	}

	.Ai-c_xl {
		align-items: center;
	}

	.W1c_xl {
		--gc: 1;
		width: calc(8.333% - 32px);
		width: var(--gc-rule, 8.333%);
	}

	.Ml1c_xl {
		--mgc: 1;
		margin-left: calc(8.333% + 16px);
		margin-left: var(--mgc-rule, 8.333%);
	}

	.W2c_xl {
		--gc: 2;
		width: calc(16.666% - 32px);
		width: var(--gc-rule, 16.666%);
	}

	.Ml2c_xl {
		--mgc: 2;
		margin-left: calc(16.666% + 16px);
		margin-left: var(--mgc-rule, 16.666%);
	}

	.W3c_xl {
		--gc: 3;
		width: calc(25% - 32px);
		width: var(--gc-rule, 25%);
	}

	.Ml3c_xl {
		--mgc: 3;
		margin-left: calc(25% + 16px);
		margin-left: var(--mgc-rule, 25%);
	}

	.W4c_xl {
		--gc: 4;
		width: calc(33.333% - 32px);
		width: var(--gc-rule, 33.333%);
	}

	.Ml4c_xl {
		--mgc: 4;
		margin-left: calc(33.333% + 16px);
		margin-left: var(--mgc-rule, 33.333%);
	}

	.W5c_xl {
		--gc: 5;
		width: calc(41.666% - 32px);
		width: var(--gc-rule, 41.666%);
	}

	.Ml5c_xl {
		--mgc: 5;
		margin-left: calc(41.666% + 16px);
		margin-left: var(--mgc-rule, 41.666%);
	}

	.W6c_xl {
		--gc: 6;
		width: calc(50% - 32px);
		width: var(--gc-rule, 50%);
	}

	.Ml6c_xl {
		--mgc: 6;
		margin-left: calc(50% + 16px);
		margin-left: var(--mgc-rule, 50%);
	}

	.W7c_xl {
		--gc: 7;
		width: calc(58.333% - 32px);
		width: var(--gc-rule, 58.333%);
	}

	.Ml7c_xl {
		--mgc: 7;
		margin-left: calc(58.333% + 16px);
		margin-left: var(--mgc-rule, 58.333%);
	}

	.W8c_xl {
		--gc: 8;
		width: calc(66.666% - 32px);
		width: var(--gc-rule, 66.666%);
	}

	.Ml8c_xl {
		--mgc: 8;
		margin-left: calc(66.666% + 16px);
		margin-left: var(--mgc-rule, 66.666%);
	}

	.W9c_xl {
		--gc: 9;
		width: calc(75% - 32px);
		width: var(--gc-rule, 75%);
	}

	.Ml9c_xl {
		--mgc: 9;
		margin-left: calc(75% + 16px);
		margin-left: var(--mgc-rule, 75%);
	}

	.W10c_xl {
		--gc: 10;
		width: calc(83.333% - 32px);
		width: var(--gc-rule, 83.333%);
	}

	.Ml10c_xl {
		--mgc: 10;
		margin-left: calc(83.333% + 16px);
		margin-left: var(--mgc-rule, 83.333%);
	}

	.W11c_xl {
		--gc: 11;
		width: calc(91.666% - 32px);
		width: var(--gc-rule, 91.666%);
	}

	.W12c_xl {
		--gc: 12;
		width: calc(100% - 32px);
		width: var(--gc-rule, 100%);
	}

	.W-a_xl {
		width: auto;
	}

	.W-i_xl {
		width: inherit;
	}

	.Mb0_xl {
		margin-bottom: 0;
	}

	.Mx0_xl {
		margin-right: 0;
		margin-left: 0;
	}

	.Ml-a_xl {
		margin-left: auto;
	}

	.Mx-a_xl {
		margin-right: auto;
		margin-left: auto;
	}

	.Mb2gg_xl {
		margin-bottom: 2rem;
		margin-bottom: 2rem;
		margin-bottom: calc(var(--mlu-gg-rem) * 2);
	}

	.Mx1gg_xl {
		margin-right: 16px;
		margin-right: 16px;
		margin-right: var(--mlu-gg);
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ml1gg_xl {
		margin-left: 16px;
		margin-left: 16px;
		margin-left: var(--mlu-gg);
	}

	.Ta_xl {
		text-align: left;
	}

	.Ta-c_xl {
		text-align: center;
	}

	.Ta-r_xl {
		text-align: right;
	}

	.mV-vh_xl {
		position: absolute;
		width: 1px;
		height: 1px;
		margin: -1px;
		padding: 0px;
		overflow: hidden;
		white-space: nowrap;
		border: 0px;
		clip: rect(0 0 0 0);
	}
}