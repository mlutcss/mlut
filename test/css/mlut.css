@charset "UTF-8";

/*
Normalize

Simple css normalization that correcting old browsers bugs and not affecting other styles.

Styleguide: core-styles.normalize
*/

main {
	display: block;
}

img {
	max-width: 100%;
	height: auto;
	border: 0;
}

legend {
	display: table;
	box-sizing: border-box;
	max-width: 100%;
	white-space: normal;
}

[hidden] {
	display: none !important;
}

/* This comment needed for add @charset "utf-8"; in source because sass compiler erased this at-rule without it: утф8 */

/*
Core blocks

Set of universal BEM blocks for using on all sites. Some blocks contain elements.

Core blocks don't contain, or almost don't contain styles such as colors, backgrounds, etc. Such styles are set on the 'theme' or 'design' layers. To style blocks or their elements, use utilities or modifiers such as block--mod.

Weight: 0

Styleguide: core-blocks
*/

/*
Core utilities

Simple text

Weight: 1

Styleguide: core-utils
*/

/*
Core styles

Simple text

Weight: 2

Styleguide: core-styles
*/

/*
Sass tools

Simple text

Weight: 3

Styleguide: sass-tools
*/

/*
Examples

Additional examples of core blocks, utilities, tools and ready-made components.

Weight: 4

Styleguide: examples
*/

/*
Settings

Grid settings, compilation flags, constants and more.

Styleguide: sass-tools.settings
*/

/*
Functions

Useful functions. All MLUT functions have 'mlu' prefix.

Styleguide: sass-tools.functions
*/

/*
Mixins

Useful mixins. All MLUT mixins have 'mlu' prefix.

Styleguide: sass-tools.mixins
*/

/*===CORE-BLOCKS===*/

/*
Reset

Block for reset some default browser styles. It reset:
* `margin`
* `padding`
* `border`
* `font`
* `list-style`

Markup: ../../../docs/examples/core-blocks/reset/reset.html

Styleguide: core-blocks.reset
*/

.reset {
	margin: 0px;
	padding: 0px;
	font: inherit;
	list-style: none;
	border: 0px;
}

/*
Page

Block for normalize browser styles of 'body'. Designed for 'body' tag only.

It has `height: 100%` for sticky footer.

Styleguide: core-blocks.page
*/

.page {
	height: 100%;
	margin: 0px;
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Cantarell, Ubuntu, "Fira Sans", "Droid Sans", "Helvetica Neue", Arial, sans-serif;
}

/*
Row

Block for creating layouts. Suitable for columns, cards and horizontal lists. By default, `inline-block` technology is used for layouts. Using [D utility](section-core-utils.html#kssref-core-utils-d), you can change the layout technology to flexbox.

Parts of the layout within a 'row' are created using the elements:
* [row__col](#kssref-core-blocks-row-row__col)
* [row__item](#kssref-core-blocks-row-row__item)

'Rows' can be put into each other an unlimited number of times.

Markup: ../../../docs/examples/core-blocks/row/row.html

Styleguide: core-blocks.row
*/

/*
row__col

The main element for creating columns in layout. By default, it stretches the entire width of the container. The columns have gutters on the sides and bottom.

The gutters are implemented using the `margin` property. For this reason, the percentage width must be specified using the CSS `calc()`. <br>
If `calc()` is not supported by the browser, then margin is provided in percent as fallback:
```scss
margin: 0 1.5% 24px;
margin: 0 calc(12px) 24px;
```
so that the layout does not collapse. Similar fallback used in the [wrapper](#kssref-core-blocks-wrapper) for fields.

The size of gutter fallback you can find in the [settings](section-sass-tools.html#kssref-sass-tools-settings-general) in `$mlu-grid-gutter-fallback.`

Column width is set using [W utility](section-core-utils.html#kssref-core-utils-w). See example [above](#kssref-core-blocks-row).

You can create nested layouts with a mix of `row` and `row__col` on the same tag. If you don't need double fields in the nested row, use the mix with the `row__item`. See example below.

All examples of the work of nested layouts are [here](section-examples.html#kssref-examples-nested_layouts).

Markup: ../../../docs/examples/core-blocks/row/row__col.html

Styleguide: core-blocks.row.row__col
*/

/*
row__item

Element for creating parts of the layout. By default, it stretches across the width of the content.

The sizes and offsets are set with help of utilities.

Markup: ../../../docs/examples/core-blocks/row/row__item.html

Styleguide: core-blocks.row.row__item
*/

/*
Nested layouts

All variants of nested layouts.

Styleguide: examples.nested_layouts
*/

/*
Set of ready layouts

Simple text

Styleguide: examples.layouts
*/

.row {
	position: relative;
	display: block;
	margin: 0px;
	padding: 0px;
	font-size: 0px;
	list-style: none;
	counter-reset: mlu-row-item;
}

.row__col,
.row__item {
	position: relative;
	display: inline-block;
	max-width: 100%;
	box-sizing: border-box;
	font-size: 16px;
	font-size: 1rem;
	text-align: left;
	vertical-align: top;
	direction: ltr;
}

.row__col.row,
.row__item.row {
	font-size: 0px;
}

.row__col > :first-child:not([class]),
.row__item > :first-child:not([class]) {
	margin-top: 0px;
}

.row__col > :last-child:not([class]),
.row__item > :last-child:not([class]) {
	margin-bottom: 0px;
}

.row__col {
	width: 97%;
	width: calc(100% - 24px);
	margin: 0 1.5% 24px;
	margin: 0 calc(12px) 24px;
}

.row__col.row {
	margin-bottom: 0px;
}

/*
Wrapper

The block-container for the main content of the page. The maximum width is set in the [settings](section-sass-tools.html#kssref-sass-tools-settings-blocks). The default is `1200px`.

Gutters are added up with maximum width so that the width of the contents matches the width from the settings.

The container has sides `padding` that equal to gutters so that the content does not stick to sides on small screens. On wide screens the container is centered.

Like in [row__col](#kssref-core-blocks-row-row__col), in wrapper is used `calc()` fallback for fields:
```scss
padding-right: 1.5%;
padding-left: 1.5%;
padding-right: calc(12px);
padding-left: calc(12px);
```

Markup: ../../../docs/examples/core-blocks/wrapper/wrapper.html

Styleguide: core-blocks.wrapper
*/

/*
wrapper__row

An element that imposes left and right margins of the outermost columns on the fields of the wrapper.

This behavior is necessary so that there are no double fields in the layout.

This element is optional, because in different situations different behavior of fields may be needed.


Like in [row__col](#kssref-core-blocks-row-row__col), in wrapper__row is used `calc()` fallback for negative `margin`:
```scss
margin-right: -1.5%;
margin-left: -1.5%;
margin-right: calc(-12px);
margin-left: calc(-12px);
```

.wrapper__row - [row](#kssref-core-blocks-row) without double fields

Markup: ../../../docs/examples/core-blocks/wrapper/wrapper__row.hbs

Styleguide: core-blocks.wrapper.wrapper__row
*/

.wrapper {
	display: block;
	max-width: 1224px;
	box-sizing: border-box;
	margin: 0 auto;
	padding-right: 1.5%;
	padding-left: 1.5%;
	padding-right: calc(12px);
	padding-left: calc(12px);
}

.wrapper__row {
	margin-right: -1.5%;
	margin-left: -1.5%;
	margin-right: calc(-12px);
	margin-left: calc(-12px);
}

/*
Ratio-block

Block for creating containers, with proportional width and height. Implemented using a pseudo-element with a `padding-bottom` in %.

The default aspect ratio is 16:9.

.ratio-block--4x3 - 4:3 aspect ratio.

Markup: ../../../docs/examples/core-blocks/ratio-block/ratio-block.hbs

Styleguide: core-blocks.ratio-block
*/

/*
ratio-block__content

An element for inserting content that will be resize proportionally. See example [above](#kssref-core-blocks-ratio-block)

Styleguide: core-blocks.ratio-block.ratio-block__content
*/

.ratio-block {
	position: relative;
}

.ratio-block:before {
	display: block;
	width: 100%;
	padding-bottom: 56.25%;
	content: "";
}

.ratio-block--4x3:before {
	padding-bottom: 75%;
}

.ratio-block__content {
	position: absolute;
	top: 0px;
	max-width: 100%;
	max-height: 100%;
}

/*
Btn

Block for creating buttons. It normalizes styles.

Markup: ../../../docs/examples/core-blocks/btn/btn.html

Styleguide: core-blocks.btn
*/

.btn {
	display: inline-block;
	box-sizing: border-box;
	margin: 0px;
	font-family: inherit;
	font-size: 1rem;
	line-height: normal;
	text-align: center;
	text-decoration: none;
	vertical-align: top;
	border: 0;
	cursor: pointer;
}

/*
Input

Block for creating inputs. Normalizes styles.

Markup: ../../../docs/examples/core-blocks/input/input.html

Styleguide: core-blocks.input
*/

.input {
	display: inline-block;
	box-sizing: border-box;
	margin: 0px;
	font: inherit;
	border: 0;
}

/*===DESIGN-BLOCKS===*/

/*===CORE-UTILS===*/

/*
D

D \- display. Utility sets the display type of component.

Markup:
<div class="test-content W5gc_md">
	<h3 class="D-ib_sm">Title</h3>
	<p class="D-n_xl">Hidden content</p>
</div>

Styleguide: core-utils.d
*/

/*
mD

mD is used for for setting the display type with additional parameters.

Markup:
<div class="row mD-f">
	<div class="test-content row__col W2gc_sm W3gc_md">
		<h3>W2gc_sm W3gc_md</h3>
		<p>Some text</p>
	</div>
</div>

Styleguide: core-utils.d.md
*/

.D {
	display: block;
}

.D-tb {
	display: table;
}

.D-tbfg {
	display: table-footer-group;
}

.D-f {
	display: flex;
}

.D-if {
	display: inline-flex;
}

.D-n {
	display: none;
}

.mD-f {
	display: flex;
	flex-wrap: wrap;
}

.mD-if {
	display: inline-flex;
	flex-wrap: wrap;
}

/*
Flex

A group of utilities for managing flex-containers and flex-elements. Custom flex utilities are needed to manage standard [row layouts](section-core-blocks.html#kssref-core-blocks-row) and their elements.

Styleguide: core-utils.flex
*/

/*
mAs

mAs \- my align self. Utility for componont vertical alignment.

Markup:
<div class="row">
	<div class="test-content row__col W2gc_sm W3gc_md mAs-fe">
		<h3>W2gc_sm W3gc_md</h3>
		<p>Some text</p>
	</div>
</div>

Styleguide: core-utils.flex.mas
*/

/*
mJc

mJc \- my justify content. Utility for horizontal alignment of layout items and text.

Markup:
<div class="row mJc-c">
	<div class="test-content row__col W2gc_sm W3gc_md">
		<h3>Centered</h3>
		<p>Some text</p>
	</div>
</div>

Styleguide: core-utils.flex.mjc
*/

/*
mAi

mAi \- my align items. Utility for vertical alignment of layout items.

Markup:
<div class="row mAi-fe">
	<div class="test-content row__col W2gc_sm W3gc_md">
		<h3>Bottom</h3>
		<p>Some text</p>
	</div>
</div>

Styleguide: core-utils.flex.mai
*/

.Fxd-c {
	flex-direction: column;
}

.Fxg1 {
	flex-grow: 1;
}

.Fxsh0 {
	flex-shrink: 0;
}

.Fxw-wr {
	flex-wrap: wrap-reverse;
}

.Fxw-w {
	flex-wrap: wrap;
}

.As-s {
	align-self: stretch;
}

.As-fs {
	align-self: flex-start;
}

.As-c {
	align-self: center;
}

.As-fe {
	align-self: flex-end;
}

.mAs-c {
	align-self: center;
	vertical-align: middle;
}

.mAs-fe {
	align-self: flex-end;
	vertical-align: bottom;
}

.Jc-fe {
	justify-content: flex-end;
}

.Jc-c {
	justify-content: center;
}

.Jc-sa {
	justify-content: space-around;
}

.Jc-sb {
	justify-content: space-between;
}

.mJc-c {
	justify-content: center;
	text-align: center;
}

.mJc-fe {
	justify-content: flex-end;
	text-align: right;
}

.Ai-fs {
	align-items: flex-start;
}

.Ai-fe {
	align-items: flex-end;
}

.Ai-c {
	align-items: center;
}

.mAi-c {
	align-items: center;
}

.mAi-c > * {
	vertical-align: middle;
}

.mAi-fe {
	align-items: flex-end;
}

.mAi-fe > * {
	vertical-align: bottom;
}

/*
W

W \- width. This utility sets component width.

Markup:
<div class="test-content W2gc_sm W5gc_md">
	<h3>Title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.w
*/

.W-a {
	width: auto;
}

.W1gc {
	width: 47%;
	width: calc(50% - 24px);
}

.W2gc {
	width: 97%;
	width: calc(100% - 24px);
}

.W50p {
	width: 50%;
}

.W100p {
	width: 100%;
}

.W-card {
	max-width: 288px;
}

.Maw100p {
	max-width: 100%;
}

.H100p {
	height: 100%;
}

.Bxz {
	box-sizing: border-box;
}

/*
Margin

Group of utilities that sets margin for component.

Styleguide: core-utils.margin
*/

/*
Ml

Ml \- margin left. Utility sets left margin.

Markup:
<div class="test-content Ml3gc_md">
	<h3>Container</h3>
	<p>With margin left</p>
</div>

Styleguide: core-utils.margin.ml
*/

/*
Mx

Mx \- margin on X axis. Utility sets left and right margin.

Markup:
<div class="test-content W3gc_sm Mx-a">
	<h3>Title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.margin.mx
*/

/*
Mt

Mt \- margin top. Utility sets top margin.

Markup:
<div class="test-content W3gc_md">
	<h3>Title</h3>
	<p class="Mt3gg">text</p>
</div>

Styleguide: core-utils.margin.mt
*/

/*
Mb

Mb \- margin bottom. Utility sets bottom margin.

Markup:
<div class="test-content W3gc_md">
	<h3>Title</h3>
	<p class="Mb4gg">text</p>
	<p>after indent</p>
</div>

Styleguide: core-utils.margin.mb
*/

.M0 {
	margin: 0px;
}

.M-a {
	margin: auto;
}

.Ml-a {
	margin-left: auto;
}

.Mx-a {
	margin-left: auto;
	margin-right: auto;
}

.Mt4gg {
	margin-top: 3rem;
}

.Mb4gg {
	margin-bottom: 3rem;
}

.Mt3gg {
	margin-top: 2.25rem;
}

.Mb3gg {
	margin-bottom: 2.25rem;
}

.Mt2gg {
	margin-top: 1.5rem;
}

.Mb2gg {
	margin-bottom: 1.5rem;
}

.Mb1gg {
	margin-bottom: 0.75rem;
}

.Mb-2gg {
	margin-bottom: -24px;
}

.Ml-1gg {
	margin-left: -12px;
}

.Ml1gg {
	margin-left: 12px;
}

/*
Padding

Group of utilities that sets padding for component.

Styleguide: core-utils.padding
*/

/*
P

P \- padding. Sets padding from all sides: top, right, bottom and left.

Markup:
<div class="test-content W2gc_sm W5gc_md P0">
	<h3>Title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.padding.p
*/

/*
Px

Px \- padding on X axis. Sets left and right padding.

Markup:
<div class="Px1gg W2gc_sm W3gc_md">
	<h3>Title</h3>
	<p>[Browsersync] 2 files changed (mlut.min.css.map, mlut.min.css) [12:21:49] Finished 'style' after 212 ms Some text</p>
</div>

Styleguide: core-utils.padding.px
*/

.P0 {
	padding: 0px;
}

.P8 {
	padding: 0.5em 8px;
}

.Px1gg {
	padding-right: 1.5%;
	padding-left: 1.5%;
	padding-right: 12px;
	padding-left: 12px;
}

/*
Float

Group of utilities for work with float.

Styleguide: core-utils.float
*/

/*
Fl

Fl \- float. Sets float to component.

Markup:
<div class="test-content W2gc_sm mCl">
	<h3 class="Fl">Title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.float.fl
*/

/*
mCl

mCl is clearfix utility.

Markup:
<div class="test-content W2gc_sm mCl">
	<h3 class="Fl">Title</h3>
	<p class="Fl-r">Some text</p>
</div>

Styleguide: core-utils.float.mcl
*/

.Fl {
	float: left;
}

.Fl-r {
	float: right;
}

.mCl:after {
	display: table;
	clear: both;
	content: "";
}

/*
Ov

Ov \- overflow. Sets component overflow.

Markup:
<div class="test-content W2gc_sm W5gc_md">
	<h3>Title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.ov
*/

.Ov {
	overflow: hidden;
}

.Ov-a {
	overflow: auto;
}

/*
mV

mV \- modified visibility. Shows and hides component with additional parameters.

Markup:
<div class="test-content W2gc_sm W4gc_md">
	<h3 class="mV-vh">Visually hidden title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.mv
*/

.mV-vh {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0px;
	overflow: hidden;
	white-space: nowrap;
	border: 0px;
	clip: rect(0 0 0 0);
}

/*
mFz

mFz \- my font size. Sets font size with additional parameters.

Markup:
<div class="test-content W2gc_sm W5gc_md">
	<h3>Hidden text here</h3>
	<p class="mFz0">Some text</p>
</div>

Styleguide: core-utils.text.mfz
*/

.F-i {
	font: inherit;
}

.Fw-b {
	font-weight: 700;
}

.Fs {
	font-style: italic;
}

.mFz0 {
	overflow: hidden;
	color: transparent;
	text-indent: 120%;
	white-space: nowrap;
	font-size: 0px;
}

.mFz0::-moz-selection {
	color: transparent;
}

.mFz0::selection {
	color: transparent;
}

/*
Text

Group of utilities that manage the display of text.

Styleguide: core-utils.text
*/

/*
Dir

Dir \- direction. Sets direction of text and order items in layout.

Markup:
<div class="row Dir-r">
	<div class="test-content row__col W2gc_sm W3gc_md">
		<h3>Rtl</h3>
		<p>Some text</p>
	</div>
</div>

Styleguide: core-utils.text.dir
*/

/*
mTov

mTov \- my text overflow. Removes line breaks in the text and displays ellipsis at the end of the line if the text does not fit in the container.

Markup:
<div class="test-content W2gc_sm W3gc_md">
	<h3 class="Maw100p mTov">super super long long title</h3>
	<p>Some text</p>
</div>

Styleguide: core-utils.text.mtov
*/

.Ta {
	text-align: left;
}

.Ta-c {
	text-align: center;
}

.Ta-r {
	text-align: right;
}

.Td {
	text-decoration: none;
}

.Tt {
	text-transform: uppercase;
}

.mTov {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

.C-i {
	color: inherit;
}

.Dir-r {
	direction: rtl;
}

.Bdcl-c {
	border-collapse: collapse;
}

.Bdrs50p {
	border-radius: 50%;
}

/*===DESIGN-UTILS===*/

@media (min-width: 520px) {
	.D-n_sm {
		display: none;
	}

	.D_sm {
		display: block;
	}

	.D-ib_sm {
		display: inline-block;
	}

	.D-f_sm {
		display: flex;
	}

	.D-if_sm {
		display: inline-flex;
	}

	.mJc-fs_sm {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_sm {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_sm {
		justify-content: flex-end;
		text-align: right;
	}

	.mJc-sa_sm {
		justify-content: space-around;
		text-align: center;
	}

	.mJc-sb_sm {
		justify-content: space-between;
		text-align: center;
	}

	.W-a_sm {
		width: auto;
	}

	.W1gc_sm {
		width: 22%;
		width: calc(25% - 24px);
	}

	.W1gs_sm {
		width: 25%;
	}

	.W2gc_sm {
		width: 47%;
		width: calc(50% - 24px);
	}

	.W2gs_sm {
		width: 50%;
	}

	.W3gc_sm {
		width: 72%;
		width: calc(75% - 24px);
	}

	.W3gs_sm {
		width: 75%;
	}

	.W4gc_sm {
		width: 97%;
		width: calc(100% - 24px);
	}

	.W4gs_sm {
		width: 100%;
	}

	.Ml-a_sm {
		margin-left: auto;
	}

	.Mx-a_sm {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_sm {
		margin-left: 12px;
		margin-right: 12px;
	}

	.Mx0_sm {
		margin-left: 0;
		margin-right: 0;
	}
}

@media (min-width: 760px) {
	.D-n_md {
		display: none;
	}

	.D_md {
		display: block;
	}

	.D-ib_md {
		display: inline-block;
	}

	.D-f_md {
		display: flex;
	}

	.D-if_md {
		display: inline-flex;
	}

	.mJc-fs_md {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_md {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_md {
		justify-content: flex-end;
		text-align: right;
	}

	.mJc-sa_md {
		justify-content: space-around;
		text-align: center;
	}

	.mJc-sb_md {
		justify-content: space-between;
		text-align: center;
	}

	.W-a_md {
		width: auto;
	}

	.W1gc_md {
		width: calc(8.333% - 24px);
	}

	.W1gs_md {
		width: 8.333%;
	}

	.Ml1gs_md {
		margin-left: 8.333%;
	}

	.Ml1gc_md {
		margin-left: calc(8.333% + 12px);
	}

	.W2gc_md {
		width: calc(16.666% - 24px);
	}

	.W2gs_md {
		width: 16.666%;
	}

	.Ml2gs_md {
		margin-left: 16.666%;
	}

	.Ml2gc_md {
		margin-left: calc(16.666% + 12px);
	}

	.W3gc_md {
		width: calc(25% - 24px);
	}

	.W3gs_md {
		width: 25%;
	}

	.Ml3gs_md {
		margin-left: 25%;
	}

	.Ml3gc_md {
		margin-left: calc(25% + 12px);
	}

	.W4gc_md {
		width: calc(33.333% - 24px);
	}

	.W4gs_md {
		width: 33.333%;
	}

	.Ml4gs_md {
		margin-left: 33.333%;
	}

	.Ml4gc_md {
		margin-left: calc(33.333% + 12px);
	}

	.W5gc_md {
		width: calc(41.666% - 24px);
	}

	.W5gs_md {
		width: 41.666%;
	}

	.Ml5gs_md {
		margin-left: 41.666%;
	}

	.Ml5gc_md {
		margin-left: calc(41.666% + 12px);
	}

	.W6gc_md {
		width: calc(50% - 24px);
	}

	.W6gs_md {
		width: 50%;
	}

	.Ml6gs_md {
		margin-left: 50%;
	}

	.Ml6gc_md {
		margin-left: calc(50% + 12px);
	}

	.W7gc_md {
		width: calc(58.333% - 24px);
	}

	.W7gs_md {
		width: 58.333%;
	}

	.Ml7gs_md {
		margin-left: 58.333%;
	}

	.Ml7gc_md {
		margin-left: calc(58.333% + 12px);
	}

	.W8gc_md {
		width: calc(66.666% - 24px);
	}

	.W8gs_md {
		width: 66.666%;
	}

	.Ml8gs_md {
		margin-left: 66.666%;
	}

	.Ml8gc_md {
		margin-left: calc(66.666% + 12px);
	}

	.W9gc_md {
		width: calc(75% - 24px);
	}

	.W9gs_md {
		width: 75%;
	}

	.Ml9gs_md {
		margin-left: 75%;
	}

	.Ml9gc_md {
		margin-left: calc(75% + 12px);
	}

	.W10gc_md {
		width: calc(83.333% - 24px);
	}

	.W10gs_md {
		width: 83.333%;
	}

	.Ml10gs_md {
		margin-left: 83.333%;
	}

	.Ml10gc_md {
		margin-left: calc(83.333% + 12px);
	}

	.W11gc_md {
		width: calc(91.666% - 24px);
	}

	.W11gs_md {
		width: 91.666%;
	}

	.W12gc_md {
		width: calc(100% - 24px);
	}

	.W12gs_md {
		width: 100%;
	}

	.Ml-a_md {
		margin-left: auto;
	}

	.Mx-a_md {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_md {
		margin-left: 12px;
		margin-right: 12px;
	}

	.Mx0_md {
		margin-left: 0;
		margin-right: 0;
	}
}

@media (min-width: 960px) {
	.row__col {
		margin-right: calc(16px);
		margin-left: calc(16px);
	}

	.row__col {
		margin-bottom: 32px;
	}

	.wrapper {
		padding-right: calc(16px);
		padding-left: calc(16px);
	}

	.wrapper {
		max-width: 1232px;
	}

	.wrapper__row {
		margin-right: calc(-16px);
		margin-left: calc(-16px);
	}

	.D-n_lg {
		display: none;
	}

	.D_lg {
		display: block;
	}

	.D-ib_lg {
		display: inline-block;
	}

	.D-f_lg {
		display: flex;
	}

	.D-if_lg {
		display: inline-flex;
	}

	.mJc-fs_lg {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_lg {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_lg {
		justify-content: flex-end;
		text-align: right;
	}

	.mJc-sa_lg {
		justify-content: space-around;
		text-align: center;
	}

	.mJc-sb_lg {
		justify-content: space-between;
		text-align: center;
	}

	.W1gc {
		width: calc(50% - 32px);
	}

	.W2gc {
		width: calc(100% - 32px);
	}

	.W-a_lg {
		width: auto;
	}

	.W1gc_sm {
		width: calc(25% - 32px);
	}

	.W2gc_sm {
		width: calc(50% - 32px);
	}

	.W3gc_sm {
		width: calc(75% - 32px);
	}

	.W4gc_sm {
		width: calc(100% - 32px);
	}

	.W1gc_md {
		width: calc(8.333% - 32px);
	}

	.Ml1gc_md {
		margin-left: calc(8.333% + 16px);
	}

	.W2gc_md {
		width: calc(16.666% - 32px);
	}

	.Ml2gc_md {
		margin-left: calc(16.666% + 16px);
	}

	.W3gc_md {
		width: calc(25% - 32px);
	}

	.Ml3gc_md {
		margin-left: calc(25% + 16px);
	}

	.W4gc_md {
		width: calc(33.333% - 32px);
	}

	.Ml4gc_md {
		margin-left: calc(33.333% + 16px);
	}

	.W5gc_md {
		width: calc(41.666% - 32px);
	}

	.Ml5gc_md {
		margin-left: calc(41.666% + 16px);
	}

	.W6gc_md {
		width: calc(50% - 32px);
	}

	.Ml6gc_md {
		margin-left: calc(50% + 16px);
	}

	.W7gc_md {
		width: calc(58.333% - 32px);
	}

	.Ml7gc_md {
		margin-left: calc(58.333% + 16px);
	}

	.W8gc_md {
		width: calc(66.666% - 32px);
	}

	.Ml8gc_md {
		margin-left: calc(66.666% + 16px);
	}

	.W9gc_md {
		width: calc(75% - 32px);
	}

	.Ml9gc_md {
		margin-left: calc(75% + 16px);
	}

	.W10gc_md {
		width: calc(83.333% - 32px);
	}

	.Ml10gc_md {
		margin-left: calc(83.333% + 16px);
	}

	.W11gc_md {
		width: calc(91.666% - 32px);
	}

	.W12gc_md {
		width: calc(100% - 32px);
	}

	.W1gc_lg {
		width: calc(8.333% - 32px);
	}

	.W1gs_lg {
		width: 8.333%;
	}

	.Ml1gs_lg {
		margin-left: 8.333%;
	}

	.Ml1gc_lg {
		margin-left: calc(8.333% + 16px);
	}

	.W2gc_lg {
		width: calc(16.666% - 32px);
	}

	.W2gs_lg {
		width: 16.666%;
	}

	.Ml2gs_lg {
		margin-left: 16.666%;
	}

	.Ml2gc_lg {
		margin-left: calc(16.666% + 16px);
	}

	.W3gc_lg {
		width: calc(25% - 32px);
	}

	.W3gs_lg {
		width: 25%;
	}

	.Ml3gs_lg {
		margin-left: 25%;
	}

	.Ml3gc_lg {
		margin-left: calc(25% + 16px);
	}

	.W4gc_lg {
		width: calc(33.333% - 32px);
	}

	.W4gs_lg {
		width: 33.333%;
	}

	.Ml4gs_lg {
		margin-left: 33.333%;
	}

	.Ml4gc_lg {
		margin-left: calc(33.333% + 16px);
	}

	.W5gc_lg {
		width: calc(41.666% - 32px);
	}

	.W5gs_lg {
		width: 41.666%;
	}

	.Ml5gs_lg {
		margin-left: 41.666%;
	}

	.Ml5gc_lg {
		margin-left: calc(41.666% + 16px);
	}

	.W6gc_lg {
		width: calc(50% - 32px);
	}

	.W6gs_lg {
		width: 50%;
	}

	.Ml6gs_lg {
		margin-left: 50%;
	}

	.Ml6gc_lg {
		margin-left: calc(50% + 16px);
	}

	.W7gc_lg {
		width: calc(58.333% - 32px);
	}

	.W7gs_lg {
		width: 58.333%;
	}

	.Ml7gs_lg {
		margin-left: 58.333%;
	}

	.Ml7gc_lg {
		margin-left: calc(58.333% + 16px);
	}

	.W8gc_lg {
		width: calc(66.666% - 32px);
	}

	.W8gs_lg {
		width: 66.666%;
	}

	.Ml8gs_lg {
		margin-left: 66.666%;
	}

	.Ml8gc_lg {
		margin-left: calc(66.666% + 16px);
	}

	.W9gc_lg {
		width: calc(75% - 32px);
	}

	.W9gs_lg {
		width: 75%;
	}

	.Ml9gs_lg {
		margin-left: 75%;
	}

	.Ml9gc_lg {
		margin-left: calc(75% + 16px);
	}

	.W10gc_lg {
		width: calc(83.333% - 32px);
	}

	.W10gs_lg {
		width: 83.333%;
	}

	.Ml10gs_lg {
		margin-left: 83.333%;
	}

	.Ml10gc_lg {
		margin-left: calc(83.333% + 16px);
	}

	.W11gc_lg {
		width: calc(91.666% - 32px);
	}

	.W11gs_lg {
		width: 91.666%;
	}

	.W12gc_lg {
		width: calc(100% - 32px);
	}

	.W12gs_lg {
		width: 100%;
	}

	.Ml0gc_lg {
		margin-left: 16px;
	}

	.Ml0_lg {
		margin-left: 0;
	}

	.Mt4gg {
		margin-top: 4rem;
	}

	.Mb4gg {
		margin-bottom: 4rem;
	}

	.Mt3gg {
		margin-top: 3rem;
	}

	.Mb3gg {
		margin-bottom: 3rem;
	}

	.Mt2gg {
		margin-top: 2rem;
	}

	.Mb2gg {
		margin-bottom: 2rem;
	}

	.Mb1gg {
		margin-bottom: 1rem;
	}

	.Mb-2gg {
		margin-bottom: -32px;
	}

	.Ml-1gg {
		margin-left: -16px;
	}

	.Ml1gg {
		margin-left: 16px;
	}

	.Ml-a_lg {
		margin-left: auto;
	}

	.Mx-a_lg {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_lg {
		margin-left: 16px;
		margin-right: 16px;
	}

	.Mx0_lg {
		margin-left: 0;
		margin-right: 0;
	}

	.Px1gg {
		padding-right: 16px;
		padding-left: 16px;
	}
}

@media (min-width: 1168px) {
	.D-n_xl {
		display: none;
	}

	.D_xl {
		display: block;
	}

	.D-ib_xl {
		display: inline-block;
	}

	.D-f_xl {
		display: flex;
	}

	.D-if_xl {
		display: inline-flex;
	}

	.mJc-fs_xl {
		justify-content: flex-start;
		text-align: left;
	}

	.mJc-c_xl {
		justify-content: center;
		text-align: center;
	}

	.mJc-fe_xl {
		justify-content: flex-end;
		text-align: right;
	}

	.mJc-sa_xl {
		justify-content: space-around;
		text-align: center;
	}

	.mJc-sb_xl {
		justify-content: space-between;
		text-align: center;
	}

	.W-a_xl {
		width: auto;
	}

	.W1gc_xl {
		width: calc(8.333% - 32px);
	}

	.W1gs_xl {
		width: 8.333%;
	}

	.Ml1gs_xl {
		margin-left: 8.333%;
	}

	.Ml1gc_xl {
		margin-left: calc(8.333% + 16px);
	}

	.W2gc_xl {
		width: calc(16.666% - 32px);
	}

	.W2gs_xl {
		width: 16.666%;
	}

	.Ml2gs_xl {
		margin-left: 16.666%;
	}

	.Ml2gc_xl {
		margin-left: calc(16.666% + 16px);
	}

	.W3gc_xl {
		width: calc(25% - 32px);
	}

	.W3gs_xl {
		width: 25%;
	}

	.Ml3gs_xl {
		margin-left: 25%;
	}

	.Ml3gc_xl {
		margin-left: calc(25% + 16px);
	}

	.W4gc_xl {
		width: calc(33.333% - 32px);
	}

	.W4gs_xl {
		width: 33.333%;
	}

	.Ml4gs_xl {
		margin-left: 33.333%;
	}

	.Ml4gc_xl {
		margin-left: calc(33.333% + 16px);
	}

	.W5gc_xl {
		width: calc(41.666% - 32px);
	}

	.W5gs_xl {
		width: 41.666%;
	}

	.Ml5gs_xl {
		margin-left: 41.666%;
	}

	.Ml5gc_xl {
		margin-left: calc(41.666% + 16px);
	}

	.W6gc_xl {
		width: calc(50% - 32px);
	}

	.W6gs_xl {
		width: 50%;
	}

	.Ml6gs_xl {
		margin-left: 50%;
	}

	.Ml6gc_xl {
		margin-left: calc(50% + 16px);
	}

	.W7gc_xl {
		width: calc(58.333% - 32px);
	}

	.W7gs_xl {
		width: 58.333%;
	}

	.Ml7gs_xl {
		margin-left: 58.333%;
	}

	.Ml7gc_xl {
		margin-left: calc(58.333% + 16px);
	}

	.W8gc_xl {
		width: calc(66.666% - 32px);
	}

	.W8gs_xl {
		width: 66.666%;
	}

	.Ml8gs_xl {
		margin-left: 66.666%;
	}

	.Ml8gc_xl {
		margin-left: calc(66.666% + 16px);
	}

	.W9gc_xl {
		width: calc(75% - 32px);
	}

	.W9gs_xl {
		width: 75%;
	}

	.Ml9gs_xl {
		margin-left: 75%;
	}

	.Ml9gc_xl {
		margin-left: calc(75% + 16px);
	}

	.W10gc_xl {
		width: calc(83.333% - 32px);
	}

	.W10gs_xl {
		width: 83.333%;
	}

	.Ml10gs_xl {
		margin-left: 83.333%;
	}

	.Ml10gc_xl {
		margin-left: calc(83.333% + 16px);
	}

	.W11gc_xl {
		width: calc(91.666% - 32px);
	}

	.W11gs_xl {
		width: 91.666%;
	}

	.W12gc_xl {
		width: calc(100% - 32px);
	}

	.W12gs_xl {
		width: 100%;
	}

	.Ml0gc_xl {
		margin-left: 16px;
	}

	.Ml0_xl {
		margin-left: 0;
	}

	.Ml-a_xl {
		margin-left: auto;
	}

	.Mx-a_xl {
		margin-left: auto;
		margin-right: auto;
	}

	.Mx1gg_xl {
		margin-left: 16px;
		margin-right: 16px;
	}

	.Mx0_xl {
		margin-left: 0;
		margin-right: 0;
	}

	.Dir-r_xl {
		direction: rtl;
	}
}

@media (min-width: 520px) and (max-width: 759px) {
	.Dir-r_sm {
		direction: rtl;
	}
}

@media (min-width: 760px) and (max-width: 959px) {
	.Dir-r_md {
		direction: rtl;
	}
}

@media (min-width: 960px) and (max-width: 1167px) {
	.Dir-r_lg {
		direction: rtl;
	}
}