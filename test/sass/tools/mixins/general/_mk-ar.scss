@use 'sass-true' as *;
@use 'sass:map';
@use 'sass:list';
@use 'tools' as mlu;

mlu.$at-rules-cfg: map.set(mlu.$at-rules-cfg, 'keywords', 'bp2', ('md' 'lg'));

@include describe('tools/mixins/general') {
	@include describe('mk-ar') {
		@include it('make only media queries from breakpoints') {
			@include assert() {
				@include output() {
					@include mlu.mk-ar('xs:sm,md:lg,xl') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@media (max-width: (mlu.bp(sm) - 1px)),(min-width: mlu.bp(md)) and (max-width: (mlu.bp(lg) - 1px)),(min-width: mlu.bp(xl)){
						width: 50%;
					}
				}
			}
		}

		@include it('make only media queries from abbreviations') {
			@include assert('complex') {
				@include output() {
					@include mlu.mk-ar('@:prn:-xl:dm,pn-c:w>=90r') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@media print and (min-width: mlu.bp(xl)) and (display-mode: fullscreen),(pointer: coarse) and (min-width: 90rem) {
						width: 50%;
					}
				}
			}
		}

		@include it('make only feature queries from abbreviations') {
			@include assert('simple') {
				@include output(false) {
					@include mlu.mk-ar('@s', ('name': 'D', 'value': '-ig')) using ($ar) {
						.D-ig {
							display: inline-grid;
						}
					}
				}

				@include expect(false) {
					@supports (display: inline-grid) {
						.D-ig {
							display: inline-grid;
						}
					}
				}
			}

			@include assert('complex') {
				@include output() {
					@include mlu.mk-ar('@s:pos-sk,h100vh') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@supports (position: sticky) or (height: 100vh) {
						width: 50%;
					}
				}
			}
		}

		@include it('make at-rules from abbreviations and breakpoints') {
			@include assert() {
				@include output() {
					@include mlu.mk-ar('@s:ar4/3@:dm') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@supports (aspect-ratio: 4/3) {
						@media (display-mode: fullscreen) {
							width: 50%;
						}
					}
				}
			}

			@include assert() {
				@include output() {
					@include mlu.mk-ar('sm@s:pos-sk') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@media (min-width: mlu.bp(sm)) {
						@supports (position: sticky) {
							width: 50%;
						}
					}
				}
			}

			@include assert() {
				@include output() {
					@include mlu.mk-ar(mlu.$bp-all + '@s:d-ig') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@each $bp, $value in mlu.$breakpoints {
						@media (min-width: $value) {
							@supports (display: inline-grid) {
								width: 50%;
							}
						}
					}
				}
			}

			@include assert() {
				@include output() {
					@include mlu.mk-ar('bp2@s:d-ig') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@each $value in map.get(mlu.$at-rules-cfg, 'keywords', 'bp2') {
						@media (min-width: mlu.bp($value)) {
							@supports (display: inline-grid) {
								width: 50%;
							}
						}
					}
				}
			}

			// no tests for media with breakpoints(like `md@:ori`) because Sass compiler
			// in test runner merges expected nested media queries and test always failed
		}

		@include it('make several at-rules from list') {
			@include assert() {
				@include output() {
					@include mlu.mk-ar('lg @:scr @s:d-ig') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@media (min-width: mlu.bp(lg)) {
						width: 50%;
					}

					@media screen {
						width: 50%;
					}

					@supports (display: inline-grid) {
						width: 50%;
					}
				}
			}

			@include assert() {
				@include output() {
					@include mlu.mk-ar(mlu.$bp-all + ' @s:d-ig') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@supports (display: inline-grid) {
						width: 50%;
					}

					@each $bp, $value in mlu.$breakpoints {
						@media (min-width: $value) {
							width: 50%;
						}
					}
				}
			}
		}

		@include it('make util with at-rules') {
			@include assert() {
				@include output(false) {
					@include mlu.mk-ar('lg @:scr') using ($ar) {
						.#{mlu.str-escape($ar)}_W50p {
							width: 50%;
						}
					}
				}

				@include expect(false) {
					@media (min-width: mlu.bp(lg)) {
						.lg_W50p {
							width: 50%;
						}
					}

					@media screen {
						.\@\:scr_W50p {
							width: 50%;
						}
					}
				}
			}
		}

		@include it('make at-rules with custom tokens') {
			mlu.$tASv: '=';
			mlu.$tANv: '=';
			mlu.$tAOr: 'OR';
			mlu.$tAAnd: '&';
			mlu.$tACs: '#';
			mlu.$tAAr: '%';
			mlu.$tATu: '$';
			mlu.$tANot: '^';

			mlu.$at-rules-cfg: map.set(
				mlu.$at-rules-cfg,
				'abbr-separators',
				list.set-nth(map.get(mlu.$at-rules-cfg, 'abbr-separators'), 1, '=')
			);

			@include assert() {
				@include output() {
					@include mlu.mk-ar('%s&ar=4/3OR^$=%&prn&dm=s&#xlOR#testou', ('name': 'D', 'value': '=ig')) using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@supports (aspect-ratio: 4/3) or (not (display: inline-grid)) {
						@media print and (display-mode: standalone) and (min-width: mlu.bp(xl)), (orientation: landscape) and (min-height: 20rem) {
							width: 50%;
						}
					}
				}
			}

			@include assert() {
				@include output() {
					@include mlu.mk-ar('xs&smORmd&lgORxl%s&pos=sk') using ($ar) {
						width: 50%;
					}
				}

				@include expect() {
					@media (max-width: (mlu.bp(sm) - 1px)),(min-width: mlu.bp(md)) and (max-width: (mlu.bp(lg) - 1px)),(min-width: mlu.bp(xl)) {
						@supports (position: sticky) {
							width: 50%;
						}
					}
				}
			}
		}

	}
}
