@use 'sass-true' as *;
@use 'tools' as ml;
@use 'sass:map';
@use 'sass:list';

ml.$utils-groups: map.deep-merge(
	ml.$utils-groups,
	(
		'tSpaces': (
			'M', 'P',
		),
		'tSizes': (
			'members': ('W_a StOnly', 'H',),
			'components': 'G_af',
		),
		'TtGroup': (
			'members': 'Tt',
			'components': 'G_fw',
		),
		'tColors': (
			'C', 'Bgc_h StOnly',
		),
	),
);

ml.$utils-db: map.deep-merge(
	ml.$utils-db,
	('utils':
	(
		'registry': (
			'Tt': (
				'components': 'Tt_af',
			),
		),
	)
	)
);

@include describe('tools/mixins/high/utils') {
	@include describe('mk-utils-group') {
		@include it('make utils group') {
			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'tSpaces', (
						'xs0': 100px,
						150: null
					));
				}

				@include expect(false) {
					.M-xs0 {
						margin: 100px;
					}

					.M150 {
						margin: 150px;
					}

					.P-xs0 {
						padding: 100px;
					}

					.P150 {
						padding: 150px;
					}
				}
			}

			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'ArOnly xl_tSpaces', (
							100, '150_af StOnly',
					));
				}

				@include expect(false) {
					@media (min-width: ml.bp(xl)) {
						.xl_M100 {
							margin: 100px;
						}
					}

					.M150_af::after {
						margin: 150px;
					}

					@media (min-width: ml.bp(xl)) {
						.xl_P100 {
							padding: 100px;
						}
					}

					.P150_af::after {
						padding: 150px;
					}
				}
			}
		}

		@include it('make group of utils that have component') {
			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'ArOnly xl_tColors', (
						red, 'blue_f StOnly',
					));
				}

				@include expect(false) {
					@media (min-width: ml.bp(xl)) {
						.xl_C-red {
							color: red;
						}
					}

					.C-blue_f:focus {
						color: blue;
					}

					.Bgc-red_h:hover {
						background-color: red;
					}

					.Bgc-blue_f:focus {
						background-color: blue;
					}
				}
			}
		}

		@include it('make utils group with passed util components') {
			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'tColors',
						(red, 'green_a StOnly'),
						(
							'at-rules': 'ArOnly xl',
							'important': true,
						),
					);
				}

				@include expect(false) {
					@media (min-width: ml.bp(xl)) {
						.xl_C-red\! {
							color: red !important;
						}
					}

					.C-green_a:active {
						color: green;
					}

					.Bgc-red_h:hover {
						background-color: red;
					}

					.Bgc-green_a:active {
						background-color: green;
					}
				}
			}
		}

		@include it('make group with bound components') {
			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'tSizes', (
						150
					));
				}

				@include expect(false) {
					.W150 {
						width: 150px;
					}

					.W150_af::after {
						width: 150px;
					}

					.H150 {
						height: 150px;
					}

					.H150_af::after {
						height: 150px;
					}
				}
			}

			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'tSizes', (
						'20r_h'
					));
				}

				@include expect(false) {
					.W20r {
						width: 20rem;
					}

					.W20r_af::after {
						width: 20rem;
					}

					.H20r {
						height: 20rem;
					}

					.H20r_af::after {
						height: 20rem;
					}
				}
			}

			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'tSizes_f', (
						30r
					));
				}

				@include expect(false) {
					.W30r {
						width: 30rem;
					}

					.W30r_af::after {
						width: 30rem;
					}

					.H30r {
						height: 30rem;
					}

					.H30r_af::after {
						height: 30rem;
					}
				}
			}
		}

		@include it('cases of ignore bound components of group') {
			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'TtGroup', '',
					);

					@include ml.mk-utils-group(
						'TtGroup_=>*', 'c',
					);
				}

				@include expect(false) {
					.Tt {
						text-transform: uppercase;
					}

					.Tt_af::after {
						text-transform: uppercase;
					}

					.Tt-c {
						text-transform: capitalize;
					}

					.Tt-c_af::after {
						text-transform: capitalize;
					}
				}
			}

			@include assert() {
				@include output(false) {
					@include ml.mk-utils-group(
						'tSizes_fw StOnly', 20r, (), false
					);
				}

				@include expect(false) {
					.W20r_a:active {
						width: 20rem;
					}

					.H20r_fw:focus-within {
						height: 20rem;
					}
				}
			}
		}
	}
}
