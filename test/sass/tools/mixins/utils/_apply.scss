@use 'sass:map';
@use 'sass-true' as *;
@use 'tools' as ml;

ml.$utils-db: map.deep-merge(
	ml.$utils-db,
	('utils':
	(
		'registry': (
			'Txt': (
				'components': 'Txt_af',
			),
		),
	)
	)
);

@include describe('tools/mixins/high/utils') {
	@include describe('apply') {
		@include it('apply utils to rule') {
			@include assert() {
				@include output(false) {
					.card {
						display: block;

						@include ml.apply(
							'P2su Fns1r'
						);
					}
				}

				@include expect(false) {
					.card {
						display: block;
					}

					.card {
						padding: 0.5rem 8px;
					}

					.card {
						font-size: 1rem;
					}
				}
			}
		}

		@include it('apply utils with states and at-rules') {
			@include assert() {
				@include output(false) {
					.card {
						@include ml.apply(
							'Fns1r_h ^one_Bgc-$bgColor?#c06_h'
						);
					}
				}

				@include expect(false) {
					.card:hover {
						font-size: 1rem;
					}

					.-Ctx-one .card:hover {
						background-color: var(--ml-bgColor, #c06);
					}
				}
			}

			@include assert() {
				@include output(false) {
					.card {
						@include ml.apply(
							'xl_P2su'
							'xl_C#fff!_h,f'
							'@m:pr_^new_O80p_h',
							(),
							true
						);
					}
				}

				@include expect(false) {
					@media (min-width: ml.bp(xl)) {
						.card {
							padding: 0.5rem 8px;
						}
					}

					@media (min-width: ml.bp(xl)) {
						.card:hover,
						.card:focus {
							color: #fff !important;
						}
					}

					@media print {
						.-Ctx-new .card:hover {
							opacity: 0.8;
						}
					}
				}
			}
		}

		@include it('use utils components from arguments') {
			@include assert() {
				@include output(false) {
					.card {
						@include ml.apply(
							'xl_P2su'
							'Lnh=2_af'
							Fns1r,
							('important': true, 'post-states': null),
							true
						);
					}
				}

				@include expect(false) {
					@media (min-width: ml.bp(xl)) {
						.card {
							padding: 0.5rem 8px !important;
						}
					}

					.card {
						line-height: 2 !important;
					}

					.card {
						font-size: 1rem !important;
					}
				}
			}
		}

		@include it('top-level apply') {
			@include assert() {
				@include output(false) {
					@include ml.apply(
						'xl_P2su Lnh2r!_af'
					);
				}

				@include expect(false) {
					@media (min-width: ml.bp(xl)) {
						.xl_P2su {
							padding: 0.5rem 8px;
						}
					}

					.Lnh2r\!_af::after {
						line-height: 2rem !important;
					}
				}
			}
		}

		@include it('apply util with bound components') {
			@include assert() {
				@include output(false) {
					.testou {
						@include ml.apply(
							'Txt-c Txt_h'
						);
					}
				}

				@include expect(false) {
					.testou {
						text-transform: capitalize;
					}

					.testou:hover {
						text-transform: uppercase;
					}
				}
			}
		}
	}
}
