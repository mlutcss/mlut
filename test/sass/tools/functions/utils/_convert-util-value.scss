@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass-true' as *;
@use 'tools' as mlu;

mlu.$utils-data: map.deep-merge(
	mlu.$utils-data,
	('utils':
	(
		'registry': (
			'Gc': (
				'properties': grid-column,
				'value-type': ('unitless', 'css-kw'),
				'multi-list-separator': '/',
			),
		),
		'variables': (
			'testVar': 1989px,
			'trsduDef': 0.3s,
		),
	)
	)
);

@include describe('tools/functions/utils/') {
	@include describe('convert-util-value') {
		$-tests: (
			'converts number': (
				(200, 'W'): 200px,
				('=200', 'W'): 200,
				('20vw', 'W'): 20vw,
				(300, 'Fw'): 300,
				(2su, 'Fz'): mlu.sur(2),
				(2su, 'P'): mlu.sur(2) mlu.su(2),
				(200x, 'W'): 200ex,
				('16/9', 'Ar'): string.unquote('16/9'),
			),
			'converts global CSS keyword': (
				('a', 'W'): auto,
				('=a', 'W'): a,
			),
			'converts variables': (
				('$testVar', 'W'): map.get(mlu.$utils-data, 'utils', 'variables', 'testVar'),
				('$undefVar', 'W'): string.unquote('ERROR: Undefined variable: `$undefVar`'),
			),
			'converts custom property': (
				('-css-var', 'W'): var(--mlu-css-var),
			),
			'converts property abbreviation': (
				('bgc', 'Trs'): background-color,
				('=bgc', 'Trs'): bgc,
			),
			'converts values list': (
				('1r:2:5p', 'Bdrs'): 1rem 2px 5%,
				('1r:=10x', 'M'): 1rem 10x,
				('3su:16:a', 'M'): mlu.su(3) 16px auto,
				('c:-trsdu', 'Trs'): color var(--mlu-trsdu),
			),
			'converts values multi list': (
				('1r:2/5p', 'Bdrs'): list.slash(1rem 2px, 5%),
				('bdc:3s,c:$trsduDef', 'Trs'): (border-color 3s, color 0.3s),
				('3/5', 'Gc'): list.slash(3, 5),
			),
		);

		@each $test, $data in $-tests {
			@include it($test) {
				@each $args, $expect in $data {
					@include assert-equal(
						mlu.convert-util-value($args...),
						$expect,
						$inspect: true,
					);
				}
			}
		}
	}
}
