@use 'sass-true' as *;
@use 'tools/functions/general' as mlu;

$test-list: (0, 1, 2, 3);

@include describe('tools/functions/general') {
	@include describe('remove-nth') {
		@include it('removes element from the list by index') {
			@include assert-equal(
				mlu.remove-nth($test-list, 3),
				0 1 3,
				$inspect: true,
			);

			@include assert-equal(
				mlu.remove-nth($test-list, 8),
				0 1 2 3,
				$inspect: true,
			);
		}

		@include it('wrong type of index argument') {
			@include assert-equal(
				mlu.remove-nth($test-list, '3'),
				'ERROR: Wrong type of argument $index: `string`. Expected `number`',
			);
		}
	}

	@include describe('str-split') {
		@include it('split string into list with delimiter') {
			@include assert-equal(
				mlu.str-split('text__with__double__underscores', '__'),
				'text' 'with' 'double' 'underscores',
			);

			@include assert-equal(
				mlu.str-split(' one two  3', ' '),
				'' 'one' 'two' '' '3',
			);
		}

		@include it('split string into list without delimiter') {
			@include assert-equal(
				mlu.str-split('testou'),
				't' 'e' 's' 't' 'o' 'u',
			);
		}
	}

	@include describe('str-trim') {
		@include it('trim trailing and leading whitespaces') {
			@include assert-equal(
				mlu.str-trim('  testou   '),
				'testou',
			);

			@include assert-equal(
				mlu.str-trim('   '),
				'',
			);
		}
	}

	@include describe('str-digit-index') {
		@include it('find the first index of digit in string') {
			@include assert-equal(
				mlu.str-digit-index('Mb55'),
				3,
			);
		}

		@include it('wrong type of argument') {
			@include assert-equal(
				mlu.str-digit-index((55)),
				'ERROR: Wrong type of argument $str: `number`. Expected `string`',
			);
		}

		@include it('digits not found') {
			@include assert-equal(
				mlu.str-digit-index('Mt-a'),
				null,
			);
		}
	}

	@include describe('str-ucfirst') {
		@include it('converts the first letter to uppercase') {
			@include assert-equal(
				mlu.str-ucfirst('fxg1'),
				'Fxg1',
			);
		}

		@include it('wrong type of argument') {
			@include assert-equal(
				mlu.str-ucfirst(1),
				'ERROR: Wrong type of argument $str: `number`. Expected `string`',
			);
		}
	}

	@include describe('str-replace') {
		@include it('replaces substring by another substring') {
			@include assert-equal(
				mlu.str-replace('@:prn BpAll@s BpAll', 'BpAll', 'lg'),
				'@:prn lg@s BpAll',
			);

			@include assert-equal(
				mlu.str-replace('BpAll@s BpAll', 'All'),
				'Bp@s BpAll',
			);
		}
	}

	@include describe('str-replace-all') {
		@include it('replaces all the entries of substring by another substring') {
			@include assert-equal(
				mlu.str-replace-all('BpAll sm@:prn sm@s', 'sm', 'smx'),
				'BpAll smx@:prn smx@s',
			);

			@include assert-equal(
				mlu.str-replace-all('sm@:prn sm@s', 'sm'),
				'@:prn @s',
			);
		}
	}

	@include describe('str-escape') {
		@include it('escape special characters in value') {
			@include assert-equal(
				mlu.str-escape(':^:&::^2:/+a.link:h'),
				'\\:\\^\\:\\&\\:\\:\\^2\\:\\/\\+a\\.link\\:h',
			);

			@include assert-equal(
				mlu.str-escape(1.5),
				'1\\.5',
			);
		}
	}

	@include describe('str-starts') {
		@include it('checks whether the string starts with the substring') {
			@include assert-equal(
				mlu.str-starts('@:prn', '@:'),
				true,
			);

			@include assert-equal(
				mlu.str-starts('BpAll@:scr', '@:'),
				false,
			);

			@include assert-equal(
				mlu.str-starts('xs', 'BpAll'),
				false,
			);
		}
	}
}
