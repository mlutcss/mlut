@use 'sass:map';
@use 'sass-true' as *;
@use 'tools' as mlu;

@include describe('tools/functions/at-rules/') {
	@include describe('convert-feature-abbr') {
		@include it('converts abbr without separator') {
			@include assert-equal(
				mlu.convert-feature-abbr('Ov'),
				'(overflow)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('ori', 'media'),
				'(orientation: landscape)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr(''),
				'ERROR: Passed empty string',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('ic'),
				'ERROR: Invalid feature abbreviation: `ic`. `ic` is not defined in `utils` section of $utils-data map',
			);
		}

		@include it('converts abbr with value from map') {
			@include assert-equal(
				mlu.convert-feature-abbr('Pos-sk'),
				'(position: sticky)',
			);
		}

		@include it('converts abbr with converted value') {
			@include assert-equal(
				mlu.convert-feature-abbr('M-a'),
				'(margin: auto)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('Fz2r'),
				'(font-size: 2rem)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('Lh1'),
				'(line-height: 1)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('Z-99'),
				'(z-index: -99)',
			);
		}

		@include it('converts abbr with range syntax') {
			@include assert-equal(
				mlu.convert-feature-abbr('W<100'),
				'(max-width: 99px)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('H>20r'),
				'(min-height: 20.06rem)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('rsl>1x', 'media'),
				'(min-resolution: 1.01dppx)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('mn<50', 'media'),
				'(max-monochrome: 49)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('W>=60e'),
				'(min-width: 60em)',
			);

			@include assert-equal(
				mlu.convert-feature-abbr('H<=100su'),
				'(max-height: 400px)',
			);
		}
	}
}
