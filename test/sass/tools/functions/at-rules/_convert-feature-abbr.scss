@use 'sass:map';
@use 'sass-true' as *;
@use 'src/sass/tools' as ml;

ml.$utils-db: map.deep-merge(
	ml.$utils-db,
	('utils':
	(
		'registry': (
			'Prop': (
				'properties': (
					--prop,
					--second-prop,
				),
			),
	),
	),
		'common': (
			'keywords': (
				'global': (
					'gHXl': 800px,
				),
			),
		),
	)
);

@include describe('tools/functions/high/at-rules/') {
	@include describe('convert-feature-abbr') {
		@include it('converts abbr without separator') {
			@include assert-equal(
				ml.convert-feature-abbr('P'),
				'(padding)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('o', 'media'),
				'(orientation: landscape)',
			);

			@include assert-equal(
				ml.convert-feature-abbr(''),
				'ERROR: Passed empty string',
			);

			@include assert-equal(
				ml.convert-feature-abbr('ic'),
				'ERROR: Invalid feature abbreviation: `ic`. `ic` is not defined in `utils` section of $utils-db map',
			);
		}

		@include it('converts abbr with value from map') {
			@include assert-equal(
				ml.convert-feature-abbr('Ps-sc'),
				'(position: sticky)',
			);
		}

		@include it('converts abbr with converted value') {
			@include assert-equal(
				ml.convert-feature-abbr('M-a'),
				'(margin: auto)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('Fns2r'),
				'(font-size: 2rem)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('Flg1'),
				'(flex-grow: 1)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('Zi-99'),
				'(z-index: -99)',
			);
		}

		@include it('converts abbr with range syntax') {
			@include assert-equal(
				ml.convert-feature-abbr('W<100'),
				'(max-width: 99px)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('H>20r'),
				'(min-height: 20.06rem)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('h>gHXl', 'media'),
				'(min-height: 801px)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('h<gSm', 'media'),
				'(max-height: 519px)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('r>1x', 'media'),
				'(min-resolution: 1.01dppx)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('m<50', 'media'),
				'(max-monochrome: 49)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('W>=60e'),
				'(min-width: 60em)',
			);

			@include assert-equal(
				ml.convert-feature-abbr('H<=100u'),
				'(max-height: 25rem)',
			);
		}

		@include it('converts abbr of util with several properties') {
			@include assert-equal(
				ml.convert-feature-abbr('Prop1gg'),
				'(--prop: #{ml.gg(1)})',
			);
		}
	}
}
