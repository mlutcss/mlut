@use 'sass:map';
@use 'sass-true' as *;
@use 'tools' as ml;

ml.$at-rules-db: map.set(
	ml.$at-rules-db, 'media', 'custom', 'testou', '(orientation: landscape) and (min-height: 20rem)'
);

@include describe('tools/functions/high/at-rules/') {
	@include describe('convert-ar-media') {
		@include it('converts media types') {
			@include assert-equal(
				ml.convert-ar-media('pr'),
				'print',
			);
		}

		@include it('converts custom mq') {
			@include assert-equal(
				ml.convert-ar-media('-testou'),
				'(orientation: landscape) and (min-height: 20rem)',
			);

			@include assert-equal(
				ml.convert-ar-media('-undefined'),
				'ERROR: Undefined custom media query: `-undefined`',
			);
		}

		@include it('converts media features') {
			@include assert-equal(
				ml.convert-ar-media('anyh'),
				'(any-hover)',
			);

			@include assert-equal(
				ml.convert-ar-media('cg-p'),
				'(color-gamut: p3)',
			);
		}

		@include it('converts complex mq') {
			@include assert-equal(
				ml.convert-ar-media('s:fc'),
				'screen and (forced-colors)',
			);

			@include assert-equal(
				ml.convert-ar-media('pr,hv'),
				'print, (hover)',
			);

			@include assert-equal(
				ml.convert-ar-media('pr:h>gSm:dm,p-c:w>=90r,c<256:w<gSm'),
				'print and (min-height: #{ml.bp(sm) + 1}) and (display-mode: fullscreen), (pointer: coarse) and (min-width: 90rem), (max-color: 255) and (max-width: #{ml.bp(sm) - 1px})',
			);
		}
	}
}
