/* This comment needed for add @charset "utf-8"; in source because sass compiler erased this at-rule without it: утф8 */

/*
Getting started

There are 2 ways to start using MLUT:

- assembled distributive
- developer toolkit

Weight: 0

Styleguide: start
*/

/*
Installation

### [Git](https://github.com/mr150/mlut) ###
```
git clone https://github.com/mr150/mlut.git
```

### NPM ###
```
npm i mlut -D
```
### Download ###
Download assembled CSS from [here](https://unpkg.com/mlut@latest/dist/css/mlut.min.css) or link it from A-ERP server:
```html
<link href="http://a-erp.com/data/181219/1643392985173395.css" rel="stylesheet">
```

### CDN ###
```html
<link href="https://unpkg.com/mlut@latest/dist/css/mlut.min.css" rel="stylesheet">
```

Weight: 0

Styleguide: start.install
*/

/*
Usage

### HTML ###
Before starting work, make sure you have the correct HTML5 doctype:
```html
<!DOCTYPE html>
```
and the responsive viewport meta tag:
```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

### Distributive ###
You can get assembled MLUT code and include it to your project. There are some ways to get a distributive.

- if used `git clone`, files are located in the `dist/` folder
- if used `npm`, files are in `node_modules/mlut/dist/`

Add the file to your page like here:
```html
<link href="css/mlut.min.css" rel="stylesheet">
```
And just add MLUT classes to markup:
```html
<div class="row D-f">
	<div class="row__col W3gc_md">
		<h3>Simple text</h3>
```
Try [examples](section-examples.html) with ready HTML.

### Toolkit ###
To use all MLUT features you need an assembly. There are 3 ways:

- If you don't want to develop MLUT, it's recommended to use [MLUT project template](https://github.com/mr150/mlut-project)
- [Clone](#kssref-start-install) MLUT repo and use configured assembly from it
- Setup assembly yourself use [technologies list](./)

#### Assembly ####
If you cloned git repo:
```
npm i
```
Run dev server with live reload, code linting and documentation building:
```
npm run dev
```
or
```
gulp
```
Build without dev server:
```
npm run build
```

#### Styles ####
Once the assembly is configured, import sass tools and settings to your `style.scss`
```scss
@import "includes/settings";
@import "includes/functions";
@import "includes/mixins";
```
Then you can import blocks and utilities how it is done in the `src/sass/mlut.scss` to get the standard build. Or you can import only what you need:
```scss
@import "../core-blocks/wrapper/wrapper";
@import "../core-utils/display";

@include mlu-bpm($mlu-bp-md) {
	.input--common {
		padding: mlu-px2em(16px) 16px;
	}
}
```

Weight: 1

Styleguide: start.usage
*/

/*
Basic concepts

Before reading the documentation, learn MLUT basic concepts.

Weight: 1

Styleguide: concepts
*/

/*
DOM node

HTML-element. Any tag on the page. For example:
```html
<p>This is DOM node</p>
<div>I am DOM node too</div>
```

Weight: 0

Styleguide: concepts.dom_node
*/

/*
Block

Independent page component that can be reused. Examples: [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper), [row](section-core-blocks.html#kssref-core-blocks-row).

Weight: 1

Styleguide: concepts.block
*/

/*
Element

A part of a block that cannot be used without it.

The names of the elements are constructed according to the scheme: `block-name__element-name`. The element name is separated from the block name by two underscores '__'.

Note that the *element* and the *HTML-element* are different concepts.

Examples: [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col),  [ratio-block__content](section-core-blocks.html#kssref-core-blocks-ratio-block-ratio-block__content).

Weight: 2

Styleguide: concepts.element
*/

/*
Modifier

A entity that defines the appearance and behavior of a block or an element.

The name of the modifier is separated from the name of the block or element by two hyphens `--`.

Examples: [ratio-block--4x3](section-core-blocks.html#kssref-core-blocks-ratio-block), `ratio-block--1x1`.

A modifier cannot be used in isolation from a modifiable block or element.

Weight: 3

Styleguide: concepts.modifier
*/

/*
BEM entity

Blocks, elements, and modifiers are all called BEM entities. For now, BEM entities in MLUT are represented as CSS classes.

Weight: 4

Styleguide: concepts.bem_entity
*/

/*
Breakpoint

The width of the screen on which the styles change. In MLUT, the default breakpoints are:
* `xs` \- minimum width `0px-520px`
* `sm` \- horizontal orientation of smartphone `520px-760px`
* `md` \- small tablet `760px-960px`
* `lg` \- square monitor `960px-1168px`
* `xl` \- wide screen `>1168px`

Weight: 5

Styleguide: concepts.breakpoint
*/

/*
Utility

An entity that, depending on the parameters, does 1 action with the DOM node styles. Utilities change 1 CSS property or group of related properties.

Utility class names are formed according to the scheme:
1. optional pseudo-class or pseudo-element: `h` - hover, `af` - after etc. Separated from the utility name by underscore '_'.
1. utility name. Written with capital letter. Most utility names are [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations.
1. optional value. Valid are number, [abbreviations](https://docs.emmet.io/cheat-sheet/) and keywords. Values are set according to	[Emmet rules](https://docs.emmet.io/css-abbreviations/#supplying-values-with-units). Abbreviation and keywords are separated by a hyphen '-' from utility name.
1. optional breakpoint name: `sm`, `lg`, etc. Separated from the utility value by underscore '_'.

Utility class name example: `Tt`, `Mb2r`, `D-ib_sm`, `h_Bgc-main`.

There are some special abbreviations for color utilities:
* `t` - `transparent`
* `i` - `inherit`
* `cc` - `curentColor`

Utilities in MLUT are divided into *common* and *modified*.

* **Common** \- utilities that are named and work like CSS properties.
* **Modified** \- utilities that affect several CSS properties. The names of such utilities begin with 'm' prefix.

Weight: 6

Styleguide: concepts.utility
*/

/*
Layout

The relative layout of DOM nodes on the page.

Weight: 7

Styleguide: concepts.layout
*/

/*
Modular grid

Space on the page divided into a certain number of columns with gutters.

In MLUT on the `sm` breakpoint, the grid has 4 columns, on `md` and above - 12. This means that the grid divides the space into 4 equal parts on `sm` and 12 parts on `md` and above. These parts called *columns*. Columns are separated by indents which are called *gutters*.

The gutters have different widths at different breakpoints. From `xs` to `lg` gutter is 12px. From `lg` gutter is 16px.

You can set the [width](section-core-utils.html#kssref-core-utils-bxz-w) and [offset](section-core-utils.html#kssref-core-utils-margin-ml) for the layout parts in the grid units. These are units of measure that you can use for number values of utilities just like any other units in CSS. There are 3 types of grid units:
* **grid-columns** \- abbreviated `gc`. 1gc is width of 1 column. Grid-columns are mainly used with [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col).
* **grid-spans** \- `gs`. 1gs is width of 1 column with 2 gutters.
* **grid-gutters** \- `gg`. 1gg is width of 1 gutter.

Using the [grid-debug](section-core-blocks.html#kssref-core-blocks-grid-debug) block you can see the graphic display of the grid.

Modular grid are generated depending on this [settings](section-sass-tools.html#kssref-sass-tools-settings-grid).

Weight: 8

Styleguide: concepts.grid
*/

/*
Core blocks

Set of universal [blocks](section-concepts.html#kssref-concepts-block) for using on any project. Some blocks contain [elements](section-concepts.html#kssref-concepts-element) and [modifiers](section-concepts.html#kssref-concepts-modifier).

Core blocks don't contain, or almost don't contain styles such as colors, backgrounds, etc. Such styles are set on the 'theme' or 'design' layers. To style blocks or their elements, use utilities or modifiers such as `block--mod`.

Weight: 2

Styleguide: core-blocks
*/

/*
Core utilities

Set of utilities that can be used on any project.

Utilities are grouped by sections. Each section lists the standard utilities that come with the MLUT core. Modified utilities, utilities with more values and non-standard values are allocated in subsections.

In the description of the utilities, there may be a '**Parameters**' item in which the available values are listed. Instead of the utility value, the '`initial`' keyword may be specified. We will get this effect when using the utility with no value. The range of values can be specified as `0..3`.

If the property does not have a special value 'i' then 'i' value means `inherit`.

Some utilities responsive by design or have only responsive values. It will be indicated in the description like this: *Responsive*.

For some utilities, there is a description for non-developers.

Weight: 3

Styleguide: core-utils
*/

/*
Core styles

You can find their in `sass/base/`.

Weight: 4

Styleguide: core-styles
*/

/*
Sass tools

Available when using MLUT as a [toolkit](section-start.html#kssref-start-usage).

Weight: 5

Styleguide: sass-tools
*/

/*
Examples

Additional examples of core blocks, utilities, tools and ready-made components.

Weight: 6

Styleguide: examples
*/

// Other
//
// Styleguide: examples.other

/*
Settings

Grid settings, compilation flags, constants and more. All core settings are in the `sass/includes/_settings.scss`.

Styleguide: sass-tools.settings
*/

// Flags
//
// Flags for core compilation.
//
// $MLU-FLAG-EXTENDED = false - turn on additional features but increases distributive size. Type: bool.
// $MLU-FLAG-CALC-FALLBACK = false - turn on CSS `calc()` fallback for grid utils on `md+` breakpoints. Type: bool.
// $MLU-FLAG-COL-OFFSET = true - turn on generation grid columns offset [utils](section-core-utils.html#kssref-core-utils-margin-ml). Type: bool.
//
// Styleguide: sass-tools.settings.flags

$MLU-FLAG-EXTENDED: false !default;
$MLU-FLAG-CALC-FALLBACK: false !default;
$MLU-FLAG-COL-OFFSET: true !default;

// General
//
// Settings that affect the work of the mixins, functions and all toolkit.
//
// $MLU-BROWSER-FONT-SIZE = 16px - font size for converting [px to rem](section-sass-tools.html#kssref-sass-tools-functions-px2rem). 16px used because is default font size in settings of most browsers.
// $mlu-base-font-size = $MLU-BROWSER-FONT-SIZE - base font size on website. Is used for `rems` fallback in [row elements](section-core-blocks.html#kssref-core-blocks-row) and in [mlu-px2em](section-sass-tools.html#kssref-sass-tools-functions-px2em) default font size.
// $mlu-grid-default-cols = 12 - default columns count on large width screen (>960px).
// $mlu-main-directions = ("top", "right", "bottom", "left") - List with directions for css properties generation. It used in [mlu-generate-gutter](section-sass-tools.html#kssref-sass-tools-mixins-generate_gutter) mixin.
// $mlu-grid-gutter-fallback = 1.5% - Fallback for grid gutter's width if CSS `calc()` not supported
//
// Styleguide: sass-tools.settings.general

$MLU-BROWSER-FONT-SIZE: 16px !default;

$mlu-base-font-size: $MLU-BROWSER-FONT-SIZE !default;

$mlu-grid-default-cols: 12 !default;

$mlu-grid-gutter-fallback: 1.5% !default;

$mlu-main-directions: (
	"top",
	"right",
	"bottom",
	"left",
) !default;

// Blocks
//
// Settings affecting the styles of the core blocks.
//
// $mlu-wrapper-max-width = 1200px - [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper) `max-width`.
// $mlu-font-family - sans serif font stack contains default fonts on different OS.
// $mlu-font-family-mono - monospace font stack contains default fonts on different OS.
// $mlu-debug-col-color = #d15 - column color of [grid-debug](section-core-blocks.html#kssref-core-blocks-grid-debug) block.
// $mlu-debug-gutter-color = #336 - gutter color of [grid-debug](section-core-blocks.html#kssref-core-blocks-grid-debug) block.
//
// Styleguide: sass-tools.settings.blocks

$mlu-wrapper-max-width: 1200px !default;

// stylelint-disable
$mlu-font-family: (
	-apple-system,
	BlinkMacSystemFont,
	"Segoe UI",
	Roboto,
	Oxygen,
	Cantarell,
	Ubuntu,
	"Fira Sans",
	"Droid Sans",
	"Helvetica Neue",
	Arial,
	sans-serif
) !default;

$mlu-font-family-mono: (
	SFMono-Regular,
	Menlo,
	Monaco,
	Consolas,
	"Liberation Mono",
	"Courier New",
	monospace
) !default;
// stylelint-enable

$mlu-debug-col-color: #d15 !default;
$mlu-debug-gutter-color: #336 !default;

// Utilities
//
// Settings affecting the values and generation of the core utilities.
//
// $mlu-W-card = 288px - fixed width for cards. This is value for [W-card](section-core-utils.html#kssref-core-utils-bxz-w) utility.
// $mlu-My-range = 4 - count of [Mt](section-core-utils.html#kssref-core-utils-margin) and [Mb](section-core-utils.html#kssref-core-utils-margin) utilities.
// $mlu-Z-range = 4 - [z-index](section-core-utils.html#kssref-core-utils-pos-z) range. Counted from zero.
// $mlu-Z-max = 9999 - `z-index` max value.
//
// Styleguide: sass-tools.settings.utils

$mlu-W-card: 288px !default;

$mlu-My-range: 4 !default;

$mlu-Z-max: 9999 !default;
$mlu-Z-range: 4 !default;

// Grid
//
// Settings that affect the work of grid and indents.
//
// $mlu-breakpoints - map with main breakpoints. First breakpoint is `$mlu-bp-sm`.
// $mlu-grid-cols - columls count on breakpoints.
// $mlu-grid-gutters - map with grid gutters on breakpoints.
//
// Styleguide: sass-tools.settings.grid

// Breakpoints
//
// Name, value and columns count on breakpoint.
//
// $mlu-bp-xs = 0 - `xs`, 2
// $mlu-bp-sm = 520px - `sm`, 4
// $mlu-bp-md = 760px - `md`, 12
// $mlu-bp-lg = 960px - `lg`, 12
// $mlu-bp-xl = 1168px - `xl`, 12
//
// Styleguide: sass-tools.settings.grid.breakpoints

$mlu-bp-xs: "xs" !default;
$mlu-bp-sm: "sm" !default;
$mlu-bp-md: "md" !default;
$mlu-bp-lg: "lg" !default;
$mlu-bp-xl: "xl" !default;

$mlu-breakpoints: (
	$mlu-bp-sm: 520px,
	$mlu-bp-md: 760px,
	$mlu-bp-lg: 960px,
	$mlu-bp-xl: 1168px,
) !default;

$mlu-grid-cols: (
	$mlu-bp-sm: 4,
	$mlu-bp-md: 12,
	$mlu-bp-lg: $mlu-grid-default-cols,
	$mlu-bp-xl: $mlu-grid-default-cols,
) !default;

// Gutters
//
// Gutters value on breakpoints. Gutter on `xs` equal gutter on `sm`.
//
// $mlu-gtr-sm - 12px
// $mlu-gtr-md - 12px
// $mlu-gtr-lg - 16px
// $mlu-gtr-xl - 16px
//
// Styleguide: sass-tools.settings.grid.gutters

$mlu-gtr-sm: 12px !default;
$mlu-gtr-md: $mlu-gtr-sm !default;
$mlu-gtr-lg: 16px !default;
$mlu-gtr-xl: $mlu-gtr-lg !default;

$mlu-grid-gutters: (
	$mlu-bp-sm: $mlu-gtr-sm,
	$mlu-bp-md: $mlu-gtr-md,
	$mlu-bp-lg: $mlu-gtr-lg,
	$mlu-bp-xl: $mlu-gtr-xl,
) !default;
