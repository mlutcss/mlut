/// Get breakpoint from $mlu-breakpoints map

@function mlu-breakpoint($name, $error-handler: 1) {
	@if map-has-key($mlu-breakpoints, $name) or $error-handler == 0 {
		@return map-get($mlu-breakpoints, $name);
	}

	@error "Invalid breakpoint name - '#{$name}' in mlu-breakpoint. '#{$name}' is not defined in $mlu-breakpoints";
}

/// Get next breakpoint. By default return value in px 
/// but can return name if use function wrapper
/// 'mlu-breakpoint-next-name'.
/// If pass last breakpoint it return 0.
/// If call without args it return first breakpoint

@function mlu-breakpoint-next($bp: 0, $data-type: "value") {
	@if $bp == 0 or map-has-key($mlu-breakpoints, $bp) {
		$bp-keys: map-keys($mlu-breakpoints);
		$bp-index: if($bp != 0, index($bp-keys, $bp), 0);

		@if $data-type == "name" {
			@return if($bp-index < length($bp-keys), nth(map-keys($mlu-breakpoints), $bp-index + 1), 0);
		} @else {
			@return if($bp-index < length($bp-keys), nth(map-values($mlu-breakpoints), $bp-index + 1), 0);
		}
	}

	@error "Invalid breakpoint name - '#{$bp}' in mlu-breakpoint-next. '#{$bp}' is not defined in $mlu-breakpoints";
}

/// Wrapper on 'mlu-breakpoint-next' for get breakpoint's name

@function mlu-breakpoint-next-name($bp: 0) {
	@return mlu-breakpoint-next($bp, "name");
}

/// As the same as 'mlu-breakpoint-next'.
/// If pass first breakpoint it return 0.
/// If call without args it return last breakpoint

@function mlu-breakpoint-prev($bp: 0, $data-type: "value") {
	@if $bp == 0 or map-has-key($mlu-breakpoints, $bp) {
		$bp-keys: map-keys($mlu-breakpoints);
		$bp-index: if($bp != 0, index($bp-keys, $bp), length($bp-keys) + 1);

		@if $data-type == "name" {
			@return if($bp-index > 1, nth(map-keys($mlu-breakpoints), $bp-index - 1), 0);
		} @else {
			@return if($bp-index > 1, nth(map-values($mlu-breakpoints), $bp-index - 1), 0);
		}
	}

	@error "Invalid breakpoint name - '#{$bp}' in mlu-breakpoint-prev. '#{$bp}' is not defined in $mlu-breakpoints";
}

/// Wrapper on 'mlu-breakpoint-prev' for get breakpoint's name

@function mlu-breakpoint-prev-name($bp: 0) {
	@return mlu-breakpoint-prev($bp, "name");
}

/// Get grid gutter from $mlu-grid-gutters map

@function mlu-grid-gutter($name, $error-handler: 1) {
	@if map-has-key($mlu-grid-gutters, $name) or $error-handler == 0 {
		@return map-get($mlu-grid-gutters, $name);
	}

	@error "Invalid breakpoint name - '#{$name}' in mlu-grid-gutter. '#{$name}' is not defined in $mlu-grid-gutters";
}

/// Get cols count on breakpoint from $mlu-grid-cols map

@function mlu-grid-cols-count($name, $error-handler: 1) {
	@if map-has-key($mlu-grid-cols, $name) or $error-handler == 0 {
		@return map-get($mlu-grid-cols, $name);
	}

	@error "Invalid breakpoint name - '#{$name}' in mlu-grid-cols-count. '#{$name}' is not defined in $mlu-grid-cols";
}

/// Round decimal
/// $number is decimal to be rounded.
/// $pos is the number of decimal places.

/// $type is round type by analogy with the round functions of sass.
/// You can use different types off round with functions wrappers
/// 'mlu-decimal-floor'

@function mlu-decimal-round($number, $pos, $type: "round") {
	$n: 1;

	@if type-of($number) != "number" {
		@error "Wrong type of argument $number - '#{type-of($number)}' in mlu-decimal-round. Expected number";
	}

	@if type-of($pos) != "number" {
		@error "Wrong type of argument $pos - '#{type-of($pos)}' in mlu-decimal-round. Expected 'number'";
	}

	@for $i from 0 to $pos {
		$n: $n * 10;
	}

	@if $type == "round" {
		@return round($number * $n) / $n;
	} @else if $type == "ceil" {
		@return ceil($number * $n) / $n;
	} @else if $type == "floor" {
		@return floor($number * $n) / $n;
	} @else {
		@error "Invalid round type - '#{$type}' in mlu-decimal-round";
	}
}

/// Wrapper on 'mlu-decimal-round' for ceil round

@function mlu-decimal-ceil($number, $pos) {
	@return mlu-decimal-round($number, $pos, "ceil");
}

/// Wrapper on 'mlu-decimal-round' for floor round

@function mlu-decimal-floor($number, $pos) {
	@return mlu-decimal-round($number, $pos, "floor");
}

/// Convert pixels to ems or rems.
/// $number is number in px.
/// $divider is parent or root font size in px.
/// Converting to rems done using the wrapper function
/// 'mlu-px2rem'.

/// Final value in ems rounded because accuracy
/// more than two decimal places does not make sense

@function mlu-px2em($number, $divider: $mlu-base-font-size, $unit: "em") {
	@if unitless($number) {
		@warn "Assuming #{$number} to be in pixels in mlu-px2em. Convert it to px";
		@return mlu-px2em($number * 1px, $divider, $unit);
	} @else if unit($number) == $unit {
		@return $number;
	}

	@if $unit == "rem" {
		@return mlu-decimal-round($number / $divider, 2) * 1rem;
	}

	@return mlu-decimal-round($number / $divider, 2) * 1em;
}

/// Wrapper on 'mlu-px2em' for converting to rems

@function mlu-px2rem($number, $divider: $mlu-base-font-size) {
	@return mlu-px2em($number, $divider, "rem");
}
