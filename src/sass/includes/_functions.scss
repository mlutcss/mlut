/*
Functions

Useful functions. All MLUT functions have 'mlu' prefix. You can find all functions in  `sass/includes/_functions.scss`.

Styleguide: sass-tools.functions
*/

// mlu-breakpoint
//
// Get breakpoint from $mlu-breakpoints map
//
// Styleguide: sass-tools.functions.breakpoint

@function mlu-breakpoint($name, $error-handler: 1) {
	@if map-has-key($mlu-breakpoints, $name) or $error-handler == 0 {
		@return map-get($mlu-breakpoints, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-breakpoints";
}

// mlu-breakpoint-next
//
// Get next breakpoint. By default return value in px
// but can return name if use function wrapper
// 'mlu-breakpoint-next-name'.
//
// If pass last breakpoint it return 0.
// If call without args it return first breakpoint
//
// Styleguide: sass-tools.functions.breakpoint_next

@function mlu-breakpoint-next($bp: 0, $data-type: "value") {
	@if $bp == 0 or map-has-key($mlu-breakpoints, $bp) {
		$bp-keys: map-keys($mlu-breakpoints);
		$bp-index: if($bp != 0, index($bp-keys, $bp), 0);

		@if $data-type == "name" {
			@return if($bp-index < length($bp-keys), nth(map-keys($mlu-breakpoints), $bp-index + 1), 0);
		} @else {
			@return if($bp-index < length($bp-keys), nth(map-values($mlu-breakpoints), $bp-index + 1), 0);
		}
	}

	@error "Invalid breakpoint name: '#{$bp}'. '#{$bp}' is not defined in $mlu-breakpoints";
}

// mlu-breakpoint-next-name
//
// Wrapper on 'mlu-breakpoint-next' for get breakpoint's name
//
// Styleguide: sass-tools.functions.breakpoint_next_name

@function mlu-breakpoint-next-name($bp: 0) {
	@return mlu-breakpoint-next($bp, "name");
}

// mlu-breakpoint-prev
//
// As the same as 'mlu-breakpoint-next'.
// If pass first breakpoint it return 0.
// If call without args it return last breakpoint
//
// Styleguide: sass-tools.functions.breakpoint_prev

@function mlu-breakpoint-prev($bp: 0, $data-type: "value") {
	@if $bp == 0 or map-has-key($mlu-breakpoints, $bp) {
		$bp-keys: map-keys($mlu-breakpoints);
		$bp-index: if($bp != 0, index($bp-keys, $bp), length($bp-keys) + 1);

		@if $data-type == "name" {
			@return if($bp-index > 1, nth(map-keys($mlu-breakpoints), $bp-index - 1), 0);
		} @else {
			@return if($bp-index > 1, nth(map-values($mlu-breakpoints), $bp-index - 1), 0);
		}
	}

	@error "Invalid breakpoint name: '#{$bp}'. '#{$bp}' is not defined in $mlu-breakpoints";
}


// mlu-breakpoint-prev-name
//
// Wrapper on 'mlu-breakpoint-prev' for get breakpoint's name
//
// Styleguide: sass-tools.functions.breakpoint_prev_name

@function mlu-breakpoint-prev-name($bp: 0) {
	@return mlu-breakpoint-prev($bp, "name");
}

// mlu-grid-gutter
//
// Get grid gutter from $mlu-grid-gutters map
//
// Styleguide: sass-tools.functions.grid_gutter

@function mlu-grid-gutter($name, $error-handler: 1) {
	@if map-has-key($mlu-grid-gutters, $name) or $error-handler == 0 {
		@return map-get($mlu-grid-gutters, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-grid-gutters";
}

// mlu-grid-cols-count
//
// Get cols count on breakpoint from $mlu-grid-cols map
//
// Styleguide: sass-tools.functions.grid_cols_count

@function mlu-grid-cols-count($name, $error-handler: 1) {
	@if map-has-key($mlu-grid-cols, $name) or $error-handler == 0 {
		@return map-get($mlu-grid-cols, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-grid-cols";
}

// mlu-decimal-round
//
// Round decimal
// $number is decimal to be rounded.
// $pos is the number of decimal places.
//
// $type is round type by analogy with the round functions of sass.
// You can use different types off round with functions wrappers
// 'mlu-decimal-floor'
//
// Styleguide: sass-tools.functions.decimal_round

@function mlu-decimal-round($number, $pos, $type: "round") {
	$n: 1;

	@if type-of($number) != "number" {
		@error "Wrong type of argument $number: '#{type-of($number)}'. Expected number";
	}

	@if type-of($pos) != "number" {
		@error "Wrong type of argument $pos: '#{type-of($pos)}'. Expected 'number'";
	}

	@for $i from 0 to $pos {
		$n: $n * 10;
	}

	@if $type == "round" {
		@return round($number * $n) / $n;
	} @else if $type == "ceil" {
		@return ceil($number * $n) / $n;
	} @else if $type == "floor" {
		@return floor($number * $n) / $n;
	} @else {
		@error "Invalid round type: '#{$type}'";
	}
}

// mlu-decimal-ceil
//
// Wrapper on 'mlu-decimal-round' for ceil round
//
// Styleguide: sass-tools.functions.decimal_ceil

@function mlu-decimal-ceil($number, $pos) {
	@return mlu-decimal-round($number, $pos, "ceil");
}


// mlu-decimal-floor
//
// Wrapper on 'mlu-decimal-round' for floor round
//
// Styleguide: sass-tools.functions.decimal_floor

@function mlu-decimal-floor($number, $pos) {
	@return mlu-decimal-round($number, $pos, "floor");
}

// mlu-px2em
//
// Convert pixels to ems or rems.
// $number is number in px.
// $divider is parent or root font size in px.
// Converting to rems done using the wrapper function
// 'mlu-px2rem'.
//
// Final value in ems rounded because accuracy
// more than two decimal places does not make sense
//
// Styleguide: sass-tools.functions.px2em

@function mlu-px2em($number, $divider: $mlu-base-font-size, $unit: "em") {
	@if unitless($number) {
		@warn "Assuming #{$number} to be in pixels in mlu-px2em. Convert it to px";
		@return mlu-px2em($number * 1px, $divider, $unit);
	} @else if unit($number) == $unit {
		@return $number;
	}

	@if $unit == "rem" {
		@return mlu-decimal-round($number / $divider, 2) * 1rem;
	}

	@if $unit == "no" {
		@return mlu-decimal-round($number / $divider, 2);
	}

	@return mlu-decimal-round($number / $divider, 2) * 1em;
}


// mlu-px2rem
//
// Wrapper on 'mlu-px2em' for converting to rems
//
// Styleguide: sass-tools.functions.px2rem

@function mlu-px2rem($number, $divider: $MLU-BROWSER-FONT-SIZE) {
	@return mlu-px2em($number, $divider, "rem");
}


// mlu-px2lh
//
// Wrapper on 'mlu-px2em' for converting to line-height unit
//
// Styleguide: sass-tools.functions.px2lh

@function mlu-px2lh($number, $divider: $mlu-base-font-size) {
	@return mlu-px2em($number, $divider, "no");
}

// mlu-ston
//
// Convert string to number.
// $str is string to be converted.
//
// $strict is flag for stricter conversion; Examples:
// mlu-ston(10c) => 10;
// mlu-ston(10c, 1) => null;
//
// Styleguide: sass-tools.functions.ston

@function mlu-ston($str, $strict: false) {
	@if type-of($str) == "number" {
		@return $str;
	}

	@if type-of($str) != "string" {
		@error "Wrong type of argument $str: '#{type-of($str)}'. Expected 'string'";
	}

	$digits: "0123456789";
	$negative: str-slice($str, 1, 1) == "-";
	$result: 0;
	$decimal: false;

	@for $i from if($negative, 2, 1) through str-length($str) {
		$char: str-slice($str, $i, $i);
		$digit: str-index($digits, $char);

		@if $digit and not $decimal {
			$result: $result * 10 + ($digit - 1);
		} @else if $digit and $decimal {
			$result: $result + ($digit - 1) / $decimal;
			$decimal: $decimal * 10;
		} @else if $char == "." and not $decimal {
			$decimal: 10;
		} @else if $strict or ($i == 1 and not $negative) or ($i == 2 and $negative) {
			@return null;
		} @else {
			@return if($negative, -$result, $result);
		}
	}

	@return if($negative, -$result, $result);
}
