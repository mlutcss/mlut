/*
Functions

Useful functions. All MLUT functions have 'mlu' prefix. You can find all functions in `sass/includes/_functions.scss`.

Styleguide: sass-tools.functions
*/

// mlu-bp
//
// Get breakpoint value from [$mlu-breakpoints](section-sass-tools.html#kssref-sass-tools-settings-grid-breakpoints) map.
// ```scss
//mlu-bp("md") => 760px
//```
//
// $name - breakpoint name. Type: string.
// $error-handler = 1 - bool flag for enable strict error handling. If it is enabled, then when an invalid breakpoint name is passed, the compiler will generate an error.
//
// Styleguide: sass-tools.functions.bp

@function mlu-bp($name, $error-handler: 1) {
	@if map-has-key($mlu-breakpoints, $name) or $error-handler == 0 {
		@return map-get($mlu-breakpoints, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-breakpoints";
}

// mlu-bp-next
//
// Get next breakpoint value.
// ```scss
//mlu-bp-next("md") => 960px
//```
//
// $bp = 0 - breakpoint name.
// If pass last breakpoint, function return 0. With default value, function return first breakpoint. Type: string.
// $data-type = "value" - service parameter for functions-wrappers. Type: string.
//
// Styleguide: sass-tools.functions.bp_next

@function mlu-bp-next($bp: 0, $data-type: "value") {
	@if $bp == 0 or map-has-key($mlu-breakpoints, $bp) {
		$bp-keys: map-keys($mlu-breakpoints);
		$bp-index: if($bp != 0, index($bp-keys, $bp), 0);

		@if $data-type == "name" {
			@return if($bp-index < length($bp-keys), nth(map-keys($mlu-breakpoints), $bp-index + 1), 0);
		} @else {
			@return if($bp-index < length($bp-keys), nth(map-values($mlu-breakpoints), $bp-index + 1), 0);
		}
	}

	@error "Invalid breakpoint name: '#{$bp}'. '#{$bp}' is not defined in $mlu-breakpoints";
}

// mlu-bp-next-name
//
// Wrapper on [mlu-bp-next](#kssref-sass-tools-functions-bp_next) for get breakpoint's name. Works similarly.
// ```scss
//mlu-bp-next-name("md") => "lg"
//```
//
// $bp = 0 - breakpoint name. Type: string.
//
// Styleguide: sass-tools.functions.bp_next_name

@function mlu-bp-next-name($bp: 0) {
	@return mlu-bp-next($bp, "name");
}

// mlu-bp-prev
//
// Get previous breakpoint value.
// ```scss
//mlu-bp-prev("md") => 520px
//```
//
// $bp = 0 - breakpoint name.
// If pass firts breakpoint, function return 0. With default value, function return last breakpoint. Type: string.
// $data-type = "value" - service parameter for functions-wrappers. Type: string.
//
// Styleguide: sass-tools.functions.bp_prev

@function mlu-bp-prev($bp: 0, $data-type: "value") {
	@if $bp == 0 or map-has-key($mlu-breakpoints, $bp) {
		$bp-keys: map-keys($mlu-breakpoints);
		$bp-index: if($bp != 0, index($bp-keys, $bp), length($bp-keys) + 1);

		@if $data-type == "name" {
			@return if($bp-index > 1, nth(map-keys($mlu-breakpoints), $bp-index - 1), 0);
		} @else {
			@return if($bp-index > 1, nth(map-values($mlu-breakpoints), $bp-index - 1), 0);
		}
	}

	@error "Invalid breakpoint name: '#{$bp}'. '#{$bp}' is not defined in $mlu-breakpoints";
}


// mlu-bp-prev-name
//
// Wrapper on [mlu-bp-prev](#kssref-sass-tools-functions-bp_prev) for get breakpoint's name. Works similarly.
// ```scss
//mlu-bp-prev-name("md") => "sm"
//```
//
// $bp = 0 - breakpoint name. Type: string.
//
// Styleguide: sass-tools.functions.bp_prev_name

@function mlu-bp-prev-name($bp: 0) {
	@return mlu-bp-prev($bp, "name");
}

// mlu-grid-gtr
//
// Get grid gutter on breakpoint from [$mlu-grid-gutters](section-sass-tools.html#kssref-sass-tools-settings-grid-gutters) map.
// ```scss
//mlu-grid-gtr("md") => 12px
//```
//
// $name - breakpoint name. Type: string.
// $error-handler = 1 - works similarly like [here](#kssref-sass-tools-functions-bp).
//
// Styleguide: sass-tools.functions.grid_gtr

@function mlu-grid-gtr($name, $error-handler: 1) {
	@if map-has-key($mlu-grid-gutters, $name) or $error-handler == 0 {
		@return map-get($mlu-grid-gutters, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-grid-gutters";
}

// mlu-grid-cols-count
//
// Get columns count on breakpoint from [$mlu-grid-cols](section-sass-tools.html#kssref-sass-tools-settings-grid-breakpoints) map.
// ```scss
//mlu-grid-cols-count("sm") => 4
//```
//
// $name - breakpoint name. Type: string.
// $error-handler = 1 - works similarly like [here](#kssref-sass-tools-functions-bp).
//
// Styleguide: sass-tools.functions.grid_cols_count

@function mlu-grid-cols-count($name, $error-handler: 1) {
	@if map-has-key($mlu-grid-cols, $name) or $error-handler == 0 {
		@return map-get($mlu-grid-cols, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-grid-cols";
}

// mlu-css-var
//
// Get name of CSS custom property from [$mlu-css-vars](section-sass-tools.html#kssref-sass-tools-settings-css_vars-names) map.
// ```scss
//mlu-css-var("gg") => "--mlu-gg"
//```
//
// $name - custom property name. Type: string.
// $error-handler = 1 - works similarly like [here](#kssref-sass-tools-functions-bp).
//
// Styleguide: sass-tools.functions.css_var

@function mlu-css-var($name, $error-handler: 1) {
	@if map-has-key($mlu-css-vars, $name) or $error-handler == 0 {
		@return map-get($mlu-css-vars, $name);
	}

	@error "Invalid custom property name. '#{$name}' is not defined in $mlu-css-vars";
}

// mlu-decimal-round
//
// Decimal rounding.
// ```scss
//mlu-decimal-round(33.33333%, 2) => 33.33%
//```
//
// $number - decimal to be rounded. Type: number.
// $pos - the number of decimal places.
// $type = "round" - service parameter for functions-wrappers.
//
// Styleguide: sass-tools.functions.decimal_round

@function mlu-decimal-round($number, $pos, $type: "round") {
	$n: 1;

	@if type-of($number) != "number" {
		@error "Wrong type of argument $number: '#{type-of($number)}'. Expected number";
	}

	@if type-of($pos) != "number" {
		@error "Wrong type of argument $pos: '#{type-of($pos)}'. Expected 'number'";
	}

	@for $i from 0 to $pos {
		$n: $n * 10;
	}

	@if $type == "round" {
		@return round($number * $n) / $n;
	} @else if $type == "ceil" {
		@return ceil($number * $n) / $n;
	} @else if $type == "floor" {
		@return floor($number * $n) / $n;
	} @else {
		@error "Invalid round type: '#{$type}'";
	}
}

// mlu-decimal-ceil
//
// Wrapper on [mlu-decimal-round](#kssref-sass-tools-functions-decimal_round) for ceil round.
// ```scss
//mlu-decimal-ceil(33.33333%, 2) => 33.34%
//```
//
// $number - decimal to be rounded. Type: number.
// $pos - the number of decimal places.
//
// Styleguide: sass-tools.functions.decimal_ceil

@function mlu-decimal-ceil($number, $pos) {
	@return mlu-decimal-round($number, $pos, "ceil");
}


// mlu-decimal-floor
//
// Wrapper on [mlu-decimal-round](#kssref-sass-tools-functions-decimal_round) for floor round.
// ```scss
//mlu-decimal-floor(33.33333%, 2) => 33.33%
//```
//
// $number - decimal to be rounded. Type: number.
// $pos - the number of decimal places.
//
// Styleguide: sass-tools.functions.decimal_floor

@function mlu-decimal-floor($number, $pos) {
	@return mlu-decimal-round($number, $pos, "floor");
}

// mlu-px2em
//
// Convert pixels to `ems`.
// Final value in ems rounded because accuracy more than two decimal places does not make sense.
// ```scss
//mlu-px2em(24px, 18px) => 1.33em
//mlu-px2em(24px) => 1.5em
// ```
//
// $number - number in `px` that will be converted.
// $divider = $mlu-base-font-size - parent font size in `px`.
// $unit = "em" - service parameter for functions-wrappers.
//
// Styleguide: sass-tools.functions.px2em

@function mlu-px2em($number, $divider: $mlu-base-font-size, $unit: "em") {
	@if unitless($number) {
		@warn "Assuming #{$number} to be in pixels in mlu-px2em. Convert it to px";
		@return mlu-px2em($number * 1px, $divider, $unit);
	} @else if unit($number) == $unit {
		@return $number;
	}

	@if $unit == "rem" {
		@return mlu-decimal-round($number / $divider, 2) * 1rem;
	}

	@if $unit == "no" {
		@return mlu-decimal-round($number / $divider, 2);
	}

	@return mlu-decimal-round($number / $divider, 2) * 1em;
}


// mlu-px2rem
//
// Wrapper on [mlu-px2em](#kssref-sass-tools-functions-px2em) for converting to `rems`. Works similarly.
// ```scss
//mlu-px2rem(24px) => 1.5rem
// ```
//
// $number - number in `px` that will be converted.
// $divider = $MLU-BROWSER-FONT-SIZE - browser default font size in `px`.
//
// Styleguide: sass-tools.functions.px2rem

@function mlu-px2rem($number, $divider: $MLU-BROWSER-FONT-SIZE) {
	@return mlu-px2em($number, $divider, "rem");
}


// mlu-px2lh
//
// Wrapper on [mlu-px2em](#kssref-sass-tools-functions-px2em) for converting to `line-height` units. Works similarly.
// ```scss
//mlu-px2lh(24px, 14px) => 1.71
//mlu-px2lh(24px) => 1.5
// ```
//
// $number - number in `px` that will be converted.
// $divider = $mlu-base-font-size - parent font size in `px`.
//
// Styleguide: sass-tools.functions.px2lh

@function mlu-px2lh($number, $divider: $mlu-base-font-size) {
	@return mlu-px2em($number, $divider, "no");
}

// mlu-ston
//
// Convert string to number.
// ```scss
//mlu-ston("1.5") => 1.5
//mlu-ston("1x5") => 1
//mlu-ston("1x5", 1) => null
// ```
//
// $str - string to be converted.
// $strict = false - bool flag for stricter conversion. If it on and $str contains non-number, then function return `null`. See example above.
//
// Styleguide: sass-tools.functions.ston

@function mlu-ston($str, $strict: false) {
	@if type-of($str) == "number" {
		@return $str;
	}

	@if type-of($str) != "string" {
		@error "Wrong type of argument $str: '#{type-of($str)}'. Expected 'string'";
	}

	$digits: "0123456789";
	$negative: str-slice($str, 1, 1) == "-";
	$result: 0;
	$decimal: false;

	@for $i from if($negative, 2, 1) through str-length($str) {
		$char: str-slice($str, $i, $i);
		$digit: str-index($digits, $char);

		@if $digit and not $decimal {
			$result: $result * 10 + ($digit - 1);
		} @else if $digit and $decimal {
			$result: $result + ($digit - 1) / $decimal;
			$decimal: $decimal * 10;
		} @else if $char == "." and not $decimal {
			$decimal: 10;
		} @else if $strict or ($i == 1 and not $negative) or ($i == 2 and $negative) {
			@return null;
		} @else {
			@return if($negative, -$result, $result);
		}
	}

	@return if($negative, -$result, $result);
}

// mlu-check-class
//
// Checks for a dot in the CSS class name depending on the flag.
// ```scss
//mlu-check-class(".block") => ".block"
//mlu-check-class("block") => ".block"
//mlu-check-class(".block", 1) => "block"
// ```
//
// $name - class name string.
// $only-name = null - bool flag. In you want to get class name without dot pass 1. Else, a value with a dot will be returned.
//
// Styleguide: sass-tools.functions.check_class

@function mlu-check-class($name, $only-name: null) {
	$name: $name + "";

	@if $only-name {
		@return if(str-slice($name, 1, 1) == ".", str-slice($name, 2), $name);
	}

	@return if(str-slice($name, 1, 1) == ".", $name, "." + $name);
}

@import "utils-map-getters";
