@use 'sass:map';

@use '../../tools' as mlu;

/*
Grid system

Utilities that manage MLUT grid system.

Styleguide: core-utils.grid_system
*/

/*
-Gsg

Grid system gutter. Controls gutters: `--mlu.-gg` and `--mlu.gg-rem`.

* `-Gsg1su..-Gsg5su` \- *Responsive*.

-Gsg1su - gutter is 8px
-Gsg5su_xl - gutter is 20px on `xl`

Markup: ../../../docs/examples/core-utils/grid-system/gsg.hbs

Styleguide: core-utils.grid_system.gsg
*/

/*
-Gsc

Grid system columns. Sets number of columns in grid system on DOM node. Controls `--mlu.grid-cols`.

* `-Gsc` \- columns number is equal [mlu.$grid-default-cols](section-sass-tools.html#kssref-sass-tools-settings-grid). *Responsive* only.

-Gsc-sm - keyword that means number of columns on `sm` breakpoint. There is on all breakpoints except `sm`.<br> Available selector modifier `chl`. See [example](section-examples.html#kssref-examples-layouts-2ec4ecin2_nd).
-Gsc10_md - only *Responsive*. Available `chl` state.

Markup: ../../../docs/examples/core-utils/grid-system/gsc.hbs

Styleguide: core-utils.grid_system.gsc
*/

/*
-Gscd

Grid system columns diff. Controls `--gc-diff` from grid column width [formula](section-core-blocks.html#kssref-core-blocks-row-row__col).

* `-Gscd1gg` \- 1 gutter

-Gscd0 - 0px

Markup: ../../../docs/examples/core-utils/grid-system/gscd.hbs

Styleguide: core-utils.grid_system.gscd
*/

/*
-Gscr

Grid system columns rule. Controls `--gc-rule` and `--mgc-rule` .

-Gscr - sets the standard formula from [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) for calculating the column widths for utilities W and M. <br>The difference of the formula is that `--gc-diff` has fallback value `--mlu.gg`.

Markup: ../../../docs/examples/core-utils/grid-system/gscr.hbs

Styleguide: core-utils.grid_system.gscr
*/

@for $i from 1 through mlu.$cGsg-range {
	@include mlu.bp-all('.-Gsg#{$i}su') {
		#{mlu.$var-gg}: $i * mlu.$su;
		#{mlu.$var-gg-rem}: mlu.px2rem($i * mlu.$su);
	}
}

.-Gsc {
	$sm-cols: mlu.grid-cols-count(mlu.$bp-sm);
	$Gc-map: (
		mlu.$bp-sm: $sm-cols,
		'_bp': mlu.$grid-default-cols,
		'10_bp': 10,
	);

	@each $key, $value in mlu.$grid-cols {
		@if $key != mlu.$bp-sm and $sm-cols != mlu.$grid-default-gtr {
			$Gc-map: map.merge($Gc-map, (mlu.$bp-sm + '_' + $key: $sm-cols));
		}
	}

	@at-root {
		.chl_-Gsc-#{mlu.$bp-sm} > * {
			#{mlu.$var-grid-cols}: $sm-cols;
		}

		.chl_-Gsc10 > * {
			#{mlu.$var-grid-cols}: 10;
		}

		@include mlu.mk-util('-Gsc', $Gc-map);
	}
}

.-Gscd0 {
	--gc-diff: 0px;
}

.-Gscd1gg {
	--gc-diff: var(#{mlu.$var-gg});
}

.-Gscr {
	--gc-rule: calc((var(--gc) - 0.0001) / var(#{mlu.$var-grid-cols}) * 100% - var(--gc-diff, var(#{mlu.$var-gg})) * 2);
	--mgc-rule: calc((var(--mgc) - 0.0001) / var(#{mlu.$var-grid-cols}) * 100% + var(--gc-diff, var(#{mlu.$var-gg})));
}
