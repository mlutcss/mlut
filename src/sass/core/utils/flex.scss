@use 'sass:map';

@use '../../tools' as mlu;

/*
Flex

A group of utilities for managing flex-containers and flex-elements.

Most of custom flex utilities **turned off** and available with flag [mlu.$flag-flex-pe](section-sass-tools.html#kssref-sass-tools-settings-flags). They are needed to manage [row-layouts](section-core-blocks.html#kssref-core-blocks-row) and their elements.

* `Fxg1` \- flex-element occupies the remaining free space in the line.
* `Fxsh0`
* `Fx-i`
* `Ord-1..Ord2` \- sequence number for flex-element

Styleguide: core-utils.flex
*/

/*
Fxd

Flex direction.

* `Fxd-r` \- row. Only *Responsive*

Fxd-rr - row-reverse. *Responsive*
Fxd-c - column
Fxd-cr - column-reverse

Markup: ../../../docs/examples/core-utils/flex/fxd.hbs

Styleguide: core-utils.flex.fxd
*/

/*
Fxw

Flex wrap.

wr - wrap-reverse
w - wrap. *Responsive*.
n - nowrap. only *Responsive*.

Styleguide: core-utils.flex.fxw
*/

/*
Jc

Justify content. All values are *Responsive*. `fs` only *Responsive*.

Jc-sa - space-around
Jc-sb - space-between
Jc-fe_xl - flex-end on `xl` breakpoint

Markup: ../../../docs/examples/core-utils/flex/jc.hbs

Styleguide: core-utils.flex.jc
*/

/*
As

Align self. Available all values.

Markup: ../../../docs/examples/core-utils/flex/as.html

Styleguide: core-utils.flex.as
*/

/*
Ai

Align items. All values are *Responsive*. `s` only *Responsive*.

Ai-fs - top
Ai-c - center
Ai-fe - bottom
Ai-b - text baseline

Markup: ../../../docs/examples/core-utils/flex/ai.hbs

Styleguide: core-utils.flex.ai
*/

/*
Ac

Align content.

Ac-fs - top
Ac-c - center
Ac-fe - bottom
Ac-sa - space-around
Ac-sb - space-between

Markup: ../../../docs/examples/core-utils/flex/ac.hbs

Styleguide: core-utils.flex.ac
*/

/*
-As

Custom align self. Set `vertical-align` for common DOM nodes and `align-self` for flex-element.

Can be used to vertically align an element in row-layouts. Partially works without flex-container. Has the same values as `As`.

Styleguide: core-utils.flex.-as
*/

/*
-Jc

Custom justify content. Combines [Ta](#kssref-core-utils-text-ta) and [Jc](#kssref-core-utils-flex-jc) utilities. Can be used to horizontal alignment with progressive enhancement for row-layouts.

All values are available and correspond to `Jc` if [flex-pe](section-sass-tools.html#kssref-sass-tools-settings-flags) flag turned on. By default available one value.

-Jc-c - center.

Styleguide: core-utils.flex.-jc
*/

/*
-Ai

Custom align items. Set `vertical-align` for child DOM nodes and `align-items` for flex-container.

Can be used to vertically align an elements in row-layouts. Partially works without flex-container. Has the same values as `Ai`.

Styleguide: core-utils.flex.-ai
*/

@include mlu.mk-util('Fxd', (
	'rr_all': row-reverse,
	'r_bp': row,
	'c': column,
	'cr': column-reverse,
));

.Fxg1 {
	flex-grow: 1;
}

.Fxsh0 {
	flex-shrink: 0;
}

.Fx-i {
	flex: inherit;
}

@include mlu.mk-util('Fxw', (
	'wr': wrap-reverse,
	'w_all': wrap,
	'n_bp': nowrap,
));

@include mlu.mk-util('Ac', (
	'fs': flex-start,
	'fe': flex-end,
	'c': center,
	'sa': space-around,
	'sb': space-between,
));

$As-map: (
	's': stretch,
);

@if mlu.$flag-flex-pe {
	.-As-b {
		align-self: baseline;
		vertical-align: baseline;
	}

	.-As-fs {
		align-self: flex-start;
		vertical-align: top;
	}

	.-As-c {
		align-self: center;
		vertical-align: middle;
	}

	.-As-fe {
		align-self: flex-end;
		vertical-align: bottom;
	}
} @else {
	$As-map: map.merge($As-map,
	(
		'fs': flex-start,
		'fe': flex-end,
		'c': center,
		'b': baseline,
	));
}

@include mlu.mk-util('As', $As-map);

@include mlu.mk-util('Jc', (
	'fs_bp': flex-start,
	'fe_all': flex-end,
	'c_all': center,
	'sa_all': space-around,
	'sb_all': space-between,
));

@if mlu.$flag-flex-pe {
	@include mlu.bp-all('.-Jc-fs', 0) {
		justify-content: flex-start;
		text-align: left;
	}

	@include mlu.bp-all('.-Jc-c') {
		justify-content: center;
		text-align: center;
	}

	@include mlu.bp-all('.-Jc-fe') {
		justify-content: flex-end;
		text-align: right;
	}
} @else if mlu.$flag-css-vars != 2 {
	.-Jc-c {
		justify-content: center;
		text-align: center;
	}
}

@if mlu.$flag-flex-pe {
	.-Ai-fs {
		align-items: flex-start;

		> * {
			vertical-align: top;
		}
	}

	.-Ai-c {
		align-items: center;

		> * {
			vertical-align: middle;
		}
	}

	.-Ai-fe {
		align-items: flex-end;

		> * {
			vertical-align: bottom;
		}
	}

	.-Ai-b {
		align-items: baseline;

		> * {
			vertical-align: baseline;
		}
	}
} @else {
	@include mlu.mk-util('Ai', (
		's_bp': stretch,
		'fs_all': flex-start,
		'fe_all': flex-end,
		'b_all': baseline,
		'c_all': center,
	));
}

@for $i from -1 to (mlu.$Ord-range - 1) {
	.Ord#{$i} {
		order: $i;
	}
}
