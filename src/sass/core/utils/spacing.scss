@use 'sass:map';
@use 'sass:list';
@use '../../tools/settings' as ml;

/*
Margin

You can set some margins in the grid-gutters(gg). For example margin top - `Mt` and margin bottom - `Mb`. By default, margins in `gg` contain `var()` fallback as [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col)

Vertical margins in grid-gutters are converted to `rems`. This affects accessibility, because margins will be scaled when changing font sizes in the browser settings.

* `M0` \- clear all margins.
* `M-a`
* `M-i` \- inherit all margins
* `Mr0`
* `Mt0`
* `Mt1gg..Mt4gg`

Styleguide: core-utils.margin
*/

/*
Ml

Margin left. You can set left margin in the [grid units](section-concepts.html#kssref-concepts-grid)(gg, c) or [space units](section-concepts.html#kssref-concepts-su)(su). So you can set the offset for layout elements.

* `Ml-a` \- *Responsive*.
* `Ml0` \- *Responsive*.
* `Ml-2gg..Ml2gg` \- the range includes 2 negative margins and 2 positive.
* `Ml1gg` \- it is needed to return the default column gutter. *Responsive*.
* `Ml1gc..Ml10gc` \- available margin in `gc` on all breakpoints.

Markup: ../../../docs/examples/core-utils/margin/ml.html

Styleguide: core-utils.margin.ml
*/

/*
Mb

Margin bottom. You can set bottom margin in the grid-gutters(gg) or [space units](section-concepts.html#kssref-concepts-su)(su).

* `Mb0` \- *Responsive*
* `Mb1gg..Mb4gg`
* `Mb2gg` \- *Responsive*
* `Mb1su..Mb6su`
* `Mb-2gg`

Styleguide: core-utils.margin.mb
*/

/*
Mx

Margin on X axis. Sets left and right margin.

* `Mx-a` \- centered the DOM node with a given width and `block` [display type](#kssref-core-utils-bxz-d). *Responsive*.
* `Mx1gg` \- *Responsive*.
* `Mx-1gg` \- it needed for imposes left and right padding of the outermost columns on the fields of the [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper). This behavior is necessary so that there are no double fields in the layout, using [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) or `Mx1gg`.
* `Mx0` \- only *responsive*.

Markup: ../../../docs/examples/core-utils/margin/mx.html

Styleguide: core-utils.margin.mx
*/

/*
Padding

* `P0` \- clear all paddings.
* `P1su..P4su` \- creates padding all around.
* `P1gg`
* `Pt1gg..Pt2gg` \- works similarly [Mt1gg](#kssref-core-utils-margin)
* `Pb1gg..Pb2gg`

Styleguide: core-utils.padding
*/

/*
Px

Padding on X axis. Sets left and right padding.

* `Px1gg`

Styleguide: core-utils.padding.px
*/

$-M-list: ([ml.$kBpAll + '_-6su', -1], [ml.$kBpAll + '_-2gg', -1], [ml.$kBpAll + '_1gg', 4]);

ml.$utils-map: map.merge(
	ml.$utils-map,
	ml.$kSsUMCS,
	(
		ml.$kBpAll + '_Margins': (0, 'a', 'ih', [1su, 6]),
		ml.$kBpAll + '_Paddings': (0, 'ih', [1su, 7], [1gg, 6]),
		// for ratio-box
		'Pt_b StOl': (100p, 75p),
		'M': $-M-list,
		'Mt': $-M-list,
		'Mb': $-M-list,
		'Ml': list.append($-M-list, [ml.$kBpAll + '_1gc', 10]),
		'-Mx': $-M-list,
		'-My': $-M-list,
	)
);
