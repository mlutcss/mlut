@use 'sass:map';

@use '../../tools' as mlu;

/*
Custom

Utilities that manage [CSS custom properties](section-core-styles.html#kssref-core-styles-css_vars) which used in MLUT.

Styleguide: core-utils.custom
*/

/*
-Gg

Controls gutters: `--mlu.-gg` and `--mlu.gg-rem`.

* `-Gg1su..-Gg5su` \- *Responsive*.

-Gg1su - gutter is 8px
-Gg5su_xl - gutter is 20px on `xl`

Markup: ../../../docs/examples/core-utils/custom/gg.hbs

Styleguide: core-utils.custom.gg
*/

/*
-Gcc

Grid columns count. Sets number of columns in grid system on DOM node. Controls `--mlu.grid-cols`.

* `-Gcc` \- columns number is equal [mlu.$grid-default-cols](section-sass-tools.html#kssref-sass-tools-settings-grid). *Responsive* only.

-Gcc-sm - keyword that means number of columns on `sm` breakpoint. There is on all breakpoints except `sm`.<br> Available selector modifier `chl`. See [example](section-examples.html#kssref-examples-layouts-2ec4ecin2_nd).
-Gcc10_md - only *Responsive*. Available `chl` state.

Markup: ../../../docs/examples/core-utils/custom/gcc.hbs

Styleguide: core-utils.custom.gcc
*/

/*
-Gcd

Grid columns diff. Controls `--gc-diff` from grid column width [formula](section-core-blocks.html#kssref-core-blocks-row-row__col).

* `-Gcd1gg` \- 1 gutter

-Gcd0 - 0px

Markup: ../../../docs/examples/core-utils/custom/gcd.hbs

Styleguide: core-utils.custom.gcd
*/

/*
-Gcr

Grid columns rule. Controls `--gc-rule` and `--mgc-rule` .

-Gcr - sets the standard formula from [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) for calculating the column widths for utilities W and M. <br>The difference of the formula is that `--gc-diff` has fallback value `--mlu.gg`.

Markup: ../../../docs/examples/core-utils/custom/gcr.hbs

Styleguide: core-utils.custom.gcr
*/

@for $i from 1 through mlu.$cGg-range {
	@include mlu.bp-all('.-Gg#{$i}su') {
		#{mlu.$var-gg}: $i * mlu.$su;
		#{mlu.$var-gg-rem}: mlu.px2rem($i * mlu.$su);
	}
}

.-Gcc {
	$sm-cols: mlu.grid-cols-count(mlu.$bp-sm);
	$Gc-map: (
		mlu.$bp-sm: $sm-cols,
		'_bp': mlu.$grid-default-cols,
		'10_bp': 10,
	);

	@each $key, $value in mlu.$grid-cols {
		@if $key != mlu.$bp-sm and $sm-cols != mlu.$grid-default-gtr {
			$Gc-map: map.merge($Gc-map, (mlu.$bp-sm + '_' + $key: $sm-cols));
		}
	}

	@at-root {
		.chl_-Gcc-#{mlu.$bp-sm} > * {
			#{mlu.$var-grid-cols}: $sm-cols;
		}

		.chl_-Gcc10 > * {
			#{mlu.$var-grid-cols}: 10;
		}

		@include mlu.mk-util('-Gcc', $Gc-map);
	}
}

.-Gcd0 {
	--gc-diff: 0px;
}

.-Gcd1gg {
	--gc-diff: var(#{mlu.$var-gg});
}

.-Gcr {
	--gc-rule: calc((var(--gc) - 0.0001) / var(#{mlu.$var-grid-cols}) * 100% - var(--gc-diff, var(#{mlu.$var-gg})) * 2);
	--mgc-rule: calc((var(--mgc) - 0.0001) / var(#{mlu.$var-grid-cols}) * 100% + var(--gc-diff, var(#{mlu.$var-gg})));
}
