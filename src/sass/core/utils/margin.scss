/*
Margin

You can set some margins in the grid-gutters(gg). For example margin top - `Mt` and margin bottom - `Mb`. By default, margins in `gg` contain `var()` fallback as [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col)

Vertical margins in grid-gutters are converted to `rems`. This affects accessibility, because margins will be scaled when changing font sizes in the browser settings.

* `M0` \- clear all margins.
* `M-a`
* `Mr0`
* `Mt0`
* `Mt1gg..Mt4gg`

Styleguide: core-utils.margin
*/

/*
Ml

Margin left. You can set left margin in the [grid units](section-concepts.html#kssref-concepts-grid)(gc, gg, gs) or [space units](section-concepts.html#kssref-concepts-su)(su). So you can set the offset for layout elements.

* `Ml-a` \- *Responsive*.
* `Ml0` \- *Responsive*.
* `Ml-2gg..Ml2gg` \- the range includes 2 negative margins and 2 positive.
* `Ml1gg` \- it is needed to return the default column gutter. *Responsive* if `gc` turned on.
* `Ml1gs..Ml10gs` \- available margin in `gs` on all breakpoints, starting with `md`.
* `Ml1gc..Ml10gc` \- if `gc` turned on.

Markup: ../../../docs/examples/core-utils/margin/ml.html

Styleguide: core-utils.margin.ml
*/

/*
Mb

Margin bottom. You can set bottom margin in the grid-gutters(gg) or [space units](section-concepts.html#kssref-concepts-su)(su).

* `Mb0` \- *Responsive*
* `Mb1gg..Mb4gg`
* `Mb2gg` \- *Responsive*
* `Mb1su..Mb4su`
* `Mb6su`
* `Mb8su`
* `Mb-2gg..Mb-1gg`
* `Mb-4su`
* `Mb-6su`
* `Mb-8su`

Styleguide: core-utils.margin.mb
*/

/*
Mx

Margin on X axis. Sets left and right margin.

* `Mx-a` \- centered the DOM node with a given width and `block` [display type](#kssref-core-utils-visual-d). *Responsive*.
* `Mx1gg` \- if `gc` turned on. *Responsive*.
* `Mx-1gg` \- it needed for imposes left and right padding of the outermost columns on the fields of the [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper). This behavior is necessary so that there are no double fields in the layout, using [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) or `Mx1gg`.
* `Mx-2su..Mx-4su`
* `Mx0` \- *responsive*.

Markup: ../../../docs/examples/core-utils/margin/mx.html

Styleguide: core-utils.margin.mx
*/

$mlu-M-map: (
	"xy0": 0,
	"xy-a": auto,
);

@each $key, $value in $mlu-main-directions {
	$mlu-M-map: map-merge($mlu-M-map, ($key + "0": 0));
}

$mlu-M-map: map-merge($mlu-M-map,
(
	"b0_bp": 0,
	"x0_bp": 0,
	"l-a_all": auto,
	"x-a_all": auto,
));

@for $i from $mlu-My-range through 1 {
	$value: $i * 1gg;
	$mlu-M-map: map-merge($mlu-M-map, ("t" + $value: $value));
	$mlu-M-map: map-merge($mlu-M-map, ("b" + $value: $value));
}

$mlu-M-map: map-merge($mlu-M-map,
(
	"b-2gg": -2gg,
	"b-1gg": -1gg,
	"b2gg_bp": 2gg,
	"b-8su": -8su,
	"b-6su": -6su,
	"b-4su": -4su,
	"b1su": 1su,
	"b2su": 2su,
	"b3su": 3su,
	"b4su": 4su,
	"b6su": 6su,
	"b8su": 8su,
	"x-1gg": -1gg,
	"x-4su": -4su,
	"x-3su": -3su,
	"x-2su": -2su,
	"l-2gg": -2gg,
	"l-1gg": -1gg,
	"l1gg": 1gg,
	"l2gg": 2gg,
));

@if $MLU-FLAG-COL-MARGIN {
	$mlu-M-map: map-merge($mlu-M-map,
	(
		"x1gg_bp": 1gg,
		"l1gg_bp": 1gg,
	));
}

@include mlu-mk-M($mlu-M-map);
