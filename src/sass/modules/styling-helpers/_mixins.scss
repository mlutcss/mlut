@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

/*
Styling helpers

Useful tools set for designing mockup.

Weight: 0

Styleguide: sass_modules.styl_help
*/

// restore-Ol
//
// Restore default browser outline on focus state.
// ```scss
//.link {
//		@include restore-Ol;
//}
// ```
// CSS
// ```css
//.link:focus {
//		outline: 1px dotted #212121;
//		outline: -webkit-focus-ring-color auto 5px;
//}
// ```
//
// Styleguide: sass_modules.styl_help.restore_ol

@mixin restore-Ol {
	&:focus {
		outline: 1px dotted #212121;
		outline: -webkit-focus-ring-color auto 5px;
	}
}

// circle
//
// Generate circle.
// ```scss
//.block {
//		@include circle(32px, #f00);
//}
// ```
// CSS
// ```css
//.block {
//		width: 32px;
//		height: 32px;
//		background-color: #f00;
//		border-radius: 50%;
//}
// ```
//
// $diametr - circle diametr. Can be number.
// $bgc = transparent - circle `background-color`. Can be color.
//
// Styleguide: sass_modules.styl_help.circle

@mixin circle($diametr, $bgc: transparent) {
	width: $diametr;
	height: $diametr;
	background-color: $bgc;
	border-radius: 50%;
}

// triangle
//
// Generate blank for border triangle.
// ```scss
//.block {
//		@include triangle(14px);
//}
// ```
// CSS
// ```css
//.block {
//		width: 0px;
//		height: 0px;
//		border: 14px transparent solid;
//}
// ```
//
// $size - triangle size.
// For create triangle you need to add `border-color` for one of side
// after this mixin.
// For example: `border-top-color: #f00`.
//
// Styleguide: sass_modules.styl_help.triangle

@mixin triangle($size) {
	width: 0px;
	height: 0px;
	border: $size transparent solid;
}

// bgi-hexagon
//
// Generate hexagon with CSS `linear-gradient()` in `background-image`. See demo [here](section-examples.html#kssref-examples-other-hexagon).
// ```scss
//.block {
//		@include bgi-hexagon($bgc: (#306, #d15));
//}
// ```
// CSS
// ```css
//.block {
//		box-sizing: border-box;
//		background-repeat: no-repeat;
//		background-position: 0px 0px, 100% 0px, 50% 50%, 0px 102%, 100% 102%;
//		background-size: 51% 27%, 51% 27%, 100% 48%, 51% 28%, 51% 28%;
//		background-image: linear-gradient(150deg, transparent 50%, #306 50%), linear-gradient(-150deg, transparent 50%, #306 50%), linear-gradient(#306, #d15), linear-gradient(-330deg, transparent 50%, #d15 50%), linear-gradient(330deg, transparent 50%, #d15 50%);
//}
// ```
//
// $edge-ang = 150deg - linear-gradient angle of hexagon edges. Can be only number in `deg`.
// $edge-cs = 50% - is color-stop in linear-gradient of hexagon edges. Can be number with unit.
// $bgc = #000 - hexagon color. It can be single color or list in linear-gradient
// value format. For example: `(167deg, blue 50%, #f0f, #000)`.
// Angle in gradient can be only number in `deg`. If you pass gradient value,
// top hexagon edge get first color, bottom edge get last color and
// hexagon body get full gradient.
// $body-size = (100% 48%) - `background-size` of linear-gradient of hexagon body.
// $change = false - bool flag for generate a change in color or size of an existing hexagon.
//
// Styleguide: sass_modules.styl_help.bgi_hexagon

// Hexagon
//
// Hexagon demo generated with [bgi-hexagon](section-sass_modules.html#kssref-sass_modules-styl_help-bgi_hexagon) mixin.
//
// Markup:
// <div class="test-hex"></div>
//
// Styleguide: examples.other.hexagon

@mixin bgi-hexagon($edge-ang: 150deg, $edge-cs: 50%, $bgc: #000,
$body-size: (100% 48%), $change: false) {

	@if not (meta.type-of($edge-ang) == "number" and math.unit($edge-ang) == "deg") {
		@error "Invalid value of argument $edge-and - '#{$edge-ang}'. Expected angle in deg.";
	}

	$first-color: $bgc;
	$last-color: $first-color;
	$body-gradient: ($bgc, $bgc);
	$edge-ang-bot: $edge-ang + 180;

	@if meta.type-of($bgc) == "list" {
		$first-color: list.nth(list.nth($bgc, 1), 1);
		$val-type: meta.type-of($first-color);

		@if $val-type == "number" and math.unit($first-color) == "deg" {
			$first-color: list.nth(list.nth($bgc, 2), 1);
		} @else if $val-type != "color" or ($val-type == "number" and math.is-unitless(list.nth($bgc, 1))) {
			@error "Invalid gradient format: first value can be angle in deg or color but now value is '#{$first-color}'";
		}

		$last-color: list.nth(list.nth($bgc, list.length($bgc)), 1);
		$body-gradient: $bgc;
	} @else if meta.type-of($bgc) != "color" {
		@error "Wrong type of argument $bgc: '#{meta.type-of($bgc)}'. Expected 'color' or 'list'";
	}

	@if not $change {
		box-sizing: border-box;
		background-repeat: no-repeat;
		background-position: 0px 0px, 100% 0px, 50% 50%, 0px 102%, 100% 102%;
	}

	@if not $change or $body-size != (100% 48%) {
		background-size: 51% 27%, 51% 27%, $body-size, 51% 28%, 51% 28%;
	}

	background-image: linear-gradient($edge-ang, transparent $edge-cs, $first-color $edge-cs),
		linear-gradient(-$edge-ang, transparent $edge-cs, $first-color $edge-cs),
		linear-gradient($body-gradient),
		linear-gradient(-$edge-ang-bot, transparent $edge-cs, $last-color $edge-cs),
		linear-gradient($edge-ang-bot, transparent $edge-cs, $last-color $edge-cs);
}

// def-hover
//
// Simple hover wich change color
// to lighter on hover and darker on active.
// ```scss
//.btn--common {
//		@include def-hover(#f00);
//}
// ```
// CSS
// ```css
//.btn--common:hover,
//.btn--common:focus {
//		background-color: #ff2929;
//}
//
//.btn--common:active {
//		background-color: #e60000;
//}
// ```
//
// $color - init color that will change.
// $prop = background-color - CSS property that will change.
// $lighten = 8% - percent on which the `$color` will become lighten
// with sass function `lighten` on `:hover`.
// $darken = $lighten-3 - the same at `$lighten` but `$color` will change
// on `:active`.
//
// Styleguide: sass_modules.styl_help.def_hover

@mixin def-hover($color, $prop: "bgc", $lighten: 8%, $darken: ($lighten - 3)) {
	$prop: if($prop == "bgc", "background-color", $prop);

	&:hover,
	&:focus {
		#{$prop}: color.adjust($color, $lightness: $lighten);
	}

	&:active {
		#{$prop}: color.adjust($color, $lightness: -$darken);
	}
}

// ie11-Ai-c
//
// Hack for [bug](https://github.com/philipwalton/flexbugs/issues/231) with `align-items: center` and `min-height` in IE11. No side effects were noticed in other browsers, but be careful using this.
// ```scss
//.foo {
//		@include ie11-Ai-c;
//}
// ```
// CSS
// ```css
//.foo:after {
//		min-height: inherit;
//		font-size: 0;
//		content: "";
//}
// ```
//
// Styleguide: sass_modules.styl_help.ie11_aic

@mixin ie11-Ai-c {
	&:after {
		min-height: inherit;
		font-size: 0;
		content: "";
	}
}

// sprite-mods
//
// Generator BEM modifiers for block with [icon](#kssref-sass_modules-styl_help-sprite_icon).
// ```scss
//$icons: (
//		"vk": (27px, 16px, -5px, -5px),
//		"fb": (13px, 28px, -27px, -5px),
//);
//
//.soc-icon {
//		@include sprite-mods($icons);
//}
// ```
// CSS
// ```css
//.soc-icon--vk:before {
//		width: 27px;
//		height: 16px;
//		background-position-x: -5px;
//}
//
//.soc-icon--fb:before {
//		width: 13px;
//		height: 28px;
//		background-position-x: -27px;
//}
// ```
//
// $sprite - map with icons data. Icon rendered as a pseudo-element.
// Sprite item example: `modifier-name: (width, height, bgpx, bgpy)`.
// If icons have the same sizes you can write in map only 2 params: `modifier-name: (bgpx, bgpy)`. <br>
// All icon data lists must be equal length.
// If one or some parameters the same in all icons, it will not be
// generated in modifiers that DRY. Write repeating
// parameter in block class.
// $pseudo = "before" - pseudo-element in which the icon will be inserted.
//
// Styleguide: sass_modules.styl_help.sprite_mods

@mixin sprite-mods($sprite, $pseudo: "before") {
	@if meta.type-of($sprite) != "map" {
		@error "Wrong type of argument $sprite: '#{meta.type-of($sprite)}'. Expected 'map'";
	}

	$diff-prop-flags: (false, false, false, false);
	$icons-data-list: map.values($sprite);

	@each $value in $icons-data-list {
		$i: list.index($icons-data-list, $value);

		@if $i > 1 {
			$prev-value: list.nth($icons-data-list, $i - 1);

			@if list.length($value) != list.length($prev-value) {
				@error "Invalid format of sprite item data: all icons data lists must have equal count of parameters";
			}

			@for $j from 1 through list.length($value) {
				@if list.nth($value, $j) != list.nth($prev-value, $j) {
					$diff-prop-flags: list.set-nth($diff-prop-flags, $j, 1);
				}
			}
		}
	}

	@each $key, $value in $sprite {
		$val-length: list.length($value);

		@at-root {
			&--#{$key}:#{$pseudo} {
				@if $val-length == 4 {
					@if list.nth($diff-prop-flags, 1) {
						width: list.nth($value, 1);
					}

					@if list.nth($diff-prop-flags, 2) {
						height: list.nth($value, 2);
					}
				} @else if $val-length != 2 {
					@error "Invalid format of sprite item data: '(#{$value})'. Expected 2 or 4 parameters";
				}

				@if list.nth($diff-prop-flags, $val-length - 1) and list.nth($diff-prop-flags, $val-length) {
					background-position: list.nth($value, $val-length - 1) list.nth($value, $val-length);
				} @else if list.nth($diff-prop-flags, $val-length - 1) {
					background-position-x: list.nth($value, $val-length - 1);
				} @else if list.nth($diff-prop-flags, $val-length) {
					background-position-y: list.nth($value, $val-length);
				}
			}
		}
	}
}

// sprite-icon
//
// Generate block with icon from css-sprite in pseudo-element.
// ```scss
//.icon {
//		@include sprite-icon();
//}
// ```
// CSS
// ```css
//.icon {
//		position: relative;
//}
//
//.icon:before {
//		position: absolute;
//		background-image: url("../img/css_sprites.png");
//		background-repeat: no-repeat;
//		content: "";
//}
//```
//
// $sprite =  "../img/css_sprites.png" - path to css-sprite in png. Can be string.
// $pseudo = "before" - type of pseudo-element: before or after.
// @content - can take additional CSS into pseudo-element.
//
// Styleguide: sass_modules.styl_help.sprite_icon

@mixin sprite-icon($sprite: "../img/css_sprites.png", $pseudo: "before") {
	position: relative;

	&:#{$pseudo} {
		position: absolute;
		background-image: url($sprite);
		background-repeat: no-repeat;
		content: "";

		@content;
	}
}
