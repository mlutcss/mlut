// At-rules
//
// Settings for media queries and other CSS at-rules.
//
// $at-rules - main map with settings.
//
// Styleguide: sass-tools.settings.at_rules

@use 'sass:map';
@use 'sass:string';
@use 'utils' as mlu;

// Breakpoints
//
// Breakpoint names and values.
//
// $mlu-bp-xs = 0 - `xs`
// $mlu-bp-sm = 520px - `sm`
// $mlu-bp-md = 760px - `md`
// $mlu-bp-lg = 960px - `lg`
// $mlu-bp-xl = 1168px - `xl`
//
// Styleguide: sass-tools.settings.at_rules.breakpoints

$bp-xs: 'xs' !default;
$bp-sm: 'sm' !default;
$bp-md: 'md' !default;
$bp-lg: 'lg' !default;
$bp-xl: 'xl' !default;
$bp-all: 'BpAll' !default;
$kArOnly: 'ArOnly' !default;
$kArSt: 'ArSt' !default;
$kArStOnly: 'ArStOnly' !default;

$at-rules-data: (
	'media': (
		'alias': '',
		'types': (
			'prn': print,
			'scr': screen,
		),
		'custom': (
		),
	),
	'supports': (
		'alias': 's',
		'custom': (
		),
	),
) !default;

$at-rules-cfg: (
	'abbr-operators': (
		mlu.$tUSv,
		'<=',
		'>=',
		'>',
		'<',
	),
	'tokens': (
		'str-value': mlu.$tUSv,
		'num-value': mlu.$tUNv,
		'or': mlu.$tSOr,
		'and': mlu.$tSAnd,
		'custom': mlu.$tSCs,
		'not': mlu.$tSNot,
		'ar': '@',
		'this-util': mlu.$tSTu,
	),
	'breakpoints': (
		$bp-sm: 520px,
		$bp-md: 760px,
		$bp-lg: 960px,
		$bp-xl: 1168px,
	),
	'all-breakpoints': (
		$bp-xs: 0,
	),
	'keywords': (
		$bp-all: 'breakpoints',
		$kArOnly: null,
		$kArSt: null,
		$kArStOnly: null,
	),
) !default;

$-general-registry: ();

@each $key, $value in map.get(mlu.$utils-data, 'general', 'registry') {
	$-general-registry: map.set(
		$-general-registry,
		string.to-lower-case($key),
		$value
	);
}

mlu.$utils-data: map.set(
	mlu.$utils-data,
	'media',
	(
		'registry': map.deep-merge(
			$-general-registry,
			(
				'hv': hover,
				'ahv': any-hover,
				'pn': pointer,
				'apn': any-pointer,
				'cg': color-gamut,
				'fc': forced-colors,
				'dm': display-mode,
				'ori': orientation,
				'prfcs': prefers-color-scheme,
				'prfrm': prefers-reduced-motion,
				'mn': (
					'props': monochrome,
					'type': 'unitless',
				),
				'gd': (
					'props': grid,
					'type': 'unitless',
				),
				'c': (
					'props': color,
					'type': 'unitless',
				),
				'rsl': (
					'props': resolution,
					'type': 'resolution',
				),
			),
		),
		'map': (
			'pn': (
				'c': coarse,
				'f': fine,
			),
			'apn': (
				'c': coarse,
				'f': fine,
			),
			'cg': (
				'p': p3,
				's': 'srgb',
				'r': rec2020,
			),
			'dm': (
				'': fullscreen,
				's': standalone,
				'mu': minimal-ui,
				'b': browser,
			),
			'ori': (
				'': landscape,
				'p': portrait,
			),
			'prfcs': (
				'': dark,
				'l': light,
			),
			'rsl': (
				'i': infinite,
			),
		),
	),
);

$at-rules-cfg: map.merge(
	$at-rules-cfg,
	'all-breakpoints',
	map.get($at-rules-cfg, 'breakpoints')
);

$at-rules: () !default;
$at-rules-conf: () !default;

mlu.$utils-data: mlu.merge-utils-data(mlu.$utils-data, $at-rules, 'media');

$at-rules-data: map.deep-merge($at-rules-data, $at-rules);
$at-rules-cfg: map.deep-merge($at-rules-cfg, $at-rules-conf);

$breakpoints: map.get($at-rules-cfg, 'breakpoints');

$tASv: map.get($at-rules-cfg, 'tokens', 'str-value');
$tANv: map.get($at-rules-cfg, 'tokens', 'num-value');
$tAOr: map.get($at-rules-cfg, 'tokens', 'or');
$tAAnd: map.get($at-rules-cfg, 'tokens', 'and');
$tANot: map.get($at-rules-cfg, 'tokens', 'not');
$tACs: map.get($at-rules-cfg, 'tokens', 'custom');
$tAAr: map.get($at-rules-cfg, 'tokens', 'ar');
$tATu: map.get($at-rules-cfg, 'tokens', 'this-util');
