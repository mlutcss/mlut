// At-rules
//
// Settings for media queries and other CSS at-rules.
//
// $at-rules - main map with settings.
//
// Styleguide: sass-tools.settings.at_rules

@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:math';
@use '../base' as ml;
@use 'utils' as ud;

// Breakpoints
//
// Breakpoint names and values.
//
// $ml-bp-xs = 0 - `xs`
// $ml-bp-sm = 520px - `sm`
// $ml-bp-md = 760px - `md`
// $ml-bp-lg = 960px - `lg`
// $ml-bp-xl = 1168px - `xl`
//
// Styleguide: sass-tools.settings.at_rules.breakpoints

$bp-xs: 'xs' !default;
$bp-sm: 'sm' !default;
$bp-md: 'md' !default;
$bp-lg: 'lg' !default;
$bp-xl: 'xl' !default;
$bp-all: 'BpAll' !default;
$kArOnly: 'ArOnly' !default;
$kArSt: 'ArSt' !default;
$kArStOnly: 'ArStOnly' !default;

$at-rules-db: (
	'media': (
		'alias': 'm',
		'types': (
			'prn': print,
			'scr': screen,
		),
		'custom': (
		),
	),
	'supports': (
		'alias': 's',
		'custom': (
		),
	),
) !default;

$at-rules-cfg: (
	'abbr-separators': (
	),
	'tokens': (
		'or': ml.$tSOr,
		'and': ml.$tSAnd,
		'custom': ml.$tSCs,
		'not': ml.$tSNot,
		'ar': '@',
		'this-util': ml.$tSTu,
		'greater-equal': '>=',
		'less-equal': '<=',
		'greater': '>',
		'less': '<',
	),
	'breakpoints': (
		$bp-sm: 520px,
		$bp-md: 760px,
		$bp-lg: 960px,
		$bp-xl: 1168px,
	),
	'keywords': (
		$bp-all: 'breakpoints',
		$kArOnly: null,
		$kArStOnly: null,
		$kArSt: null,
	),
) !default;

$at-rules-data: () !default;
$at-rules-data-ext: () !default;
$at-rules-config: () !default;
$at-rules-config-ext: () !default;
$breakpoints: () !default;
$breakpoints-ext: () !default;

$at-rules-db: map.deep-merge($at-rules-db, $at-rules-data);
$at-rules-db: map.deep-merge($at-rules-db, $at-rules-data-ext);
$at-rules-cfg: map.deep-merge($at-rules-cfg, $at-rules-config);
$at-rules-cfg: map.deep-merge($at-rules-cfg, $at-rules-config-ext);
$at-rules-cfg: map.merge($at-rules-cfg, 'breakpoints', $breakpoints);
$at-rules-cfg: map.merge($at-rules-cfg, 'breakpoints', $breakpoints-ext);

$bp-map: map.get($at-rules-cfg, 'breakpoints');
$-bp-values: map.values($bp-map);
$bp-keys: map.keys($bp-map);
$bp-map: ();

@for $i from 1 through list.length($-bp-values) {
	$min-bp: math.min($-bp-values...);
	$min-index: list.index($-bp-values, $min-bp);
	$-bp-values: list.set-nth($-bp-values, $min-index, ml.$number-max);
	$bp-map: map.set($bp-map, list.nth($bp-keys, $min-index), $min-bp);
}

$at-rules-cfg: map.set($at-rules-cfg, 'breakpoints', $bp-map);
$-custom-global-kw: map.get(ud.$utils-db, 'common', 'keywords', 'global');
$-bp-kw-map: ();

@each $key, $value in $bp-map {
	$-bp-kw-map: map.set($-bp-kw-map, ml.$tUGkw + $key, $value);
}

$global-kw-bp: map.keys($-bp-kw-map);

@if $-custom-global-kw {
	$-bp-kw-map: map.merge($-bp-kw-map, $-custom-global-kw);
}

ud.$utils-db: map.set(
	ud.$utils-db, 'common', 'keywords', 'global', $-bp-kw-map
);

$tAOr: map.get($at-rules-cfg, 'tokens', 'or');
$tAAnd: map.get($at-rules-cfg, 'tokens', 'and');
$tANot: map.get($at-rules-cfg, 'tokens', 'not');
$tACs: map.get($at-rules-cfg, 'tokens', 'custom');
$tAAr: map.get($at-rules-cfg, 'tokens', 'ar');
$tATu: map.get($at-rules-cfg, 'tokens', 'this-util');
$tAGte: map.get($at-rules-cfg, 'tokens', 'greater-equal');
$tALse: map.get($at-rules-cfg, 'tokens', 'less-equal');
$tAGt: map.get($at-rules-cfg, 'tokens', 'greater');
$tALs: map.get($at-rules-cfg, 'tokens', 'less');

$at-rules-cfg: map.set(
	$at-rules-cfg,
	'abbr-separators',
	list.join(
		(
			$tAGte,
			$tALse,
			$tAGt,
			$tALs,
		),
		map.get($at-rules-cfg, 'abbr-separators')
	)
);

$abbr-separators: ();

@each $item in list.join(
	map.get($at-rules-cfg, 'abbr-separators'),
	map.get(ml.$utils-cfg, 'abbr-separators'),
) {
	@if $item != '' {
		$abbr-separators: list.append($abbr-separators, $item);
	}
}
