@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:meta';

@use '../base' as ml;

$uv-css-var-prefix: ml.$css-var-prefix !default;
$cv-pref: '--' + ml.$css-var-prefix;

$utils-data: () !default;
$utils-data-ext: () !default;
$utils-map: ();

$-css-wide-kw: (
	'ih': inherit,
	'ini': initial,
	'rv': revert,
	'us': unset,
);
$-bd-kw-links: ('border', 'line-style', 'line-width');

@function -gdrl-val-prefix($values) {
	@return -gdl-val-prefix($values, 'repeating-linear-gradient');
}

@function -gdl-val-prefix($values, $type: 'linear-gradient') {
	$first-list: list.nth($values, 1);
	$first-item: list.nth($first-list, 1);

	@if (
		meta.type-of($first-item) == 'string' and
		string.index($first-item, 'var(') != 1
	) {
		$first-list: list.join(to, $first-list);
	}

	@return meta.call(
		meta.get-function($type, true),
		list.set-nth($values, 1, $first-list)
	);
}

//stylelint-disable
$utils-db: (
	'utils': (
		'registry': (
			'-Gscc': (
				'properties': ml.$var-gscc,
				'value-type': 'unitless',
			),
			'-Gsfd': ml.$var-gsfd,
			'-Gsg': (
				'properties': (
					ml.$var-gg-rem,
					ml.$var-gg,
				),
				'directions': true,
			),
			'-Gsf': (
				'properties': (
					$cv-pref + 'gscf',
					$cv-pref + 'gsof',
				),
				'keywords': (
					'': (
					calc(var(#{$cv-pref}gsc) / var(ml.$var-gscc) * 100% - var(ml.$var-gsfd, var(ml.$var-gg)) * 2),
					calc(var(#{$cv-pref}gso) / var(ml.$var-gscc) * 100% + var(ml.$var-gsfd, var(ml.$var-gg))),
				),
				),
			),

			// POSITION
			'Ps': (
				'properties': position,
				'keywords': (
					'': relative,
					'a': absolute,
					'f': fixed,
					'r': relative,
					's': static,
					'sk': sticky,
				),
			),
			'T': (
				'properties': top,
				'default-unit': 'rem',
			),
			'R': right,
			'B': (
				'properties': bottom,
				'default-unit': 'rem',
			),
			'L': left,
			'-X': (
				'properties': (
					right, left,
				),
			),
			'-Y': (
				'properties': (
					top, bottom,
				),
				'default-unit': 'rem',
			),
			'-I': (
				'properties': (
					top, right, bottom, left
				),
			),
			'Zi': (
				'properties': z-index,
				'value-type': 'unitless',
			),

			// BOX-MODEL
			'D': (
				'properties': display,
				'keywords': (
					'': block,
					'b': block,
					'i': inline,
					'ib': inline-block,
					'f': flex,
					'if': inline-flex,
					'g': grid,
					'ig': inline-grid,
					'li': list-item,
					'ri': run-in,
					'flr': flow-root,
					'c': contents,
					't': table,
					'it': inline-table,
					'tr': table-row,
					'tc': table-cell,
					'tcl': table-column,
					'tcg': table-column-group,
					'thg': table-header-group,
					'tfg': table-footer-group,
					'trg': table-row-group,
				),
			),
			'-D': (
				'properties': (
					display, flex-wrap, position, width, height,
					margin, padding, overflow, white-space, border, clip,
				),
				'repeat-prop-values': false,
				'keywords': (
					'mf': (flex, wrap),
					'mif': (inline-flex, wrap),
					'vh': (
						null, null, absolute, 1px, 1px, -1px, 0, hidden, nowrap, 0, rect(0 0 0 0)
					),
					'vv': (
						null, null, static, auto, auto, 0, null, visible, normal, null, auto
					),
				),
			),

			'Fld': (
				'properties': flex-direction,
				'keywords': (
					'c': column,
					'cr': column-reverse,
					'r': row,
					'rr': row-reverse,
				),
			),
			'Flw': (
				'properties': flex-wrap,
				'keywords': (
					'n': nowrap,
					'w': wrap,
					'wr': wrap-reverse,
				),
			),
			'Flg': (
				'properties': flex-grow,
				'value-type': 'unitless',
			),
			'Fls': (
				'properties': flex-shrink,
				'value-type': 'unitless',
			),
			'Fl': flex,
			'Ac': (
				'properties': align-content,
				'keywords': 'box-alignment',
			),
			'As': (
				'properties': align-self,
				'keywords': 'box-alignment',
			),
			'Ai': (
				'properties': align-items,
				'keywords': 'box-alignment',
			),
			'Jc': (
				'properties': justify-content,
				'keywords': 'box-alignment',
			),
			'Ji': (
				'properties': justify-items,
				'keywords': 'box-alignment',
			),
			'Js': (
				'properties': justify-self,
				'keywords': 'box-alignment',
			),
			'Plcc': (
				'properties': place-content,
				'keywords': 'box-alignment',
			),
			'Plci': (
				'properties': place-items,
				'keywords': 'box-alignment',
			),
			'Plcs': (
				'properties': place-self,
				'keywords': 'box-alignment',
			),
			'Od': (
				'properties': order,
				'value-type': 'unitless',
			),

			'G': (
				'properties': grid,
				'value-type': 'grid-tpl',
				'multi-list-separator': ml.$tULs2,
				'keywords': ('grid', 'sizing'),
			),
			'Gt': (
				'properties': grid-template,
				'value-type': 'grid-tpl',
				'keywords': 'sizing',
			),
			'Gtc': (
				'properties': grid-template-columns,
				'value-type': 'grid-tpl',
				'keywords': 'sizing',
			),
			'Gc': (
				'properties': grid-column,
				'value-type': 'grid-span',
				'multi-list-separator': ml.$tULs2,
				'keywords': 'grid-area',
			),
			'Gcs': (
				'properties': grid-column-start,
				'value-type': 'kw-unitless',
				'keywords': 'grid-area',
			),
			'Gce': (
				'properties': grid-column-end,
				'value-type': 'kw-unitless',
				'keywords': 'grid-area',
			),
			'Gtr': (
				'properties': grid-template-rows,
				'value-type': 'grid-tpl',
				'keywords': 'sizing',
			),
			'Gr': (
				'properties': grid-row,
				'value-type': 'grid-span',
				'multi-list-separator': ml.$tULs2,
				'keywords': 'grid-area',
			),
			'Grs': (
				'properties': grid-row-start,
				'value-type': 'kw-unitless',
				'keywords': 'grid-area',
			),
			'Gre': (
				'properties': grid-row-end,
				'value-type': 'kw-unitless',
				'keywords': 'grid-area',
			),
			'Ga': (
				'properties': grid-area,
				'value-type': 'grid-span',
				'multi-list-separator': ml.$tULs2,
				'keywords': 'grid-area',
			),
			'Gatc': (
				'properties': grid-auto-columns,
				'keywords': 'sizing',
			),
			'Gatr': (
				'properties': grid-auto-rows,
				'keywords': 'sizing',
			),
			'Gatf': (
				'properties': grid-auto-flow,
				'keywords': (
					'c': column,
					'd': dense,
					'r': row,
				),
			),
			'Gap': gap,
			'Rg': row-gap,
			'Clmg': column-gap,

			'F': (
				'properties': float,
				'keywords': (
					'': left,
					'l': left,
					'r': right,
				),
			),
			'Cl': (
				'properties': clear,
				'keywords': (
					'': both,
					'b': both,
					'l': left,
					'r': right,
				),
			),
			'-Cl': (
				'preset-properties': (
					'display': table,
					'content': '',
				),
				'properties': clear,
				'selector': '&::after',
				'keywords': (
					'': both,
				),
			),
			'Bxs': (
				'properties': box-sizing,
				'keywords': (
					'': border-box,
					'bb': border-box,
					'cb': content-box,
				),
			),
			'Mnw': (
				'properties': min-width,
				'keywords': 'sizing',
			),
			'Mxw': (
				'properties': max-width,
				'keywords': 'sizing',
			),
			'Mnh': (
				'properties': min-height,
				'keywords': 'sizing',
			),
			'Mxh': (
				'properties': max-height,
				'keywords': 'sizing',
			),
			'Tbl': (
				'properties': table-layout,
				'keywords': (
					'f': fixed,
				),
			),

			'M': (
				'properties': margin,
				'directions': true,
			),
			'Mt': (
				'properties': margin-top,
				'default-unit': 'rem',
			),
			'Mr': margin-right,
			'Mb': (
				'properties': margin-bottom,
				'default-unit': 'rem',
			),
			'Ml': margin-left,
			'-Mx': (
				'properties': (
					margin-right, margin-left
				),
			),
			'-My': (
				'properties': (
					margin-top, margin-bottom
				),
				'default-unit': 'rem',
			),

			'P': (
				'properties': padding,
				'directions': true,
			),
			'Pt': (
				'properties': padding-top,
				'default-unit': 'rem',
			),
			'Pr': padding-right,
			'Pb': (
				'properties': padding-bottom,
				'default-unit': 'rem',
			),
			'Pl': padding-left,
			'-Px': (
				'properties': (
					padding-right, padding-left
				),
			),
			'-Py': (
				'properties': (
					padding-top, padding-bottom
				),
				'default-unit': 'rem',
			),

			'Ov': (
				'properties': overflow,
				'keywords': 'overflow',
			),
			'Ovx': (
				'properties': overflow-x,
				'keywords': 'overflow',
			),
			'Ovy': (
				'properties': overflow-y,
				'keywords': 'overflow',
			),

			// TYPOGRAPHY
			'C': (
				'properties': color,
				'range-generator': 'color',
				'value-type': 'color',
			),
			'Fn': font,
			'Fnw': (
				'properties': font-weight,
				'value-type': 'kw-unitless',
				'keywords': (
					'b': bold,
					'bd': bolder,
					'l': lighter,
					'n': normal,
				),
			),
			'Fns': (
				'properties': font-size,
				'default-unit': 'rem',
				'keywords': 'font-size',
			),
			'-Fns': (
				'properties': (
					font-size,
					line-height,
					letter-spacing,
				),
				'repeat-prop-values': false,
				'default-unit': 'rem',
				'keywords': 'font-size',
			),
			'Fnf': (
				'properties': font-family,
				'keywords': (
					'ss0': ml.$Fnf--ss0,
					's0': (ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif),
					'm0': (ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace),
				),
			),
			'Fnst': (
				'properties': font-style,
				'keywords': (
					'': italic,
					'i': italic,
					'n': normal,
					'o': oblique,
				),
			),
			'Lnh': (
				'properties': line-height,
				'value-type': 'kw-num-length',
				'keywords': (
					'n': normal,
				),
			),
			'Lts': (
				'properties': letter-spacing,
				'keywords': (
					'n': normal,
				),
			),
			'Whs': (
				'properties': white-space,
				'keywords': (
					'': nowrap,
					'n': nowrap,
					'nm': normal,
					'p': pre,
					'pw': pre-wrap,
					'pl': pre-line,
				),
			),
			'Txa': (
				'properties': text-align,
				'keywords': (
					'': center,
					'c': center,
					'e': end,
					'j': justify,
					'l': left,
					'mp': match-parent,
					'r': right,
					's': start,
				),
			),
			'Txt': (
				'properties': text-transform,
				'keywords': (
					'': uppercase,
					'c': capitalize,
					'fw': full-width,
					'l': lowercase,
					'n': none,
					'u': uppercase,
				),
			),
			'Txuo': text-underline-offset,
			'Txi': (
				'properties': text-indent,
				'keywords': (
					'h': hanging,
					'el': each-line,
				),
			),
			'Txor': (
				'properties': text-orientation,
				'keywords': (
					'm': mixed,
					'u': upright,
					's': sideways,
				),
			),
			'Wrb': (
				'properties': word-break,
				'keywords': (
					'ba': break-all,
					'ka': keep-all,
					'n': normal,
				),
			),
			'Ovw': (
				'properties': overflow-wrap,
				'keywords': (
					'a': anywhere,
					'bw': break-word,
					'n': normal,
				),
			),
			'Wtm': (
				'properties': writing-mode,
				'keywords': (
					'ht': horizontal-tb,
					'vr': vertical-rl,
					'vl': vertical-lr,
				),
			),

			'Txd': (
				'properties': text-decoration,
				'keywords': ('text-decoration', 'line-style'),
				'value-type': 'border',
			),
			'Txdc': (
				'properties': text-decoration-color,
				'range-generator': 'color',
				'value-type': 'color',
			),
			'Txdl': (
				'properties': text-decoration-line,
				'keywords': 'text-decoration',
			),
			'Txdst': (
				'properties': text-decoration-style,
				'keywords': 'line-style',
			),
			'Txdt': (
				'properties': text-decoration-thickness,
				'keywords': 'text-decoration',
			),

			'Txs': (
				'properties': text-shadow,
				'value-type': 'border',
				'multi-list-separator': ml.$tULs1,
			),
			'Va': (
				'properties': vertical-align,
				'keywords': (
					'': top,
					'b': bottom,
					'bl': baseline,
					'm': middle,
					'sb': sub,
					'sp': super,
					't': top,
					'txb': text-bottom,
					'txt': text-top,
				),
			),
			'-Txo': (
				'properties': (
					text-overflow, overflow, white-space,
				),
				'repeat-prop-values': false,
				'keywords': (
					'': (ellipsis, hidden, nowrap),
				),
			),
			'Hp': (
				'properties': hyphens,
				'keywords': (
					'm': manual,
				),
			),
			'Tas': (
				'properties': tab-size,
				'value-type': 'num-length',
			),
			'Lss': (
				'properties': list-style,
				'keywords': (Lsst, Lssp),
			),
			'Lsst': (
				'properties': list-style-type,
				'keywords': (
					'd': disc,
					'c': circle,
					's': square,
					'dc': decimal,
					'dclz': decimal-leading-zero,
					'la': lower-alpha,
					'lr': lower-roman,
					'lg': lower-greek,
					'll': lower-latin,
					'ua': upper-alpha,
					'ul': upper-latin,
					'ur': upper-roman,
				),
			),
			'Lssp': (
				'properties': list-style-position,
				'keywords': (
					'i': inside,
					'o': outside,
				),
			),

			// BACKGROUND
			'Bgc': (
				'properties': background-color,
				'range-generator': 'color',
				'value-type': 'color',
			),
			'Bgr': (
				'properties': background-repeat,
				'keywords': (
					'nr': no-repeat,
					'rx': repeat-x,
					'ry': repeat-y,
					'r': repeat,
					's': space,
					'rn': round,
				)
			),
			'Bgp': (
				'properties': background-position,
				'keywords': 'position'
			),
			'Bgs': (
				'properties': background-size,
				'keywords': (
					'ct': contain,
					'cv': cover,
				),
			),
			'Bga': (
				'properties': background-attachment,
				'keywords': (
					'f': fixed,
					'l': local,
					's': scroll,
				),
			),
			'Bgcl': (
				'properties': background-clip,
				'keywords': 'box-ext',
			),
			'Bgo': (
				'properties': background-origin,
				'keywords': 'box-ext',
			),
			'Bgi': (
				'properties': background-image,
			),
			'-Gdl': (
				'properties': background-image,
				'last-transform-value': meta.get-function('-gdl-val-prefix'),
				'value-type': 'gradient',
				'multi-list-separator': ml.$tULs1,
				'keywords': ('position', 'gradients'),
			),
			'-Gdrl': (
				'properties': background-image,
				'last-transform-value': meta.get-function('-gdrl-val-prefix'),
				'value-type': 'gradient',
				'multi-list-separator': ml.$tULs1,
				'keywords': ('position', 'gradients'),
			),

			// TRANSFORM
			'Tf': (
				'properties': (
					transform,
					$cv-pref + 'trx',
					$cv-pref + 'try',
					$cv-pref + 'sx',
					$cv-pref + 'sy',
					$cv-pref + 'rt',
					$cv-pref + 'skx',
					$cv-pref + 'sky',
				),
				'repeat-prop-values': false,
				'keywords': (
					'': (
						(
							translateX(var(#{$cv-pref}trx))
							translateY(var(#{$cv-pref}try))
							scaleX(var(#{$cv-pref}sx))
							scaleY(var(#{$cv-pref}sy))
							rotate(var(#{$cv-pref}rt))
							skewX(var(#{$cv-pref}skx))
							skewY(var(#{$cv-pref}sky))
						),
						0, 0, 1, 1, 0, 0, 0,
					),
					'mGpu': (
						(
							translate3d(var(#{$cv-pref}trx), var(#{$cv-pref}try), 0)
							scaleX(var(#{$cv-pref}sx))
							scaleY(var(#{$cv-pref}sy))
							rotate(var(#{$cv-pref}rt))
							skewX(var(#{$cv-pref}skx))
							skewY(var(#{$cv-pref}sky))
						),
						0, 0, 1, 1, 0, 0, 0,
					),
				),
			),
			'-Tr': (
				'properties': (
					$cv-pref + 'trx',
					$cv-pref + 'try',
				),
			),
			'-S': (
				'properties': (
					$cv-pref + 'sx',
					$cv-pref + 'sy',
				),
				'value-type': 'alpha',
			),
			'-Sx': (
				'value-type': 'alpha',
			),
			'-Sy': (
				'value-type': 'alpha',
			),
			'-Sk': (
				'properties': (
					$cv-pref + 'skx',
					$cv-pref + 'sky',
				),
				'value-type': 'angle',
			),
			'-Skx': (
				'value-type': 'angle',
			),
			'-Sky': (
				'value-type': 'angle',
			),
			'-Rt': (
				'value-type': 'angle',
			),

			// VISUAL
			'Ol': (
				'properties': outline,
				'value-type': 'border',
				'keywords': ('line-style', 'line-width'),
			),
			'Olc': (
				'properties': outline-color,
				'value-type': 'color',
			),
			'Bxsd': (
				'properties': box-shadow,
				'value-type': 'border',
				'multi-list-separator': ml.$tULs1,
				'keywords': (
					'i': inset,
				),
			),
			'Bxdb': (
				'properties': box-decoration-break,
				'keywords': (
					's': slice,
					'c': clone,
				),
			),
			'Vs': (
				'properties': visibility,
				'keywords': (
					'': hidden,
					'c': collapse,
					'h': hidden,
					'v': visible,
				),
			),
			'Cs': (
				'properties': cursor,
				'keywords': (
					'': pointer,
					'c': cell,
					'clr': col-resize,
					'cp': copy,
					'ch': crosshair,
					'd': default,
					'er': e-resize,
					'ewr': ew-resize,
					'g': grab,
					'gb': grabbing,
					'h': help,
					'm': move,
					'nr': n-resize,
					'nta': not-allowed,
					'ner': ne-resize,
					'neswr': nesw-resize,
					'nwser': nwse-resize,
					'nsr': ns-resize,
					'nwr': nw-resize,
					'p': pointer,
					'pr': progress,
					'rr': row-resize,
					'sr': s-resize,
					'ser': se-resize,
					'swr': sw-resize,
					't': text,
					'vt': vertical-text,
					'wr': w-resize,
					'wt': wait,
					'zi': zoom-in,
					'zo': zoom-out,
				),
			),
			'O': (
				'properties': opacity,
				'value-type': 'alpha',
			),
			'Bfv': (
				'properties': backface-visibility,
				'keywords': (
					'v': visible,
					'h': hidden,
				),
			),
			'Ojf': (
				'properties': object-fit,
				'keywords': (
					'': cover,
					'ct': contain,
					'cv': cover,
					'f': fill,
					'sd': scale-down,
				),
			),
			'Ojp': (
				'properties': object-position,
				'keywords': 'position'
			),
			'Is': (
				'properties': isolation,
				'keywords': (
					'i': isolate,
				),
			),

			// BORDER
			'Bd': (
				'properties': border,
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),
			'Bdt': (
				'properties': border-top,
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),
			'Bdr': (
				'properties': border-right,
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),
			'Bdb': (
				'properties': border-bottom,
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),
			'Bdl': (
				'properties': border-left,
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),
			'-Bdx': (
				'properties': (
					border-right, border-left,
				),
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),
			'-Bdy': (
				'properties': (
					border-top, border-bottom,
				),
				'value-type': 'border',
				'keywords': $-bd-kw-links,
			),

			'Bdc': (
				'properties': border-color,
				'range-generator': 'color',
				'value-type': 'color',
				'directions': true,
			),
			'Bdtc': (
				'properties': border-top-color,
				'value-type': 'color',
			),
			'Bdrc': (
				'properties': border-right-color,
				'value-type': 'color',
			),
			'Bdbc': (
				'properties': border-bottom-color,
				'value-type': 'color',
			),
			'Bdlc': (
				'properties': border-left-color,
				'value-type': 'color',
			),
			'-Bdxc': (
				'properties': (
					border-right-color, border-left-color
				),
				'value-type': 'color',
			),
			'-Bdyc': (
				'properties': (
					border-top-color, border-bottom-color
				),
				'value-type': 'color',
			),

			'Bds': (
				'properties': border-style,
				'keywords': 'line-style',
			),
			'Bdts': (
				'properties': border-top-style,
				'keywords': 'line-style',
			),
			'Bdrs': (
				'properties': border-right-style,
				'keywords': 'line-style',
			),
			'Bdbs': (
				'properties': border-bottom-style,
				'keywords': 'line-style',
			),
			'Bdls': (
				'properties': border-left-style,
				'keywords': 'line-style',
			),
			'-Bdxs': (
				'properties': (
					border-right-style,
					border-left-style,
				),
				'keywords': 'line-style',
			),
			'-Bdys': (
				'properties': (
					border-top-style,
					border-bottom-style,
				),
				'keywords': 'line-style',
			),

			'Bdw': (
				'properties': border-width,
				'keywords': 'line-width',
			),
			'Bdtw': (
				'properties': border-top-width,
				'keywords': 'line-width',
			),
			'Bdrw': (
				'properties': border-right-width,
				'keywords': 'line-width',
			),
			'Bdbw': (
				'properties': border-bottom-width,
				'keywords': 'line-width',
			),
			'Bdlw': (
				'properties': border-left-width,
				'keywords': 'line-width',
			),
			'-Bdxw': (
				'properties': (
					border-right-width,
					border-left-width,
				),
				'keywords': 'line-width',
			),
			'-Bdyw': (
				'properties': (
					border-top-width,
					border-bottom-width,
				),
				'keywords': 'line-width',
			),

			'Bdcl': (
				'properties': border-collapse,
				'keywords': (
					'': collapse,
					'c': collapse,
					's': separate,
				),
			),
			'Bdrd': (
				'properties': border-radius,
				'multi-list-separator': ml.$tULs2,
			),

			// TRANSITION AND ANIMATION
			'Ts': (
				'properties': transition,
				'value-type': 'abbr-kw',
				'multi-list-separator': ml.$tULs1,
				'keywords': (
					'mAll': ml.$Trsdu-def,
				),
			),
			'-Ts': (
				'preset-properties': (
					'transition-duration': ml.$Trsdu-def,
				),
				'properties': transition-property,
				'value-type': 'abbr-kw',
				'multi-list-separator': ml.$tULs1,
				'keywords': 'transition-props'
			),
			'Tsp': (
				'properties': transition-property,
				'value-type': 'abbr-kw',
				'multi-list-separator': ml.$tULs1,
				'keywords': 'transition-props'
			),
			'Tsd': (
				'properties': transition-duration,
				'multi-list-separator': ml.$tULs1,
			),
			'Tsdl': (
				'properties': transition-delay,
				'multi-list-separator': ml.$tULs1,
			),
			'Tstf': (
				'properties': transition-timing-function,
				'multi-list-separator': ml.$tULs1,
				'keywords': 'easing-function'
			),

			'An': (
				'properties': animation,
				'value-type': 'kw-unitless',
				'multi-list-separator': ml.$tULs1,
				'keywords': (
					// TODO: maybe try to optimize it and combine a part of keywords to one map
					'animation', 'easing-function', 'infinite', Andr, Anfm, Anps,
				),
			),
			'Ann': (
				'properties': animation-name,
				'multi-list-separator': ml.$tULs1,
				'keywords': 'animation',
			),
			'And': (
				'properties': animation-duration,
				'multi-list-separator': ml.$tULs1,
			),
			'Andl': (
				'properties': animation-delay,
				'multi-list-separator': ml.$tULs1,
			),
			'Antf': (
				'properties': animation-timing-function,
				'multi-list-separator': ml.$tULs1,
				'keywords': 'easing-function'
			),
			'Anic': (
				'properties': animation-iteration-count,
				'value-type': 'kw-unitless',
				'multi-list-separator': ml.$tULs1,
				'keywords': 'infinite',
			),
			'Andr': (
				'properties': animation-direction,
				'multi-list-separator': ml.$tULs1,
				'keywords': (
					'a': alternate,
					'ar': alternate-reverse,
					'nm': normal,
					'r': reverse,
				),
			),
			'Anfm': (
				'properties': animation-fill-mode,
				'multi-list-separator': ml.$tULs1,
				'keywords': (
					'b': backwards,
					'bt': both,
					'f': forwards,
				),
			),
			'Anps': (
				'properties': animation-play-state,
				'multi-list-separator': ml.$tULs1,
				'keywords': (
					'p': paused,
					'r': running,
					'rn': running,
				),
			),

			// OTHER
			'Ap': (
				'properties': appearance,
				'keywords': (
					'': none,
				),
			),
			'Acnc': (
				'properties': accent-color,
				'value-type': 'color',
			),
			'Crc': (
				'properties': caret-color,
				'value-type': 'color',
			),
			'Pne': (
				'properties': pointer-events,
				'keywords': (
					'': none,
				),
			),
			'Us': (
				'properties': user-select,
				'keywords': (
					'': none,
					't': text,
					'c': contain,
				)
			),
			'Ovsb': (
				'properties': overscroll-behavior,
				'keywords': 'overscroll',
			),
			'Ovsbx': (
				'properties': overscroll-behavior-x,
				'keywords': 'overscroll',
			),
			'Ovsby': (
				'properties': overscroll-behavior-y,
				'keywords': 'overscroll',
			),
			'Rs': (
				'properties': resize,
				'keywords': (
					'': none,
					'b': both,
					'h': horizontal,
					'v': vertical,
				),
			),
			'Ct': (
				'properties': content,
				'keywords': (
					'': "''",
					'nm': normal,
					'oq': open-quote,
					'cq': close-quote,
					'noq': no-open-quote,
					'ncq': no-close-quote,
					'ct': contents,
					'mAtt': attr(data-#{ml.$css-var-prefix}ct),
				),
			),
			'-All': (
				'properties': (
					margin, padding, font, list-style, border,
				),
				'repeat-prop-values': false,
				'keywords': (
					'sr': (0, 0, inherit, none, 0),
				),
			),
			'All': (
				'properties': all,
				'keywords': 'css',
			),
			'Ec': (
				'properties': empty-cells,
				'keywords': (
					's': show,
					'h': hide,
				),
			),
			'Cps': (
				'properties': caption-side,
				'keywords': 'position'
			),

			// SVG
			'Fi': (
				'properties': fill,
				'range-generator': 'color',
				'value-type': 'color',
			),
			'Fio': (
				'properties': fill-opacity,
				'value-type': 'alpha',
			),

			'St': (
				'properties': stroke,
				'range-generator': 'color',
				'value-type': 'color',
			),
			'Sto': (
				'properties': stroke-opacity,
				'value-type': 'alpha',
			),
			'Stda': (
				'properties': stroke-dasharray,
				'value-type': 'num-length',
			),
			'Stdo': (
				'properties': stroke-dashoffset,
				'value-type': 'num-length',
			),
			'Stlc': (
				'properties': stroke-linecap,
				'keywords': (
					'b': butt,
					'r': round,
					's': square,
				),
			),
			'Stlj': (
				'properties': stroke-linejoin,
				'keywords': (
					'a': arcs,
					'b': bevel,
					'r': round,
					'm': miter,
					'mc': miter-clip,
				),
			),
			'Stw': (
				'properties': stroke-width,
				'value-type': 'num-length',
			),
		),
		'keywords': (
			'border': (
				'': (1px solid,),
			),
			'position': map.set(
				ml.$main-directions, 'c', center
			),
			'line-style': (
				'': none,
				'd': dotted,
				'dh': dashed,
				'db': double,
				'g': groove,
				'h': hidden,
				'i': inset,
				'o': outset,
				'r': ridge,
				's': solid,
				'w': wavy,
			),
			'text-decoration': (
				'ff': from-font,
				'lt': line-through,
				'o': overline,
				'u': underline,
			),
			'line-width': (
				'm': medium,
				't': thick,
				'th': thin,
			),
			'overflow': (
				'': hidden,
				'a': auto,
				'h': hidden,
				's': scroll,
				'v': visible
			),
			'sizing': (
				'n': none,
				'fc': fit-content,
				'mc': max-content,
				'mnc': min-content,
			),
			'box-alignment': (
				'b': baseline,
				'c': center,
				'n': normal,
				'fs': flex-start,
				'fe': flex-end,
				's': stretch,
				'sb': space-between,
				'sa': space-around,
				'se': space-evenly,
			),
			'box-ext': (
				'bb': border-box,
				'cb': content-box,
				'pb': padding-box,
				't': text,
			),
			'grid-area': (
				's': span,
			),
			'grid': (
				'af': auto-flow,
				'd': dense,
			),
			'easing-function': (
				'e': ease,
				'ei': ease-in,
				'eo': ease-out,
				'eio': ease-in-out,
				'l': linear,
				'se': step-end,
				'ss': step-start,
			),
			'infinite': (
				'i': infinite,
			),
			'font-size': (
				'sl': smaller,
				// so as not to occupy `lg`
				'lr': larger,
			),
			'overscroll': (
				'c': contain,
			),
			'transition-props': (
				'': (
					background-color, border-color, color,
					fill, stroke, backdrop-filter, box-shadow,
					filter, opacity, transform,
				),
				'mClr': (
					background-color, border-color, color,
					fill, outline-color, stroke,
				),
			),
		),
	),

	'common': (
		'registry': (
			'H': (
				'properties': height,
				'keywords': 'sizing',
			),
			'W': (
				'properties': width,
				'keywords': 'sizing',
			),
			'Apcr': (
				'properties': aspect-ratio,
				'value-type': 'unitless',
			),
		),
		'keywords': (
			'css': $-css-wide-kw,
			'css-oft': map.merge(
				$-css-wide-kw,
				(
					'a': auto,
					'n': none,
				)
			),
			'colors': (
				'tp': transparent,
				'cc': currentColor,
			),
		),
	),
) !default;

$utils-groups: (
	'Borders': (
		'members': (
			Bd, Bdt, Bdr, Bdb, Bdl, -Bdx, -Bdy,
		),
	),
	'BdWidth': (
		'members': (
			Bdw, Bdtw, Bdrw, Bdbw, Bdlw, -Bdxw, -Bdyw,
		),
	),
	'BdStyle': (
		'members': (
			Bds, Bdts, Bdrs, Bdbs, Bdls, -Bdxs, -Bdys,
		),
	),
	'BdSidesColor': (
		'members': (
			Bdtc, Bdrc, Bdbc, Bdlc, -Bdxc, -Bdyc,
		),
	),
	'Overflows': (
		'members': (
			Ov, Ovx, Ovy,
		),
	),
	'Margins': (
		'members': (
			M, Mt, Mr, Mb, Ml, -Mx, -My,
		),
	),
	'Paddings': (
		'members': (
			P, Pt, Pr, Pb, Pl, -Px, -Py,
		),
	),
	'Spaces': (
		'members': (
			M, Mt, Mr, Mb, Ml, -Mx, -My,
			P, Pt, Pr, Pb, Pl, -Px, -Py,
			T, R, B, L, -X, -Y, -I,
			W, H, Mxh,
		),
	),
	'Offsets': (
		'members': (
			T, R, B, L, -X, -Y, -I,
		),
	),
	'Colors': (
		'members': (
			C, Bgc, Bdc,
		),
	),
	'ColorsExt': (
		'members': (
			C, Bgc, Bdc, Olc,
		),
	),
	'Translates': (
		'members': (
			-Tr, -Trx, -Try,
		),
	),
) !default;


$-common-registry: ();

@each $key, $value in map.get($utils-db, 'common', 'registry') {
	$-common-registry: map.set(
		$-common-registry,
		string.to-lower-case($key),
		$value
	);
}

$utils-db: map.set(
	$utils-db,
	'media',
	(
		'registry': map.deep-merge(
			$-common-registry,
			(
				'hv': hover,
				'anyh': any-hover,
				'p': (
					'properties': pointer,
					'keywords': (
						'c': coarse,
						'f': fine,
					),
				),
				'anyp': (
					'properties': any-pointer,
					'keywords': (
						'c': coarse,
						'f': fine,
					)
				),
				'cg': (
					'properties': color-gamut,
					'keywords': (
						'p': p3,
						's': 'srgb',
						'r': rec2020,
					),
				),
				'dm': (
					'properties': display-mode,
					'keywords': (
						'': fullscreen,
						'f': fullscreen,
						's': standalone,
						'mu': minimal-ui,
						'b': browser,
					),
				),
				'fc': forced-colors,
				'o': (
					'properties': orientation,
					'keywords': (
						'': landscape,
						'l': landscape,
						'p': portrait,
					),
				),
				'pfcs': (
					'properties': prefers-color-scheme,
					'keywords': (
						'': dark,
						'd': dark,
						'l': light,
					),
				),
				'pfrm': prefers-reduced-motion,
				'm': (
					'properties': monochrome,
					'value-type': 'unitless',
				),
				'g': (
					'properties': grid,
					'value-type': 'unitless',
				),
				'c': (
					'properties': color,
					'value-type': 'unitless',
				),
				'r': (
					'properties': resolution,
					'value-type': 'resolution',
					'keywords': (
						'i': infinite,
					),
				),
			),
		),
	),
);

$utils-db: map.deep-merge($utils-db, $utils-data);
$utils-db: map.deep-merge($utils-db, $utils-data-ext);
$utils-db: map.merge(
	$utils-db,
	'utils',
	'registry',
	map.get($utils-db, 'common', 'registry')
);
