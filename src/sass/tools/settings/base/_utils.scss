@use 'sass:map';
@use 'sass:list';

// Utilities
//
// Settings affecting the values and generation of the core utilities.
//
// $ml-Ff--ss0 - sans serif font stack contains default fonts on different OS.
// $ml-Ff--m0 - monospace font stack contains default fonts on different OS.
// $ml-Trsdu-def = 0.3s - default [transition](section-core-utils.html#kssref-core-utils-anim) duration.
// $ml-utils-states-psd-cls - map with abbreviations of pseudo-classes for utilities.
// $ml-utils-states-psd-elm - map with pseudo-elements abbreviations for utilities.
// $ml-utils-states - map with abbreviations of utility state names. Maps of pseudo-classes and pseudo-elements merge into it.
//
// Styleguide: sass-tools.settings.utils

// stylelint-disable
$Ff--ss0: (
	-apple-system,
	BlinkMacSystemFont,
	'Segoe UI',
	Roboto,
	Oxygen,
	Cantarell,
	Ubuntu,
	'Fira Sans',
	'Droid Sans',
	'Helvetica Neue',
	Arial,
	sans-serif
) !default;

$Ff--m0: (
	SFMono-Regular,
	Menlo,
	Monaco,
	Consolas,
	'Liberation Mono',
	'Courier New',
	monospace
) !default;
// stylelint-enable

$Trsdu-def: 0.3s !default;

// Conversion to CSS
//
// Settings of conversion utilitie values to CSS values. All variables below are maps.
//
// $util-value-types - value types and lists of utilities that belong to this type.
// $util-unit-aliases - utility unit aliases and corresponding CSS units.
// $util-custom-units - [custom unit](section-concepts.html#kssref-concepts-su) names and their number values.
// $util-css-keywords - keyword aliases and corresponding CSS global keywords.
//
// Styleguide: sass-tools.settings.utils.conversion

// Maps with utilities states
//
// ```scss
//$ml-utils-states-psd-cls: (
//		'h': hover,
//		'f': focus,
//		'fw': focus-within,
//		'h-f': (hover, focus),
//		'a': active,
//		'vl': valid,
//		'iv': invalid,
//);
//
//$ml-utils-states-psd-elm: (
//		'bf': before,
//		'af': after,
//		'fln': first-line,
//		'flt': first-letter,
//);
//
//$ml-utils-states: (
//		'noJs': null,
//);
// ```
//
// Styleguide: sass-tools.settings.utils.states

$states-ps: 'StPs' !default;
$states-cmb: 'StCmb' !default;
$kStOnly: 'StOnly' !default;
$cCtx: '-Ctx' !default;

$uv-type-base: ('global-kw', 'cust-prop',) !default;
$uv-type-default: list.join(('keyword', 'number'), $uv-type-base);
$utils-config: () !default;
$utils-config-ext: () !default;

//stylelint-disable
$utils-cfg: (
	'directed': (
		'M',
		'P',
		'Bd',
		'-X',
		'-Y',
		'-Xy',
	),

	'up-specificity': false,

	'gg-fallback-list': (
		'T', 'R', 'B', 'L', '-X', '-Y', '-Xy',
		'P', 'Pt', 'Pr', 'Pb', 'Pl', '-Px', '-Py',
		'M', 'Mt', 'Mr', 'Mb', 'Ml', '-Mx', '-My',
		'Bdw', 'Bdtw', 'Bdrw', 'Bdbw', 'Bdlw', '-Bdxw', '-Bdyw',
		'Bd', 'Bdt', 'Bdr', 'Bdb', 'Bdl', '-Bdx', '-Bdy',
		'Maw', 'Miw', 'Mah', 'Mih', 'G',
		'Fz', 'Lh', 'Lts', 'Tsh', 'Va', 'Td', 'F',
		'Bxsh', 'Ol', 'Bdrs', 'Bgsz', 'Bgp',
	),

	'value-types': (
		'default': $uv-type-default,
		'unitless': list.join('unitless', $uv-type-base),
		'kw-unitless': list.set-nth($uv-type-default, 2, 'unitless'),
		'alpha': list.join('alpha', $uv-type-base),
		'color': list.join('color', $uv-type-base),
		'abbr-kw': list.join('abbr', $uv-type-default),
		'resolution': list.set-nth($uv-type-default, 2, 'resolution'),
		'border': list.join(
			('keyword', 'color', 'number'), $uv-type-base
		),
	),

	'abbr-separators': (),

	'value-converters': (),

	'range-generators': (),

	'units': (
		'default': (
			'': 1px,
			'e': 1em,
			'p': 1%,
			'x': 1ex,
			'r': 1rem,
		),
		'resolution': (
			'i': 1dpi,
			'c': 1dpcm,
			'x': 1dppx,
		),
		'alpha': (
			'p': 0.01,
		),
	),

	'tokens': (
		'util': (
			'str-value': '-',
			'raw-value': '=',
			'num-value': '',
			'hash-value': '',
			'fallback-value': '?',
			'value-modifier': '*',
			'space': ';',
			'custom-property': '-',
			'global-keyword': '$',
			'keyword-chain': '.',
			'keywords-alias': 'KW',
			'important': '!',
			'no-list-separator': '  ',
			'list-separator1': ',',
			'list-separator2': '/',
			'component': '_',
		),
		'states': (
			'or': ',',
			'and': ':',
			'not': '!',
			'custom': '-',
			'this-util': '&',
			'context': '^',
			'raw': '=',
		),
		'common': (
			'value-converts-pipeline': 'Pl',
		),
	),

	'states': (
		'pseudo': (
			'h': ':hover',
			'f': ':focus',
			'fw': ':focus-within',
			'a': ':active',
			'vl': ':valid',
			'iv': ':invalid',
			'bf': '::before',
			'af': '::after',
			'fln': '::first-line',
			'flt': '::first-letter',
		),
		'custom': (
		),
		'keywords': (
			$states-ps: 'pseudo',
			$states-cmb: null,
			$kStOnly: null,
		),
		'special': (
			'noJs': null,
			'+': '+',
			'~': '~',
			'>': '>',
		),
	),
) !default;

$utils-cfg: map.deep-merge($utils-cfg, $utils-config);
$utils-cfg: map.deep-merge($utils-cfg, $utils-config-ext);
$utils-up-specif: map.get($utils-cfg, 'up-specificity');

$tUSv: map.get($utils-cfg, 'tokens', 'util', 'str-value');
$tUNv: map.get($utils-cfg, 'tokens', 'util', 'num-value');
$tURv: map.get($utils-cfg, 'tokens', 'util', 'raw-value');
$tUHv: map.get($utils-cfg, 'tokens', 'util', 'hash-value');
$tUFv: map.get($utils-cfg, 'tokens', 'util', 'fallback-value');
$tUVm: map.get($utils-cfg, 'tokens', 'util', 'value-modifier');
$tUGkw: map.get($utils-cfg, 'tokens', 'util', 'global-keyword');
$tUCp: map.get($utils-cfg, 'tokens', 'util', 'custom-property');
$tUIm: map.get($utils-cfg, 'tokens', 'util', 'important');
$tUCm: map.get($utils-cfg, 'tokens', 'util', 'component');
$tUSp: map.get($utils-cfg, 'tokens', 'util', 'space');
$tUKwc: map.get($utils-cfg, 'tokens', 'util', 'keyword-chain');
$tUKwa: map.get($utils-cfg, 'tokens', 'util', 'keywords-alias');
$tUNls: map.get($utils-cfg, 'tokens', 'util', 'no-list-separator');
$tULs1: map.get($utils-cfg, 'tokens', 'util', 'list-separator1');
$tULs2: map.get($utils-cfg, 'tokens', 'util', 'list-separator2');
$tSOr: map.get($utils-cfg, 'tokens', 'states', 'or');
$tSAnd: map.get($utils-cfg, 'tokens', 'states', 'and');
$tSNot: map.get($utils-cfg, 'tokens', 'states', 'not');
$tSCs: map.get($utils-cfg, 'tokens', 'states', 'custom');
$tSTu: map.get($utils-cfg, 'tokens', 'states', 'this-util');
$tSCn: map.get($utils-cfg, 'tokens', 'states', 'context');
$tSRaw: map.get($utils-cfg, 'tokens', 'states', 'raw');
$tSTucv: $tSTu + $tUSv;
$tCVcp: map.get($utils-cfg, 'tokens', 'common', 'value-converts-pipeline');

$utils-cfg: map.set(
	$utils-cfg,
	'tokens-values',
	(
		$tUNls: space,
		$tULs1: comma,
		$tULs2: slash,
	)
);

$utils-cfg: map.set(
	$utils-cfg,
	'abbr-separators',
	list.join(
		(
			$tUSv,
			$tUNv,
			$tURv,
			$tUHv,
		),
		map.get($utils-cfg, 'abbr-separators')
	)
);

$utils-states: map.merge(
	map.get($utils-cfg, 'states', 'pseudo'),
	map.merge(
		map.get($utils-cfg, 'states', 'special'),
		map.get($utils-cfg, 'states', 'custom'),
	)
);
