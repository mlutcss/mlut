@use 'sass:map';
@use 'sass:list';

@use 'css-vars' as mlu;

// Utilities
//
// Settings affecting the values and generation of the core utilities.
//
// $mlu-Maw--fx0 = 288px - fixed width for cards. This is value for [Maw-fx0](section-core-utils.html#kssref-core-utils-bxz-maw) utility.
// $mlu-My-range = 4 - count of [Mt](section-core-utils.html#kssref-core-utils-margin) and [Mb](section-core-utils.html#kssref-core-utils-margin-mb) utilities.
// $mlu-P-range = 4 - count of [P](section-core-utils.html#kssref-core-utils-padding) utilities.
// $mlu--Gg-range = 5 - number of [-Gg](section-core-utils.html#kssref-core-utils-custom-gg) utility values in `su`.
// $mlu-Z-range = 4 - [z-index](section-core-utils.html#kssref-core-utils-pos-z) range. Counted from zero.
// $mlu-Z-max = 9999 - `z-index` max value.
// $mlu-Ord-range = 4 - [order](section-core-utils.html#kssref-core-utils-flex) range. Counted from -1.
// $mlu-Ff--ss0 - sans serif font stack contains default fonts on different OS.
// $mlu-Ff--m0 - monospace font stack contains default fonts on different OS.
// $mlu-Trsdu--def = 0.3s - default [transition](section-core-utils.html#kssref-core-utils-anim) duration.
// $mlu-utils-states-psd-cls - map with abbreviations of pseudo-classes for utilities.
// $mlu-utils-states-psd-elm - map with pseudo-elements abbreviations for utilities.
// $mlu-utils-states - map with abbreviations of utility state names. Maps of pseudo-classes and pseudo-elements merge into it.
//
// Styleguide: sass-tools.settings.utils

$cGsg-range: 5 !default;

$Z-max: 9999 !default;
$Z-range: 4 !default;

$Maw--fx0: 288px !default;

$My-range: 4 !default;

$P-range: 4 !default;

$Ord-range: 4 !default;

// stylelint-disable
$Ff--ss0: (
	-apple-system,
	BlinkMacSystemFont,
	'Segoe UI',
	Roboto,
	Oxygen,
	Cantarell,
	Ubuntu,
	'Fira Sans',
	'Droid Sans',
	'Helvetica Neue',
	Arial,
	sans-serif
) !default;

$Ff--m0: (
	SFMono-Regular,
	Menlo,
	Monaco,
	Consolas,
	'Liberation Mono',
	'Courier New',
	monospace
) !default;
// stylelint-enable

$Trsdu--def: 0.3s !default;

$cCtx: '-Ctx' !default;

$states-ps: 'StPs' !default;
$states-cmb: 'StCmb' !default;
$kStOnly: 'StOnly' !default;

// Conversion to CSS
//
// Settings of conversion utilitie values to CSS values. All variables below are maps.
//
// $util-value-types - value types and lists of utilities that belong to this type.
// $util-unit-aliases - utility unit aliases and corresponding CSS units.
// $util-custom-units - [custom unit](section-concepts.html#kssref-concepts-su) names and their number values.
// $util-css-keywords - keyword aliases and corresponding CSS global keywords.
//
// Styleguide: sass-tools.settings.utils.conversion

// Maps with utilities states
//
// ```scss
//$mlu-utils-states-psd-cls: (
//		'h': hover,
//		'f': focus,
//		'fw': focus-within,
//		'h-f': (hover, focus),
//		'a': active,
//		'vl': valid,
//		'iv': invalid,
//);
//
//$mlu-utils-states-psd-elm: (
//		'bf': before,
//		'af': after,
//		'fln': first-line,
//		'flt': first-letter,
//);
//
//$mlu-utils-states: (
//		'noJs': null,
//);
// ```
//
// Styleguide: sass-tools.settings.utils.states

$utils: () !default;

//stylelint-disable
$utils-config: (
	'directed': (
		'M',
		'P',
		'Bd',
		'-X',
		'-Y',
		'-Xy',
	),

	'default-value-type': ('number', 'css-kw'),

	'value-converters': (),

	'units': (
		'default': (
			'': 1px,
			'e': 1em,
			'p': 1%,
			'x': 1ex,
			'r': 1rem,
		),
		'resolution': (
			'i': 1dpi,
			'c': 1dpcm,
			'x': 1dppx,
		),
	),

	'css-keywords': (
		'a': auto,
		'i': inherit,
		'u': unset,
		'n': none,
	),

	'tokens': (
		'util': (
			'str-value': '-',
			'raw-value': '=',
			'num-value': '',
			'space': ':',
			'custom-value': '-',
			'list-separator1': ',',
			'list-separator2': '/',
			'component': '_',
		),
		'states': (
			'or': ',',
			'and': ':',
			'not': '!',
			'custom': '-',
			'this-util': '&',
			'context': '^',
			'raw': '/',
		),
	),

	'states': (
		'pseudo': (
			'h': ':hover',
			'f': ':focus',
			'fw': ':focus-within',
			'a': ':active',
			'vl': ':valid',
			'iv': ':invalid',
			'bf': '::before',
			'af': '::after',
			'fln': '::first-line',
			'flt': '::first-letter',
		),
		'custom': (
		),
		'keywords': (
			$states-ps: 'pseudo',
			$states-cmb: null,
			$kStOnly: null,
		),
		'special': (
			'noJs': null,
			'+': '+',
			'~': '~',
			'>': '>',
		),
	),
) !default;

$utils-config: map.deep-merge($utils-config, $utils);

$util-type-default: map.get($utils-config, 'default-value-type');
$util-type-unitless: list.set-nth($util-type-default, 1, 'unitless');
$-abbr-type: list.join('abbr', $util-type-default);

$tUSv: map.get($utils-config, 'tokens', 'util', 'str-value');
$tUNv: map.get($utils-config, 'tokens', 'util', 'num-value');
$tURv: map.get($utils-config, 'tokens', 'util', 'raw-value');
$tUCv: map.get($utils-config, 'tokens', 'util', 'custom-value');
$tUCm: map.get($utils-config, 'tokens', 'util', 'component');
$tUSp: map.get($utils-config, 'tokens', 'util', 'space');
$tULs1: map.get($utils-config, 'tokens', 'util', 'list-separator1');
$tULs2: map.get($utils-config, 'tokens', 'util', 'list-separator2');
$tSOr: map.get($utils-config, 'tokens', 'states', 'or');
$tSAnd: map.get($utils-config, 'tokens', 'states', 'and');
$tSNot: map.get($utils-config, 'tokens', 'states', 'not');
$tSCs: map.get($utils-config, 'tokens', 'states', 'custom');
$tSTu: map.get($utils-config, 'tokens', 'states', 'this-util');
$tSCn: map.get($utils-config, 'tokens', 'states', 'context');
$tSRaw: map.get($utils-config, 'tokens', 'states', 'raw');
$tSTucv: $tSTu + $tUSv;

$utils-config: map.set(
	$utils-config,
	'tokens-values',
	(
		$tULs1: comma,
		$tULs2: slash,
	)
);

$utils-data: (
	'utils': (
		'registry': (
			'-Gsc': mlu.$var-grid-cols,
			'-Gsg': mlu.$var-gg,
			'Pos': position,
			'-X': null,
			'-Y': null,
			'-Xy': null,
			'Z': (
				'props': z-index,
				'value-type': $util-type-unitless,
			),
			'D': display,
			'Fxd': flex-direction,
			'Fxw': flex-wrap,
			'Fxg': (
				'props': flex-grow,
				'value-type': $util-type-unitless,
			),
			'Fxsh': (
				'props': flex-shrink,
				'value-type': $util-type-unitless,
			),
			'Ac': align-content,
			'As': align-self,
			'Ai': align-items,
			'Jc': justify-content,
			'Ord': order,
			'Gd': grid,
			'Fl': float,
			'Bxz': box-sizing,
			'Maw': max-width,
			'Mih': min-height,
			'M': (
				'props': margin,
				'directions': true,
			),
			'P': (
				'props': padding,
				'directions': true,
			),
			'Ov': overflow,
			'C': color,
			'F': font,
			'Fw': (
				'props': font-weight,
				'value-type': $util-type-unitless,
			),
			'Fz': (
				'props': font-size,
				'affects-height': true,
			),
			'Ff': font-family,
			'Fs': font-style,
			'Lh': (
				'props': line-height,
				'value-type': $util-type-unitless,
			),
			'Dir': direction,
			'Lts': letter-spacing,
			'Whs': white-space,
			'Ta': text-align,
			'Tt': text-transform,
			'Td': text-decoration,
			'Tsh': text-shadow,
			'Va': vertical-align,
			'Bgc': background-color,
			'Bgr': background-repeat,
			'Bgp': background-position,
			'Bgsz': background-size,
			'Bga': background-attachment,
			'Ol': outline,
			'Bxsh': box-shadow,
			'Trf': transform,
			'V': visibility,
			'Cur': cursor,
			'Op': (
				'props': opacity,
				'value-type': $util-type-unitless,
			),
			'Bd': border,
			'Bdc': border-color,
			'Bds': border-style,
			'Bdw': border-width,
			'Bdrs': (
				'props': border-radius,
				'multi-list-separator': $tULs2,
			),
			'Trs': (
				'props': transition,
				'value-type': $-abbr-type,
			),
			'Anim': animation,
			'Rsz': resize,
		),
		'map': (),
	),

	'general': (
		'registry': (
			'H': height,
			'W': width,
			'Ar': aspect-ratio,
		),
	),
) !default;

@function merge-utils-data($target, $data, $section) {
	$registry: if(
		map.has-key($data, 'registry'),
		map.get($data, 'registry'),
		()
	);

	$map: if(
		map.has-key($data, 'map'),
		map.get($data, 'map'),
		()
	);

	@return map.deep-merge(
		$target,
		($section:
		 (
			 'registry': $registry,
			 'map': $map,
		 ),
		)
	);
}

$utils-data: map.merge(
	$utils-data,
	'utils',
	'registry',
	map.get($utils-data, 'general', 'registry')
);

$utils-data: merge-utils-data($utils-data, $utils, 'utils');
$utils: map.remove($utils, 'registry');
$utils: map.remove($utils, 'map');

$utils-states: map.merge(
	map.get($utils-config, 'states', 'pseudo'),
	map.get($utils-config, 'states', 'special'),
);
