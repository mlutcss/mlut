@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';

@use '../forward-tools' as ml;

// Value converters
//
// Available converters:
// ```scss
//@debug ml.convert-uv-number(10); // 10px
//@debug ml.convert-uv-unitless(10); // 10
//@debug ml.convert-uv-resolution(2x); // 2dppx
//@debug ml.convert-uv-global-kw('a'); // auto
//@debug ml.convert-uv-abbr('bgc'); // background-color
// ```
//
// $value - value for converting
// $data = () - map with data required for converting
//
// Styleguide: sass-tools.functions.high.utils.value_converters

@function convert-uv-number($value, $data: ()) {
	$val-number: ml.str2n($value, true);
	$section: map.get($data, 'section');
	$name: map.get($data, 'name');

	@if meta.type-of($val-number) == 'number' {
		$unit-number: 0;
		$unit: math.unit($val-number);
		$units-key: map.get($data, 'units-key');

		@if (
			$unit == '' and not $units-key and
			($val-number - math.floor($val-number)) != 0
		) {
			// TODO: add setting for changing unit
			$unit-number: 1rem;
		} @else {
			$unit-number: map.get(
				ml.$utils-cfg, 'units', $units-key or 'default', $unit
			);
		}

		@if $unit-number {
			@return math.div($val-number, map.get(ml.$units-all, $unit)) * $unit-number;
		}

		@if (
			map.has-key(ml.$general-cfg, 'custom-unit-values', $unit) and
			meta.function-exists($unit, ml)
		) {
			$unit-converter: meta.get-function($unit, false, ml);

			@if (
				($unit == 'su' or $unit == 'gg') and
				map.get(ml.$utils-db, $section, 'registry', $name, 'directions') and
				map.get($data, 'list-length') == 1
			) {
				@return (
					meta.call($unit-converter, $val-number, ('unit': 'rem'))
					meta.call($unit-converter, $val-number)
				);
			}

			@return meta.call(
				$unit-converter,
				$val-number,
				(
					'util': $name,
					'unit': map.get(ml.$utils-db, $section, 'registry', $name, 'default-unit'),
				)
			);
		}

		@return $val-number;
	}

	@return $value;
}

@function convert-uv-keyword($value, $data: ()) {
	$name: map.get($data, 'name');
	$section: map.get($data, 'section');

	@if not map.has-key(ml.$utils-db, $section, 'registry', $name, 'keywords') {
		@return $value;
	}

	@if map.has-key(
		ml.$utils-db, $section, 'registry', $name, 'keywords', $value
	) {
		@return map.get(
			ml.$utils-db, $section, 'registry', $name, 'keywords', $value
		);
	}

	@if map.has-key(
		ml.$utils-db, $section, 'registry', $name, 'custom-keywords', $value
	) {
		@return map.get(
			ml.$utils-db, $section, 'registry', $name, 'custom-keywords', $value
		);
	}

	$links: map.get(
		ml.$utils-db, $section, 'registry', $name, 'keywords'
	);

	@each $item in $links {
		@if map.has-key(ml.$utils-db, $section, 'keywords', $item, $value) {
			@return map.get(ml.$utils-db, $section, 'keywords', $item, $value);
		}
	}

	@return (
		map.get(ml.$utils-db, 'common', 'keywords', $links, $value) or
		$value
	);
}

@function convert-uv-resolution($value, $data: ()) {
	@return convert-uv-number(
		$value, ('units-key': 'resolution')
	);
}

@function convert-uv-unitless($value, $data: ()) {
	@return ml.str2n($value, true) or $value;
}

@function convert-uv-alpha($value, $data: ()) {
	@return convert-uv-number(
		$value, ('units-key': 'alpha')
	);
}

@function convert-uv-global-kw($value, $data: ()) {
	@if map.has-key(
		ml.$utils-db, 'common', 'keywords', 'css-oft', $value
	) {
		@return map.get(
			ml.$utils-db, 'common', 'keywords', 'css-oft', $value
		);
	}

	@return (
		map.get(ml.$utils-db, 'common', 'keywords', 'global', $value) or $value
	);
}

@function convert-uv-abbr($value, $data: ()) {
	@return (
		ml.util-prop(ml.str-ucfirst($value), map.get($data, 'section')) or
		// maybe in the future, the keys of utils in the registry will be unified
		ml.util-prop($value, map.get($data, 'section')) or
		$value
	);
}

$-tUCp-length: string.length(ml.$tUCp);

@function convert-uv-cust-prop($value, $data: ()) {
	@if (
		meta.type-of($value) != 'string' or
		string.slice($value, 1, $-tUCp-length) != ml.$tUCp
	) {
		@return $value;
	}

	$fallback-pos: string.index($value, ml.$tUFv);

	@if $fallback-pos {
		@return var(
			#{
				'--' + ml.$uv-css-var-prefix + string.slice(
					$value, $-tUCp-length + 1, $fallback-pos - 1
				)
			},
			#{
				ml.apply-value-converter(
					string.slice($value, $fallback-pos + 1), $data...
				)
			}
		);
	}

	@return var(#{
		'--' + ml.$uv-css-var-prefix + string.slice(
			$value, $-tUCp-length + 1
		)
	});
}

@function convert-uv-color($value, $data: ()) {
	@if map.has-key(
		ml.$utils-db, 'common', 'keywords', 'colors', $value
	) {
		@return map.get(
			ml.$utils-db, 'common', 'keywords', 'colors', $value
		);
	}

	@if meta.type-of($value) == 'string' {
		$mod-color-list: ml.str-split($value, ml.$tUVm);

		@if list.length($mod-color-list) > 1 {
			$part-color: list.nth($mod-color-list, 1);
			$converted-part: ml.apply-value-converter(
				$part-color, $data...
			);
			$color: ml.str-hex2color($converted-part);

			@if $color or ml.is-css-var($converted-part) {
				$part-alpha: list.nth($mod-color-list, 2);
				$alpha: ml.apply-value-converter($part-alpha, 'O', 'utils');

				@if ml.is-css-var($alpha) and not string.index($part-alpha, ml.$tUFv) {
					$alpha: string.insert($alpha, ', 1', -2);
				}

				@return rgba($color or $converted-part, $alpha);
			}
		}
	}

	@return $value;
}
