@use "sass:list";
@use "sass:map";

/*
Getters

Functions-getters from settings maps and more.

Styleguide: sass-tools.functions.getters
*/

// mlu-bp
//
// Get breakpoint value from [$mlu-breakpoints](section-sass-tools.html#kssref-sass-tools-settings-grid-breakpoints) map.
// ```scss
//mlu-bp("md") => 760px
//```
//
// $name - breakpoint name. Type: string.
// $error-handler = 1 - bool flag for enable strict error handling. If it is enabled, then when an invalid breakpoint name is passed, the compiler will generate an error.
//
// Styleguide: sass-tools.functions.getters.bp

@function mlu-bp($name, $error-handler: 1) {
	@if map.has-key($mlu-breakpoints, $name) or $error-handler == 0 {
		@return map.get($mlu-breakpoints, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-breakpoints";
}

// mlu-bp-next
//
// Get next breakpoint value.
// ```scss
//mlu-bp-next("md") => 960px
//```
//
// $bp = 0 - breakpoint name.
// If pass last breakpoint, function return 0. With default value, function return first breakpoint. Type: string.
// $data-type = "value" - service parameter for functions-wrappers. Type: string.
//
// Styleguide: sass-tools.functions.getters.bp_next

@function mlu-bp-next($bp: 0, $data-type: "value") {
	@if $bp == 0 or map.has-key($mlu-breakpoints, $bp) {
		$bp-keys: map.keys($mlu-breakpoints);
		$bp-index: if($bp != 0, list.index($bp-keys, $bp), 0);

		@if $data-type == "name" {
			@return if($bp-index < list.length($bp-keys), list.nth(map.keys($mlu-breakpoints), $bp-index + 1), 0);
		} @else {
			@return if($bp-index < list.length($bp-keys), list.nth(map.values($mlu-breakpoints), $bp-index + 1), 0);
		}
	}

	@error "Invalid breakpoint name: '#{$bp}'. '#{$bp}' is not defined in $mlu-breakpoints";
}

// mlu-bp-next-name
//
// Wrapper on [mlu-bp-next](#kssref-sass-tools-functions-bp_next) for get breakpoint's name. Works similarly.
// ```scss
//mlu-bp-next-name("md") => "lg"
//```
//
// $bp = 0 - breakpoint name. Type: string.
//
// Styleguide: sass-tools.functions.getters.bp_next_name

@function mlu-bp-next-name($bp: 0) {
	@return mlu-bp-next($bp, "name");
}

// mlu-bp-prev
//
// Get previous breakpoint value.
// ```scss
//mlu-bp-prev("md") => 520px
//```
//
// $bp = 0 - breakpoint name.
// If pass firts breakpoint, function return 0. With default value, function return last breakpoint. Type: string.
// $data-type = "value" - service parameter for functions-wrappers. Type: string.
//
// Styleguide: sass-tools.functions.getters.bp_prev

@function mlu-bp-prev($bp: 0, $data-type: "value") {
	@if $bp == 0 or map.has-key($mlu-breakpoints, $bp) {
		$bp-keys: map.keys($mlu-breakpoints);
		$bp-index: if($bp != 0, list.index($bp-keys, $bp), list.length($bp-keys) + 1);

		@if $data-type == "name" {
			@return if($bp-index > 1, list.nth(map.keys($mlu-breakpoints), $bp-index - 1), 0);
		} @else {
			@return if($bp-index > 1, list.nth(map.values($mlu-breakpoints), $bp-index - 1), 0);
		}
	}

	@error "Invalid breakpoint name: '#{$bp}'. '#{$bp}' is not defined in $mlu-breakpoints";
}

// mlu-bp-prev-name
//
// Wrapper on [mlu-bp-prev](#kssref-sass-tools-functions-bp_prev) for get breakpoint's name. Works similarly.
// ```scss
//mlu-bp-prev-name("md") => "sm"
//```
//
// $bp = 0 - breakpoint name. Type: string.
//
// Styleguide: sass-tools.functions.getters.bp_prev_name

@function mlu-bp-prev-name($bp: 0) {
	@return mlu-bp-prev($bp, "name");
}

// mlu-grid-gtr
//
// Get grid gutter on breakpoint from [$mlu-grid-gutters](section-sass-tools.html#kssref-sass-tools-settings-grid-gutters) map.
// ```scss
//mlu-grid-gtr("md") => 12px
//```
//
// $name - breakpoint name. Type: string.
// $error-handler = 1 - works similarly like [here](#kssref-sass-tools-functions-bp).
//
// Styleguide: sass-tools.functions.getters.grid_gtr

@function mlu-grid-gtr($name, $error-handler: 1) {
	@if map.has-key($mlu-grid-gutters, $name) or $error-handler == 0 {
		@return map.get($mlu-grid-gutters, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-grid-gutters";
}

// mlu-grid-cols-count
//
// Get columns count on breakpoint from [$mlu-grid-cols](section-sass-tools.html#kssref-sass-tools-settings-grid-breakpoints) map.
// ```scss
//mlu-grid-cols-count("sm") => 4
//```
//
// $name - breakpoint name. Type: string.
// $error-handler = 1 - works similarly like [here](#kssref-sass-tools-functions-bp).
//
// Styleguide: sass-tools.functions.getters.grid_cols_count

@function mlu-grid-cols-count($name, $error-handler: 1) {
	@if map.has-key($mlu-grid-cols, $name) or $error-handler == 0 {
		@return map.get($mlu-grid-cols, $name);
	}

	@error "Invalid breakpoint name: '#{$name}'. '#{$name}' is not defined in $mlu-grid-cols";
}

// mlu-css-var
//
// Get name of CSS custom property from [$mlu-css-vars](section-sass-tools.html#kssref-sass-tools-settings-css_vars-names) map.
// ```scss
//mlu-css-var("gg") => "--mlu-gg"
//```
//
// $name - custom property name. Type: string.
// $error-handler = 1 - works similarly like [here](#kssref-sass-tools-functions-bp).
//
// Styleguide: sass-tools.functions.getters.css_var

@function mlu-css-var($name, $error-handler: 1) {
	@if map.has-key($mlu-css-vars, $name) or $error-handler == 0 {
		@return map.get($mlu-css-vars, $name);
	}

	@error "Invalid custom property name. '#{$name}' is not defined in $mlu-css-vars";
}
