@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

@use 'forward-tools' as mlu;

$-ar-keywords: list.join(
	map.keys(map.get(mlu.$at-rules-cfg, 'all-breakpoints')),
	map.keys(map.get(mlu.$at-rules-cfg, 'keywords')),
);

@function new-parse-util($raw-value) {
	$raw-value-parts: mlu.str-split($raw-value + '', mlu.$tUCm);
	$result: ();
	$at-rules: null;
	$value: null;
	$states: ();
	$comp-indexes: ();
	$i: 1;

	@if list.length($raw-value-parts) > 1 {
		@each $component in $raw-value-parts {
			$component-trimmed: mlu.str-trim($component);
			$component-item: list.nth(mlu.str-split($component-trimmed, ' '), 1);

			@if string.slice($component-item, 1, 1) == mlu.$tSNot {
				$component-item: string.slice($component-item, 2);
			}

			$part: list.nth(mlu.str-split(
				list.nth(mlu.str-split($component-item, mlu.$tSOr), 1),
				mlu.$tSAnd
			), 1);

			@if not $at-rules and (
				string.index($part, mlu.$tAAr) or list.index($-ar-keywords, $part)
			) {
				$at-rules: $component-trimmed;
				$comp-indexes: map.set($comp-indexes, 'ar', $i);
			} @else if (
				not $value and not string.index($component, ' ') and
				not list.index(
					(mlu.$tSCn mlu.$tSAnd mlu.$tSTu),
					string.slice($component-item, 1, 1)
				)
			) {
				$value: $component-trimmed;
				$comp-indexes: map.set($comp-indexes, 'value', $i);
			} @else {
				$states: list.append($states, $component-trimmed);
				$comp-indexes: map.set(
					$comp-indexes, 'state' + list.length($states), $i
				);
			}

			$i: $i + 1;
		}
	} @else {
		$value: $raw-value;
	}

	@if not $value {
		$value: $at-rules;
		$comp-indexes: map.set($comp-indexes, 'value', map.get($comp-indexes, 'ar'));
	} @else if $at-rules {
		$result: map.set($result, 'at-rules', $at-rules);
	}

	@if not $value {
		@return mlu.error('Not specified value or name in string `#{$raw-value}`');
	}

	$i: 1;

	@each $item in $states {
		@if map.get($comp-indexes, 'state' + $i) < map.get($comp-indexes, 'value') {
			$result: map.set($result, 'pre-states', $item);
		} @else {
			$result: map.set($result, 'post-states', $item);
		}

		$i: $i + 1;
	}

	@if meta.type-of($value) == 'string' and (
		string.slice($value, -(string.length(mlu.$tUIm))) == mlu.$tUIm
	) {
		$value: string.slice($value, 1, -(1 + string.length(mlu.$tUIm)));
		$result: map.set($result, 'important', true);
	}

	@return map.set($result, 'value', $value);
}
