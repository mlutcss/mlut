@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';

@use 'forward-tools' as mlu;

// convert-util-value
//
// Determines the type of utility and, depending on type, calls the converter from the `$util-value-converters` map. If the utility type is not recognized, the [default converter](#kssref-sass-tools-functions-utils-value_converters-def) is called. If the `$utils-value-converters` does not contain a converter for this type, the utility value is returned without conversion. Else the result of the converter work is returned.
// ```scss
//@debug mlu.convert-util-value('2r', 'Fz'); // 2rem
//@debug mlu.convert-util-value(100, 'Fw'); // 100
// ```
//
// $util-val - utility value
// $name - utility name
// $section = 'utils' - section in the registry in which utility was defined
//
// Styleguide: sass-tools.functions.utils.convert_util_value

// Value converters
//
// Available converters:
// ```scss
//@debug mlu.convert-util-value-number(10); // 10px
//@debug mlu.convert-util-value-unitless(10); // 10
//@debug mlu.convert-util-value-resolution(2x); // 2dppx
//@debug mlu.convert-util-value-css-kw('a'); // auto
//@debug mlu.convert-util-value-abbr('bgc'); // background-color
// ```
//
// $value - value for converting
// $data = () - map with data required for converting
//
// Styleguide: sass-tools.functions.utils.value_converters

@function convert-util-value($util-val, $name, $section: 'utils') {
	@if meta.type-of($util-val) == 'string' {
		$space: ' ';

		$multi-list-sep: if(
			map.has-key(mlu.$utils-data, $section, 'registry', $name, 'multi-list-separator'),
			map.get(mlu.$utils-data, $section, 'registry', $name, 'multi-list-separator'),
			mlu.$tULs1
		);

		@if string.index($util-val, $multi-list-sep) or string.index($util-val, mlu.$tUSp) {
			$result: ();
			$separator: map.get(mlu.$utils-config, 'tokens-values', $multi-list-sep);

			@each $list in mlu.str-split($util-val, $multi-list-sep) {
				$items: mlu.str-split($list, mlu.$tUSp);
				$length: list.length($items);
				$converted-items: ();

				@each $value in $items {
					$converted: '';

					@if string.slice($value, 1, 1) == mlu.$tURv {
						$converted: string.unquote(string.slice($value, 2));
					} @else {
						$converted: apply-value-converter($value, $name, $section, $length);
					}

					$converted-items: list.append($converted-items, $converted);
				}

				$result: list.append($result, $converted-items, $separator);
			}

			@return if(
				list.length($result) == 1,
				list.nth($result, 1),
				$result
			);
		}

		@if string.slice($util-val, 1, 1) == mlu.$tURv {
			@return string.unquote(string.slice($util-val, 2));
		}
	}

	$converted: apply-value-converter($util-val, $name, $section);

	@return if(
		meta.type-of($converted) == 'string',
		string.unquote($converted),
		$converted
	);
}

@function apply-value-converter($util-val, $name, $section, $list-length: 1) {
	$value-type: if(
		map.has-key(mlu.$utils-data, $section, 'registry', $name, 'value-type'),
		map.get(mlu.$utils-data, $section, 'registry', $name, 'value-type'),
		map.get(mlu.$utils-config, 'default-value-type'),
	);

	//$is-pipeline: list.nth($value-type, 1) == mlu.$tGVcp;
	$is-pipeline: false;

	@each $item in $value-type {
		@if map.has-key(mlu.$utils-config, 'value-converters', $item) {
			$prev-value: $util-val;

			$util-val: meta.call(
				map.get(mlu.$utils-config, 'value-converters', $item),
				$util-val,
				(
					'name': $name,
					'section': $section,
					'list-length': $list-length,
				)
			);

			@if $util-val != $prev-value and not $is-pipeline {
				@return $util-val;
			}
		} @else if $item == mlu.$tGVcp {
			$is-pipeline: true;
		}
	}

	@return $util-val;
}

@function convert-util-value-number($value, $data: ()) {
	$val-number: mlu.str2n($value, true);
	$section: map.get($data, 'section');
	$name: map.get($data, 'name');

	@if meta.type-of($val-number) == 'number' {
		$unit-number: 0;
		$unit: math.unit($val-number);

		$unit-number: map.get(
			mlu.$utils-config, 'units', map.get($data, 'units-key') or 'default', $unit
		);

		@if $unit-number {
			@return mlu.str2n($value + '_') * $unit-number;
		}

		@if $unit == 'su' or $unit == 'gg' {
			$unit-converter: meta.get-function($unit, false, mlu);

			@if map.get(
				mlu.$utils-data, $section, 'registry', $name, 'directions'
			) and map.get($data, 'list-length') == 1 {
				@return (
					meta.call($unit-converter, $val-number, 'rem')
					meta.call($unit-converter, $val-number)
				);
			}

			@return meta.call(
				$unit-converter,
				$val-number,
				map.get(mlu.$utils-data, $section, 'registry', $name, 'default-unit')
			);
		}

		@return $val-number;
	}

	@return $value;
}

@function convert-util-value-resolution($value, $data: ()) {
	@return convert-util-value-number(
		$value, ('units-key': 'resolution')
	);
}

@function convert-util-value-unitless($value, $data: ()) {
	@return mlu.str2n($value) or $value;
}

@function convert-util-value-css-kw($value, $data: ()) {
	@return if(
		map.has-key(mlu.$utils-config, 'css-keywords', $value),
		map.get(mlu.$utils-config, 'css-keywords', $value),
		$value
	);
}

@function convert-util-value-abbr($value, $data: ()) {
	@return (
		mlu.util-prop(mlu.str-ucfirst($value), map.get($data, 'section')) or
		// maybe in the future, the keys of utils in the registry will be unified
		mlu.util-prop($value, map.get($data, 'section')) or
		$value
	);
}

$-tUVar-length: string.length(mlu.$tUVar);

@function convert-util-value-var($value, $data: ()) {
	@if (
		meta.type-of($value) != 'string' or
		string.slice($value, 1, $-tUVar-length) != mlu.$tUVar
	) {
		@return $value;
	}

	$var-name: string.slice($value, $-tUVar-length + 1);
	$section: map.get($data, 'section');

	$result: if(
		map.has-key(mlu.$utils-data, $section, 'variables', $var-name),
		map.get(mlu.$utils-data, $section, 'variables', $var-name),
		map.get(mlu.$utils-data, 'general', 'variables', $var-name)
	);

	@if not $result {
		@return mlu.error('Undefined variable: `#{$value}`');
	}

	@return $result;
}

$-tUCp-length: string.length(mlu.$tUCp);

@function convert-util-value-cust-prop($value, $data: ()) {
	@if (
		meta.type-of($value) != 'string' or
		string.slice($value, 1, $-tUCp-length) != mlu.$tUCp
	) {
		@return $value;
	}

	@return var(#{
		'--' + mlu.$util-val-css-var-prefix + string.slice(
			$value, $-tUCp-length + 1
		)
	});
}
