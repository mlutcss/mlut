@use 'sass:meta';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use 'sass:list';

@use '../settings' as mlu;
@use 'general' as mgen;

/*
Custom units

Functions for working with custom units.

Styleguide: sass-tools.functions.custom_units
*/

// space unit converters
//
// Converts space units to CSS value. Available converters:
// - `su()` - `su` to `px`
// - `sur()` - `su` to `rem`
// ```scss
//@debug mlu.su(3); // 12px
//@debug mlu.sur(3su); // 0.75rem
// ```
//
// $n - unitless number or number with `su` unit
// $unit = 'px' - `su` will be converted to that units. Service argument in `su()` for create converters for any units
//
// Styleguide: sass-tools.functions.custom_units.su

@function su($n, $unit: 'px') {
	@if meta.type-of($n) != 'number' {
		@return mgen.error('Wrong type of argument $n: `#{meta.type-of($n)}`. Expected `number`');
	}

	$init-value: map.get(mlu.$general-data, 'custom-unit-values', 'su', $unit or 'px');

	@if not $init-value {
		@return mgen.error('No initial value for converting to `#{$unit}` unit');
	}

	@if math.unit($n) == 'su' {
		$n: math.div($n, 1su);
	}

	@return $init-value * $n;
}

@function sur($n) {
	@return su($n, 'rem');
}

@function gg($n, $unit: null) {
	@if meta.type-of($n) != 'number' {
		@return mgen.error('Wrong type of argument $n: `#{meta.type-of($n)}`. Expected `number`');
	}

	@if math.unit($n) == 'gg' {
		$n: math.div($n, 1gg);
	}

	$var-name: if(
		$unit,
		'gg-' + $unit,
		'gg'
	);

	@if not map.has-key(mlu.$css-vars, $var-name) {
		@return mgen.error('No CSS variable for converting to `#{$unit}` unit');
	}

	@return string.unquote('calc(var(#{map.get(mlu.$css-vars, $var-name)}) * #{$n})');
}

@function ggr($n) {
	@return gg($n, 'rem');
}

mlu.$general-data: map.set(
	mlu.$general-data, 'custom-unit-values', 'gg', meta.get-function('gg', false)
);
