@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';
@use 'sass:selector';
@use 'sass:string';

@use '../forward-tools' as mlu;
@use '../../functions/general' as mgf;

@mixin new-mk-state(
	$post,
	$pre: null,
	$no-state: true,
	$selector: &,
	$this-util: null,
	$custom-sel: null,
) {
	@if not $selector {
		@error '$selector argument must not be null.';
	}

	$selector: mlu.check-class($selector);
	$final-selector-list: ();
	$pre-comb-list: $selector;

	@at-root {
		@if $no-state {
			#{mlu.util-apply-selector($custom-sel, $selector)} {
				@content;
			}
		}

		@if $pre {
			$pre-comb-list: ();
			$pre-states: mgf.str-split($pre, mlu.$states-cmb);
			$separate-states: list.nth($pre-states, 1);

			@if $separate-states != '' {
				$final-selector-list: -convert-states($separate-states, $selector, $this-util);
			}

			@if list.length($pre-states) > 1 {
				$pre-comb-list: -convert-states(list.nth($pre-states, 2), $selector, $this-util);
			}
		}

		@if $post {
			$post-states: mgf.str-split($post, mlu.$states-cmb);
			$separate-states: list.nth($post-states, 1);

			@if $separate-states != '' {
				$final-selector-list: list.join(
					$final-selector-list,
					-convert-states($separate-states, $selector, $this-util, 'post')
				);
			}

			@if list.length($post-states) > 1 {
				@each $pre-item in $pre-comb-list {
					$final-selector-list: list.join(
						$final-selector-list,
						-convert-states(list.nth($post-states, 2), $pre-item, $this-util, 'post')
					);
				}
			}
		}

		@each $item in $final-selector-list {
			#{mlu.util-apply-selector($custom-sel, $item)} {
				@content;
			}
		}
	}
}

@function -pre-state-selector($list, $selector, $this: null) {
	$result: ();
	$selector: mlu.check-class($selector, 1);

	@each $item in $list {
		$selector-list: '';

		@each $part in mgf.str-split(
			mlu.convert-util-states($item, $this, true), ','
		) {
			$escaped-token: mlu.str-escape(mlu.$tUCm);
			$state-prefix: mlu.str-escape($item) + $escaped-token;
			$ar-separator: string.index($selector, $escaped-token + $this);

			$cur-selector: if(
				$ar-separator,
				string.insert(
					$selector, $state-prefix, $ar-separator + string.length($escaped-token)
				),
				$state-prefix + $selector
			);

			$selector-list: $selector-list + '#{$part}.#{$cur-selector},';
		}

		$result: list.append($result, string.slice($selector-list, 1, -2));
	}

	@return $result;
}

@function -post-state-selector($list, $selector, $this: null) {
	$result: ();

	@each $item in $list {
		$util-selector: selector.append($selector, mlu.str-escape(mlu.$tUCm + $item));
		$state-selector: mgf.str-replace-all(
			mlu.convert-util-states($item, $this), mlu.str-escape(mlu.$tSTucv), $util-selector
		);

		$result: list.append(
			$result,
			selector.nest(
				$util-selector,
				$state-selector
			)
		);
	}

	@return $result;
}

@function -convert-states($item, $selector, $this: null, $type: 'pre') {
	$result: mgf.str-split(mgf.str-trim($item), ' ');

	@each $key, $value in map.get(mlu.$utils-config, 'states', 'keywords') {
		@if meta.type-of($value) == 'string' {
			$value: map.keys(map.get(mlu.$utils-config, 'states', $value));
		}

		$result: mlu.replace-keyword($result, $key, $value);
	}

	@return meta.call(
		meta.get-function('-#{$type}-state-selector'),
		$result,
		$selector,
		$this
	);
}
