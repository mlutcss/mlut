@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

@use '../forward-tools' as ml;

// mk-util
//
// Creates utilities based on a map or a list with values.
//
// Utility values are set according to the utility [naming rules](section-concepts.html#kssref-concepts-utility). They can be a string (including empty) or a number. Also, the value can indicate the breakpoint on which it should work - `'tb_lg'`. Even if the breakpoint is passed as a parameter when this mixin is called, then the data about breakpoints from the values map will be more priority. In addition to a specific breakpoint, 2 special values are valid:
// * `bp` - create a value only on breakpoints:	`'r_bp'`, '4gg_bp'
// * `all` - create a normal value and on breakpoints: `'ib_all'`, `'_all'`.
//
// Values for CSS properties can be any CSS values, as well as numbers with `gg` and `su` units. Values with `gg` units are created using the [mk-gtr](#kssref-sass-tools-mixins-mk_gtr) mixin.
//
// ```scss
//$Bgc-map: (
//		'f': #fff,
//		'mn0_lg': #60f,
//		'mn1': #c05,
//);
//
//@include ml.mk-util('Bgc', $Bgc-map);
// ```
// CSS
// ```css
//.Bgc-f {
//		background-color: #fff;
//}
//
//.Bgc-mn1 {
//		background-color: #c05;
//}
//
//@media (min-width: 960px) {
//		.Bgc-mn0_lg {
//			background-color: #60f;
//		}
//}
// ```
// or with list
// ```scss
//@include ml.mk-util('Maw', ('100_sm', 32p, 7su));
// ```
// CSS
// ```css
//.Maw32p {
//		max-width: 32%;
//}
//
//.Maw7su {
//		max-width: 28px;
//}
//
//@media (min-width: 520px) {
//		.Maw100_sm {
//			max-width: 100px;
//		}
//}
// ```
// To create position utilities like `T`, `R` etc, pass `-Xy` as utility name and add directions to the values:
// ```scss
//@include ml.mk-util('-Xy', ('y23', 'r2gg', 'x5x'));
// ```
// CSS
// ```css
//.mY23 {
//		top: 23px;
//		bottom: 23px;
//}
//
//.R2gg {
//		right: 32px;
//		right: calc(var(--ml-gg) * 2);
//}
//
//.-X5x {
//		right: 5ex;
//		left: 5ex;
//}
// ```
//
// $raw-name - the name of the utility. It can be specified as a CSS class (with a dot) or just a `string`.
// $values - `map` with utility values and CSS properties values. Also you can pass a `list` containing only utility values. It will be converted to CSS values with [convert-util-value](section-sass-tools.html#kssref-sass-tools-functions-utils-convert_util_value).
// $components = () - utility components
// $options = () - util options
//
// Styleguide: sass-tools.mixins.utils.mk_util

@mixin new-mk-util($raw-name, $values, $components: (), $options: ()) {
	$util-data: ml.new-parse-util($raw-name);
	$util-name: map.get($util-data, 'value');
	$is-range: map.has-key($options, 'isRange');

	$main-options: if(
		$is-range,
		$options,
		-util-main-options($util-name, $options),
	);

	$class-name: map.get($main-options, 'class-name');
	$props: map.get($main-options, 'properties');
	$custom-selector: map.get($main-options, 'selector');
	$bound-components: map.get($main-options, 'components');
	$range-generator: map.get(
		ml.$utils-cfg,
		'range-generators',
		(
			map.get($main-options, 'range-generator')
			or 'number'
		)
	);

	@if not map.has-key(ml.$utils-db, 'utils', 'registry', $util-name) {
		ml.$utils-db: map.set(
			ml.$utils-db, 'utils', 'registry', $util-name, if($options, $options, $props)
		);
	}

	$util-map: ();

	@if list.length($components) > 0 {
		$util-data: $components;
	} @else if list.length($util-data) == 1 and $bound-components {
		$util-data: ml.new-parse-util($bound-components);
	}

	$is-values-map: meta.type-of($values) == 'map';
	$new-keywords: ();
	$i: 1;

	@each $key, $value in $values {
		$range-list: if($is-values-map, $key, list.nth($values, $i));
		$range-data: null;

		@if list.is-bracketed($range-list) {
			$range-data: meta.call($range-generator, $range-list, $util-name);
		} @else if meta.type-of($key) == 'string' and string.index($key, ml.$tUKwa) {
			$range-data: ml.expand-util-kw-alias($key, $util-name);
		}

		@if $range-data {
			@if not map.has-key($range-data, 'components') {
				$range-data: map.set($range-data, 'components', $util-data);
			}

			@include new-mk-util(
				$util-name,
				$options: map.set($main-options, 'isRange', true),
				$range-data...
			);
		} @else {
			$util-val-data: ml.new-parse-util($key);

			@if list.length($util-val-data) < 2 {
				$util-val-data: map.merge($util-data, $util-val-data);
			}

			$util-parsed-val: map.get($util-val-data, 'value');
			$at-rules: map.get($util-val-data, 'at-rules');
			$post-states: map.get($util-val-data, 'post-states');
			$pre-states: map.get($util-val-data, 'pre-states');
			$is-important: map.get($util-val-data, 'important');
			$css-values: $value;

			@if $css-values == null {
				$css-values: ml.convert-util-value($util-parsed-val, $util-name);
			} @else if $css-values == false {
				$css-values: $util-parsed-val;
			} @else if not $is-range {
				$new-keywords: map.set($new-keywords, $util-parsed-val + '', $value);
			}

			$separated-value: ml.util-separated-value($util-parsed-val);
			$this-util: (
				'name': $util-name,
				'value': $separated-value
			);

			@if $class-name == '' {
				$separated-value: $util-parsed-val;
			}

			@if $is-important {
				$separated-value: $separated-value + ml.$tUIm;
			}

			$selector: ml.str-escape(
				ml.$class-prefix + $class-name + $separated-value
			);

			$val-feat-str: meta.inspect(
				map.values(map.remove($util-val-data, 'value'))
			);
			$st-only: string.index($val-feat-str, ml.$kStOnly);
			$ar-st-only: string.index($val-feat-str, ml.$kArStOnly);
			$ar-st: string.index($val-feat-str, ml.$kArSt);
			$args: (
				$props,
				$css-values,
				$is-important,
				map.get($main-options, 'repeat-prop-values'),
				map.get($main-options, 'preset-properties'),
				$util-name,
				$util-parsed-val,
			);

			@if not string.index($val-feat-str, ml.$kArOnly) and not $ar-st-only {
				@include ml.new-mk-state(
					$post-states,
					$pre-states,
					not $st-only,
					$selector,
					$class-name,
					$custom-selector,
				) {
					@include -generate-props($args...);
				}
			}

			@if $at-rules {
				@include ml.mk-ar($at-rules, $this-util) using ($ar) {
					$util-selector: '.' + ml.str-escape($ar + ml.$tUCm) + $selector;

					@if not $ar-st-only {
						@at-root {
							#{ml.util-apply-selector($custom-selector, $util-selector)} {
								@include -generate-props($args...);
							}
						}
					}

					@if $ar-st or $ar-st-only {
						@include ml.new-mk-state(
							$post-states,
							$pre-states,
							false,
							$util-selector,
							$class-name,
							$custom-selector,
						) {
							@include -generate-props($args...);
						}
					}
				}
			}
		}

		$i: $i + 1;
	}

	@if list.length($new-keywords) > 0 {
		@include -save-new-keywords(
			$new-keywords, $util-name, $props, map.get($main-options, 'groupItemIndex')
		);
	}
}

@mixin -save-new-keywords($new-keywords, $util-name, $props, $group-item-index) {
	$value-type: (
		map.get(ml.$utils-db, 'utils', 'registry', $util-name, 'value-type') or
		'default'
	);
	$converters-list: map.get(ml.$utils-cfg, 'value-types', $value-type);

	@if list.nth($converters-list, 1) != 'color' {
		$util-keywords: map.get(
			ml.$utils-db, 'utils', 'registry', $util-name, 'keywords'
		);

		$util-map: (
			'properties': $props,
		);

		@if not list.index($converters-list, 'keyword') {
			$value-type: 'kw_' + $value-type;
			$util-map: map.set($util-map, 'value-type', $value-type);

			@if not map.has-key(ml.$utils-cfg, 'value-types', $value-type) {
				$converters-list: list.join('keyword', $converters-list);
				ml.$utils-cfg: map.set(
					ml.$utils-cfg,
					'value-types',
					$value-type,
					$converters-list
				);
			} @else {
				$converters-list: map.get(ml.$utils-cfg, 'value-types', $value-type);
			}
		}

		@if meta.type-of($util-keywords) == 'map' or not $util-keywords {
			$util-map: map.set($util-map, 'keywords', $new-keywords);
		} @else {
			$util-map: map.set($util-map, 'custom-keywords', $new-keywords);
		}

		ml.$utils-db: map.deep-merge(
			ml.$utils-db,
			('utils': ('registry': ($util-name: $util-map)))
		);
	} @else if not $group-item-index or $group-item-index < 2 {
		ml.$utils-db: map.merge(
			ml.$utils-db, 'common', 'keywords', 'colors', $new-keywords
		);
	}
}

@mixin -generate-props(
	$props, $values, $is-important, $repeat-values, $preset-props, $util, $util-value
) {
	$i: if($repeat-values == null, 0, 1);
	$values-count: list.length($values);
	$important: (
		(ml.$utils-up-specif == true) or $is-important
	) and string.unquote('!important');

	$css-values: if(
		list.length($props) < 2 and $values-count > 1,
		($values,),
		$values
	);

	@if $preset-props {
		@each $key, $value in $preset-props {
			@if meta.type-of($value) == 'function' {
				$final-value: meta.call($value, $util, $util-value, $values, $important);

				// temporary fix, because Sass does not allow `null` value for hiding custom properties
				@if $final-value {
					#{$key}: $final-value;
				}
			} @else {
				#{$key}: $value $important;
			}
		}
	}

	@each $item in $props {
		@if $repeat-values == null {
			#{$item}: list.nth($css-values, ($i % $values-count) + 1) $important;
		} @else if $i <= $values-count {
			#{$item}: list.nth($css-values, $i) $important;
		}

		$i: $i + 1;
	}
}

@function -util-main-options($name, $options) {
	$prop: null;
	$needed-options: (
		'repeat-prop-values', 'preset-properties',
		'selector', 'range-generator', 'components'
	);
	$result: (
		'class-name': if(
			map.has-key(ml.$utils-db, 'utils', 'registry', $name, 'class-name'),
			map.get(ml.$utils-db, 'utils', 'registry', $name, 'class-name'),
			$name
		),
	);

	@each $item in $needed-options {
		$result: map.set(
			$result,
			$item,
			map.get(ml.$utils-db, 'utils', 'registry', $name, $item),
		);
	}

	$prop: map.get($options, 'properties');
	$result: map.merge($result, $options);

	@return map.set(
		$result, 'properties', $prop or ml.util-prop($name, 'utils', true)
	);
}
