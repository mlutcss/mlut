@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

@use '../forward-tools' as ml;
@use 'mk-util' as mu;

@forward 'mk-util';

/*
Utilities

Mixins for creating utilities and working with them.

Styleguide: sass-tools.mixins.utils
*/

@mixin mk-utils-group(
	$raw-name, $values, $components: (), $bound-components: true
) {
	$group-data: ml.new-parse-util($raw-name);
	$name: map.get($group-data, 'value');

	@if not map.has-key(ml.$utils-groups, $name) {
		@error 'Group `#{$name}` not defined in registry';
	}

	$bound-comp-map: (
		$bound-components and
		map.has-key(ml.$utils-groups, $name, 'components') and
		ml.new-parse-util(
			map.get(ml.$utils-groups, $name, 'components')
		)
	);
	$is-bound-comp: list.length($bound-comp-map) > 1;

	@if $is-bound-comp {
		$group-data: $bound-comp-map;
	} @else if list.length($components) > 0 {
		$group-data: $components;
	}

	$i: 1;
	$members: (
		map.get(ml.$utils-groups, $name, 'members') or
		map.get(ml.$utils-groups, $name)
	);

	@each $util in $members {
		@include mu.new-mk-util(
			$util,
			$values,
			if(
				not $is-bound-comp and string.index($util, ml.$tUCm), (), $group-data
			),
			('groupItemIndex': $i, 'groupBoundComp': $is-bound-comp)
		);

		$i: $i + 1;
	}
}

@mixin apply-util($utils, $components: ()) {
	@each $item in $utils {
		$util-data: ml.new-parse-util($item);
		$abbr-data: ml.parse-abbr(map.get($util-data, 'value'));
		$util-data: map.merge($util-data, $components);
		$keyword: ml.$kStOnly;
		$pre-states: map.get($util-data, 'pre-states');
		$post-states: map.get($util-data, 'post-states');

		@if map.get($util-data, 'at-rules') {
			$keyword: ml.$kArStOnly;
			// It's a bit dangerous to use non-standard fields in map, but it is unlikely that a way to check keywords in the `mk-util` will change
			$util-data: map.set($util-data, 'applyArKw', ml.$kArOnly);
		}

		@if $pre-states or $post-states {
			@if $pre-states and $post-states {
				$util-data: map.merge(
					$util-data,
					(
						'pre-states': '#{ml.$states-cmb} ' + $pre-states,
						'post-states':'#{ml.$states-cmb} ' + $post-states,
					)
				);
			}

			$util-data: map.set($util-data, 'applyStKw', $keyword);
		}

		@include mu.new-mk-util(
			map.get($abbr-data, 'name'),
			map.get($abbr-data, 'value'),
			map.remove($util-data, 'value'),
			('selector': &, 'components': null)
		);
	}
}
