@use 'sass:meta';

@use 'forward-tools' as ml;

/*
Blocks

Mixins for creating blocks and working with them.

Styleguide: sass-tools.mixins.blocks
*/

// row
//
// Generate [row](section-core-blocks.html#kssref-core-blocks-row) block styles.
// ```scss
//.block {
//		@include row;
//}
// ```
//
// $display = block - display type. Can be value of CSS `display` property.
//
// Styleguide: sass-tools.mixins.blocks.row

@mixin row($display: block, $css-vars: ml.$flag-css-vars) {
	position: relative;
	display: $display;
	margin: 0px;
	padding: 0px;

	@if $css-vars != 2 {
		font-size: 0px;
	}

	list-style: none;
	counter-reset: ml-row-item;
}

// row-col
//
// Generate styles for [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) element.
// ```scss
//.item {
//		@include row-col;
//}
// ```
//
// $display = inline-block - display type. Can be value of CSS `display` property.
// $gutters = settings.$grid-gutters - map with column gutters values on breakpoints.
// You can also pass a number if you need the same gutter on all breakpoints.
// Custom gutters only work when the `$css-vars = false`.
// $calc = false - bool flag for generation CSS `calc()` fallback. It can needed only
// for 'col' `$type`.
// $type = 'col' - service parameter which used only by mixins-wrappers.
// It needed for reusable `row-col` for making other
// `row` elements, because the most of styles for them is the same.
// $css-vars = settings.$flag-css-vars - use CSS custom properties for gutters.
// Works as a [similar flag](section-sass-tools.html#kssref-sass-tools-settings-flags) in the settings.
//
// Styleguide: sass-tools.mixins.blocks.row_col

@mixin row-col($display: inline-block, $gutters: ml.$grid-gutters,
$css-vars: ml.$flag-css-vars, $calc: ml.$flag-calc-fallback, $type: 'col') {
	$grid-gutters: $gutters;

	@if meta.type-of($gutters) == 'number' {
		$grid-gutters: (ml.$bp-xs: $gutters);
	} @else if meta.type-of($gutters) != 'map' {
		@error 'Wrong type of argument $gutters: `#{meta.type-of($gutters)}`. Expected `number` or `map`';
	}

	@if $css-vars {
		--gc-rule: calc(var(--gc) / var(#{ml.$var-grid-cols}) * 100% - var(--gc-diff) * 2);
		--mgc-rule: calc(var(--mgc) / var(#{ml.$var-grid-cols}) * 100% + var(--gc-diff));
	}

	position: relative;
	display: $display;
	max-width: 100%;
	box-sizing: border-box;
	vertical-align: top;

	@if $css-vars != 2 {
		font-size: ml.$base-font-size;
		font-size: ml.px2rem(ml.$base-font-size);
		text-align: left;
		white-space: normal;
		@if ml.$flag-flex-pe {
			direction: ltr;
		}
	}

	@if $type == 'col' {
		--gc-diff: var(#{ml.$var-gg});

		@include ml.apply-util(W12gc);
		@include ml.mk-gtr(ml.$gtr-sm, $gutters: $grid-gutters, $calc: $calc, $css-vars: $css-vars);
		@include ml.mk-gtr(ml.$gtr-sm, $gutters: $grid-gutters, $calc: $calc, $direct: 'b', $coef: 2, $css-vars: $css-vars);

		&.row {
			margin-bottom: 0px;
			@if $css-vars != 2 {
				font-size: 0px;
			}
		}
	} @else {
		--gc-diff: 0px;

		@if $css-vars != 2 {
			&.row {
				font-size: 0px;
			}
		}
	}

	& > :first-child:not([class]) {
		margin-top: 0px;
	}

	& > :last-child:not([class]) {
		margin-bottom: 0px;
	}
}

// row-item
//
// Generate styles for [row__item](section-core-blocks.html#kssref-core-blocks-row-row__item) element.
//
// It mixin-wrapper on `row-col` because most of styles the same.
// ```scss
//.item {
//		@include row-item;
//}
// ```
//
// $display = inline-block - display type. Can be value of CSS `display` property.
//
// Styleguide: sass-tools.mixins.blocks.row_item

@mixin row-item($display: inline-block) {
	@include row-col($display, $type: 'item');
}
