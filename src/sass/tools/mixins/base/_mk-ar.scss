@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

@use 'forward-tools' as ml;

// mk-ar
//
// Generate at-rules from the string with space separated abbreviations.
//
// ```scss
//@include ml.mk-ar('@s', 'D-ig') {
//  .D-ig {
//     display: inline-grid;
//  }
//}
// ```
// CSS
// ```css
//@supports (display: inline-grid) {
//  .D-ig {
//	  display: inline-grid;
//  }
//}
// ```
//
// $at-rules - string with abbreviations
// $this-util = null - utility for which the at-rules will be generated
//
// Styleguide: sass-tools.mixins.ar.mk_ar

@mixin mk-ar($at-rules, $this-util: null) {
	$abbr-list: ml.str-split($at-rules, ' ');

	@each $key, $value in map.get(ml.$at-rules-cfg, 'keywords') {
		@if meta.type-of($value) == 'string' {
			$value: map.keys(map.get(ml.$at-rules-cfg, $value));
		}

		$abbr-list: ml.replace-keyword($abbr-list, $key, $value);
	}

	@each $item in $abbr-list {
		$ar-list: ml.str-split($item, ml.$tAAr);

		@if list.nth($ar-list, 1) == '' {
			$ar-list: ml.remove-nth($ar-list, 1);
		}

		@include -generate-ar($item, $this-util, $ar-list, 1, list.length($ar-list)) {
			@content($item);
		}
	}
}

@mixin -generate-ar($at-rules, $this-util, $ar-list, $cur-index, $last-index) {
	$item: list.nth($ar-list, $cur-index);
	$ar-alias: list.nth(ml.str-split($item, ml.$tAAnd), 1);
	$ar-name: null;
	$converter: null;
	$ar-str: $item;

	@if string.index($at-rules, ml.$tAAr) == 1 or $cur-index > 1 {
		@each $key, $value in ml.$at-rules-db {
			@if map.get(ml.$at-rules-db, $key, 'alias') == $ar-alias {
				$ar-name: $key;
				$converter: map.get(ml.$at-rules-db, $key, 'converter');
				$ar-str: string.slice($item, string.length($ar-alias) + 2);
			}
		}
	} @else {
		$ar-name: 'media';
		$converter: meta.get-function('convert-ar-bp', false, ml);
	}

	@if not $ar-name {
		@error 'At-rule for alias `#{$ar-alias}` is not defined';
	}

	@#{$ar-name} #{meta.call($converter, $ar-str, $this-util)} {
		@if $cur-index < $last-index {
			@include -generate-ar($at-rules, $this-util, $ar-list, $cur-index + 1, $last-index) {
				@content;
			}
		} @else {
			@content;
		}
	}
}
