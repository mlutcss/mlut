/*
Row

Block for creating layouts. Suitable for columns, cards and horizontal lists. By default, `inline-block` technology is used for layouts. Using [D utility](section-core-utils.html#kssref-core-utils-visual-d), you can change the layout technology to flexbox.

Parts of the layout within a `row` are created using the elements:
* [row__col](#kssref-core-blocks-row-row__col)
* [row__item](#kssref-core-blocks-row-row__item)

`Rows` can be put into each other an unlimited number of times.

`Row` contains CSS counter named `mlu-row-item`.

Markup: ../../../docs/examples/core-blocks/row/row.html

Styleguide: core-blocks.row
*/

/*
row__col

The main element for creating columns in layout. By default, it stretches the entire width of the container. The columns have gutters on the sides and bottom.

The gutters are implemented using the `margin` and [CSS custom properties](section-core-styles.html#kssref-core-styles-css_vars). For this reason, the percentage width must be specified using the CSS `calc()`. <br>
If `calc()` or `var()` is not supported by the browser, then fallbacks are provided:
```scss
margin: 0 1.5% 24px; //calc() fallback
margin: 0 calc(16px) 2rem; //var() fallback
margin: 0 var(--mlu-gtr) calc(var(--mlu-gtr-rem) * 2);
```
similar fallbacks used in the [wrapper](#kssref-core-blocks-wrapper) for fields.

The size of gutter fallback you can find in the [settings](section-sass-tools.html#kssref-sass-tools-settings-general) in `$mlu-grid-gutter-fallback.`

Column width is set using [W utility](section-core-utils.html#kssref-core-utils-bxz-w). See example [above](#kssref-core-blocks-row).

You can create nested layouts with a mix of `row` and `row__col` on the same DOM node. If you don't need double fields in the nested row, use the mix with the `row__item`. See example below.

All examples of the work of nested layouts are [here](section-examples.html#kssref-examples-nested_layouts).

Markup: ../../../docs/examples/core-blocks/row/row__col.html

Styleguide: core-blocks.row.row__col
*/

/*
row__item

Element for creating parts of the layout. By default, it stretches across the width of the content.

The sizes and offsets are set with help of utilities.

Markup: ../../../docs/examples/core-blocks/row/row__item.html

Styleguide: core-blocks.row.row__item
*/

/*
Set of ready layouts

To use the layout, click on 'Markup:', copy HTML from the example and paste it onto the page. 'Col' in the name of the layout means column.

The stylization of the columns is made for demo. It only works in this documentation.

Styleguide: examples.layouts
*/

/*
3 equal cols

Markup: ../../../docs/examples/layouts/3ec.html

Styleguide: examples.layouts.3ec
*/

/*
1 big col and 1 small

This example shows the variants for working the outermost fields in the layout. In all other layouts, you can work with fields similarly.

Markup: ../../../docs/examples/layouts/1bc1sc.html

Styleguide: examples.layouts.1bc1sc
*/


/*
4 equal cols

Markup: ../../../docs/examples/layouts/4ec.html

Styleguide: examples.layouts.4ec
*/

/*
2 equal cols. 4 equal cols inside the second

Markup: ../../../docs/examples/layouts/2ec4ecin2-nd.html

Styleguide: examples.layouts.2ec4ecin2_nd
*/

/*
2 equal cols. 2 full width cols inside the second

Markup: ../../../docs/examples/layouts/2ec2fwcin2-nd.html

Styleguide: examples.layouts.2ec2fwcin2_nd
*/

/*
3 equal cols. 3 full width cols in each.

Markup: ../../../docs/examples/layouts/3fwcin3ec.html

Styleguide: examples.layouts.3fwcin3ec
*/

/*
3 full width cols. 2 equal cols inside the second

Markup: ../../../docs/examples/layouts/3fwc2ecin2-nd.html

Styleguide: examples.layouts.3fwc2ecin2_nd
*/

/*
2 equal cols. 4 full width cols inside the second col

Markup: ../../../docs/examples/layouts/2ec4fwcin2-nd.html

Styleguide: examples.layouts.2ec4fwcin2_nd
*/

/*
3 centered cards with fixed width

Markup: ../../../docs/examples/layouts/3fc.html

Styleguide: examples.layouts.3fc
*/

/*
Nested layouts

All variants of nested layouts. A column with a nested layout has a gray background to demonstrate the different behavior of the gutters.

Styleguide: examples.nested_layouts
*/

/*
Layout in col

Markup: ../../../docs/examples/nested-row/row-in-col.html

Styleguide: examples.nested_layouts.row_in_col
*/

/*
Layout nested in col

By default layout nested in col with gutters and margin bottom.

Mx-1gg - layout with negative gutters nested in col.
Mb-2gg - layout with negative margin bottom nested in col with gutters.
Mb-2gg.Mx-1gg - layout with negative gutters and margin bottom nested in col.

Markup: ../../../docs/examples/nested-row/row-nested-col.hbs

Styleguide: examples.nested_layouts.row_nested_col
*/

/*
Case of nesting #7

Layout with negative gutters nested in col without margin bottom.

Markup: ../../../docs/examples/nested-row/row-nested-col7.html

Styleguide: examples.nested_layouts.row_nested_col.case7
*/

.row {
	@include mlu-row;
}

.row__col,
.row__item {
	position: relative;
	display: inline-block;
	max-width: 100%;
	box-sizing: border-box;
	font-size: $mlu-base-font-size;
	font-size: mlu-px2rem($mlu-base-font-size);
	text-align: left;
	vertical-align: top;
	white-space: normal;
	direction: ltr;

	&.row {
		font-size: 0px;
	}

	& > :first-child:not([class]) {
		margin-top: 0px;
	}

	& > :last-child:not([class]) {
		margin-bottom: 0px;
	}
}

.row__col {
	@include mlu-W(12gc, $calc: 1);

	@if not $MLU-FLAG-CSS-VARS {
		@include mlu-generate-gutter($calc: 1);
		@include mlu-generate-gutter($direct: "bottom", $coef: 2);
	} @else if $MLU-FLAG-CSS-VARS == 1 {
		margin: 0 $mlu-grid-gutter-fallback $mlu-grid-default-gtr * 2;
		margin: 0 calc(#{$mlu-grid-default-gtr}) mlu-px2rem($mlu-grid-default-gtr * 2);
		margin: 0 var(#{$--mlu-gtr}) calc(var(#{$--mlu-gtr-rem}) * 2);
	} @else {
		margin: 0 var(#{$--mlu-gtr}) calc(var(#{$--mlu-gtr-rem}) * 2);
	}

	&.row {
		margin-bottom: 0px;
	}
}
