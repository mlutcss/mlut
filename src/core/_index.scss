/*
Getting started

There are 2 ways to start using MLUT:

- assembled distributive
- developer toolkit

Weight: 0

Styleguide: start
*/

/*
Installation

### [Git](https://github.com/mr150/mlut) ###
```
git clone https://github.com/mr150/mlut.git
```

### NPM ###
```
npm i mlut -D
```

### CDN ###
```html
<link href="https://unpkg.com/mlut@latest/dist/css/mlut.min.css" rel="stylesheet">
```
```html
<script src="https://unpkg.com/mlut@latest/dist/js/mlut.min.js"></script>
```
### Download ###
Download assembled files: [CSS](https://unpkg.com/mlut@latest/dist/css/mlut.min.css), [JS](https://unpkg.com/mlut@latest/dist/js/mlut.min.js)

Weight: 0

Styleguide: start.install
*/

/*
Usage

### HTML ###
Before starting work, make sure you have the correct HTML5 doctype:
```html
<!DOCTYPE html>
```
and the responsive viewport meta tag:
```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

### Distributive ###
You can get assembled MLUT code and include it to your project. There are some ways to get a distributive.

- just plug in with CDN
- if used `git clone`, files are located in the `dist/` folder
- if used `npm`, files are in `node_modules/mlut/dist/`

Add the file to your page like here:
```html
<link href="css/mlut.min.css" rel="stylesheet">
<script src="js/mlut.min.js"></script>
```
And just add MLUT classes to markup:
```html
<div class="row D-f">
	<div class="row__col W3c_md">
		<h3>Simple text</h3>
```
Try [examples](section-examples.html) with ready HTML.

### Toolkit ###
To use all MLUT features you need an assembly. There are 3 ways:

- Use [MLUT project template](https://github.com/mr150/mlut-project)
- Use [npm](#kssref-start-install), import tools from `node_modules/mlut/src/` and setup assembly based on [technologies list](./)
- [Clone](#kssref-start-install) MLUT repo and use configured assembly from it

#### Assembly ####
If you cloned git repo:
```
npm i
```
Run dev server with live reload, code linting and documentation building:
```
npm run dev
```
or
```
gulp
```
Build without dev server:
```
npm run build
```

#### Styles ####
Once the assembly is configured, import sass tools and settings to your `style.scss`
```scss
@import 'tools/settings';
@import 'tools/functions';
@import 'tools/mixins';
```
Then you can import blocks and utilities how it is done in the [src/sass/mlut.scss](https://github.com/mr150/mlut/blob/master/src/sass/mlut.scss) to get the standard build. Or you can import only what you need:
```scss
@import 'core/blocks/wrapper';
@import 'core/utils/display';

@include mlu-bpm('md') {
	.inp--common {
		padding: mlu-px2em(16px) 16px;
	}
}
```

Weight: 1

Styleguide: start.usage
*/

/*
Basic concepts

Before reading the documentation, learn MLUT basic concepts.

Weight: 1

Styleguide: concepts
*/

/*
Breakpoint

The width of the screen on which the styles change. In MLUT, the default breakpoints are:
* `xs` \- minimum width `0px-520px`
* `sm` \- horizontal orientation of smartphone `520px-760px`
* `md` \- small tablet `760px-960px`
* `lg` \- square monitor `960px-1168px`
* `xl` \- wide screen `>1168px`

Weight: 5

Styleguide: concepts.breakpoint
*/

/*
Utility

An entity that, depending on the parameters, does 1 action with the DOM node styles. Utilities change 1 CSS property or group of related properties.

Utility class names are formed according to the scheme:
1. optional pseudo-class, pseudo-element, selector modifier or state: `h` - hover, `af` - after, `noJs` - javascript disabled etc. Allowed several states in the same class. States are separated by a hyphen: `h-f` - hover, focus. States separated from the utility name by underscore `_`. More about states [below](#kssref-concepts-utility-states).
1. utility name. Written with capital letter. Most utility names are [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations([pdf](https://yadi.sk/i/VcKfz5u7DBHrLA)).
1. optional value. Valid are:
	* number
	* CSS or MLUT keywords
	* MLUT variables

	Values are set according to	[Emmet rules](https://docs.emmet.io/css-abbreviations/#supplying-values-with-units). Keywords are separated from the utility name with a hyphen `-`, and variables by two hyphens  `--`.
1. optional breakpoint name: `sm`, `lg`, etc. Separated from the utility value by underscore `_`.

Utility class name example: `Tt`, `Mb2r`, `D-ib_sm`, `h_Bgc-bd0`, `Fz--h1`.

There are some special abbreviations for color utilities:
* `t` - `transparent`
* `i` - `inherit`
* `cc` - `curentColor`

Weight: 6

Styleguide: concepts.utility
*/

/*
Types

Utilities in MLUT come in 2 types:

* **Common** \- named and work like CSS properties.
* **Custom** \- affects several common CSS properties or manages custom properties. Their names begin with a hyphen. Examples: `-D`, `-Xy`, `-Gg`.

Weight: 0

Styleguide: concepts.utility.types
*/

/*
Directions

Some utilities have directions. There are 7 of them:
* 4 main directions - top, right, bottom, left. They are registered in the map [$mlu-main-directions](section-sass-tools.html#kssref-sass-tools-settings-general).
* 3 combined direction - `x`(left, right), `y`(top, bottom) and `xy`(all main directions).

The direction is used in the names of utilities, as well as in some mixins. 1 letter is used to indicate the direction(`Mt`, `Pb`), with the exception of `xy`. In the names of utilities `xy` is not indicated(`M`, `P`), and 2 letters `xy` are passed in mixins.

Weight: 1

Styleguide: concepts.utility.dirs
*/

/*
MLUT keywords and variables

**MLUT keywords** are strings values. Their names can only contain lowercase letters. Keywords include:
* names of breakpoints - `sm`, `lg`, etc. Permissible to use only in custom utilities
* `min` and `max`. Allowed to use only in utils with number values
* abbreviations for invented values that are not in the CSS specification. Allowed to use only in custom utilities.

**MLUT variables** exist only at the agreement level. Essentially, they are similar to Sass variables, which are compiled into CSS values. They can take any value, including CSS custom properties. Variable name is written in lower camelCase, may contain letters and numbers: `bd0`, `myBxsh` etc. Example: [Maw--fx0](section-core-utils.html#kssref-core-utils-bxz-maw).

Weight: 1

Styleguide: concepts.utility.mlut_kw_var
*/

/*
Creation

For convenient creation of frequently used utilities, a [group of mixins](section-sass-tools.html#kssref-sass-tools-mixins-util_wrappers) has been prepared. They are wrappers over the main mixins for creating utilities:
- [mk-util](section-sass-tools.html#kssref-sass-tools-mixins-mk_util)
- [mk-state](section-sass-tools.html#kssref-sass-tools-mixins-mk_state)

Weight: 2

Styleguide: concepts.utility.creation
*/

/*
States

States in MLUT called the implementation of some features of the CSS using utilities, such as pseudo-classes, selectors combinators etc.
States also include utilities values that work under certain conditions that are not related with CSS.
The state name is written in lower camelCase.
Available states for utilities are listed in the [settings](section-sass-tools.html#kssref-sass-tools-settings-utils-states).
States are created using the [mk-state](section-sass-tools.html#kssref-sass-tools-mixins-mk_state) mixin. It can create 3 types of states based on the types of values in the states map:
1. pseudo-classes and pseudo-elements. In states map the value is a string - `'h': 'hover'`
1. multiple selectors with pseudo-classes. State value is a list - `'h-f': ('hover', 'focus')`
1. just the utilities values that work under certain conditions. State value is a null - `'noJs': null`

In the core there are utilities with states whose creation has not yet been implemented:
* `sp` \- utility inside the @supports at-rule. It will only work if the CSS property, value, or @supports supported by the browser.
* `chl` \- utility will work on all children. Means `> *`.

#### Javascript on/off

Using the `js` and `noJs` states, you can add utilities that work depending on the presence of javascript in the browser.
* if you want the utility to work only when javascript is loaded, just add the `js` state to it in the markup.
* if the utility should work only without javascript, create a value for it with the `noJs` state using a mixins.

Note that if the utility has other states, `js` and `noJs` should be indicated first: `js-h_Bgc-mn0`, `noJs-sp_D-f`.

This mechanism is implemented using the [init.js](section-core-scripts.html#kssref-core-scripts-init) script.

Weight: 1

Styleguide: concepts.utility.states
*/

/*
Space unit

Abbreviated '`su`'. Units of measure for any dimensions. Widths, indents, line height, etc. By default, 1su is 4px. All sizes and indents in MLUT are multiple 1su.

You can set value of `su` in [settings](section-sass-tools.html#kssref-sass-tools-settings-general).

Weight: 7

Styleguide: concepts.su
*/

/*
Modular grid

Space on the page divided into a certain number of columns with gutters.

In MLUT on the `xs` and `sm` breakpoint, the grid has 4 columns. On `md` and above - 12. This means that the grid divides the space into 4 equal parts on `sm` and 12 parts on `md` and above. These parts called **columns**. Columns are separated by indents which are called **gutters**.

The gutters have different widths at different breakpoints. From `xs` to `lg` gutter is 12px. From `lg` gutter is 16px.

Using the [grid-debug](section-core-blocks.html#kssref-core-blocks-grid-debug) block you can see the graphic display of the grid.

### Grid units

These are units of measure that you can use for number values of utilities just like any other units in CSS. There are 4 types of grid units:
* **variable columns** \- abbreviated `c`. 1c is 1 column width which changes dynamically depending on the [formula](section-core-blocks.html#kssref-core-blocks-row-row__col). Using [custom utilities](section-core-utils.html#kssref-core-utils-custom), you can get values equal to both `gc` and `gs`.
* **grid-columns** \- `gc`. 1gc is width of 1 column.
* **grid-spans** \- `gs`. 1gs is width of 1 column with 2 gutters.
* **grid-gutters** \- `gg`. 1gg is width of 1 gutter.

In the standard MLUT build, only `c` and `gg` are used. Other units can be used in some [mixins](section-sass-tools.html#kssref-sass-tools-mixins-w).

Modular grid are generated depending on this [settings](section-sass-tools.html#kssref-sass-tools-settings-grid).

Weight: 8

Styleguide: concepts.grid
*/

/*
Core blocks

Set of universal [blocks](section-concepts.html#kssref-concepts-block) for using on any project. Some blocks contain [elements](section-concepts.html#kssref-concepts-element) and [modifiers](section-concepts.html#kssref-concepts-modifier).

Core blocks don't contain, or almost don't contain styles such as colors, backgrounds, etc. Such styles are set on the theme or 'design' layer. To style blocks or their elements, use utilities or modifiers such as `block--mod`.

Weight: 2

Styleguide: core-blocks
*/

/*
Utils reference

Set of utilities that can be used on any project.

Utilities are grouped by sections. The description of each section lists the values of the utilities that relate to it and are included in the MLUT core. Custom utilities, utilities with more values and non-standard values are allocated in subsections. Values of common utilities correspond to [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations([pdf](https://yadi.sk/i/VcKfz5u7DBHrLA)). If written that all values are available in the utility, you can see them in the Emmet cheat sheet from the link above.

In the description of the utilities, there may be a '**Parameters**' item in which the available values are listed. Instead of the utility value, the '`initial`' keyword may be specified. We will get this effect when using the utility with no value. The range of values can be specified as `0..3`.

If the property does not have a special value 'i' then 'i' value means `inherit`.

Some utilities responsive by design or have only responsive values. It will be indicated in the description like this: *Responsive*.

For some utilities, there is a description for non-developers.

In the examples of the work of some utilities for demonstration, other utilities may be used like this: '`Util1.Util2`'. In the markup, instead of a dot, you need to use a space to separate utilities, like this: '`Util1 Util2`'

Weight: 3

Styleguide: utils-reference
*/

/*
Core styles

You can find their in `sass/core/`.

Weight: 4

Styleguide: core-styles
*/

/*
Core scripts

Scripts that complement the MLUT core functionality.

Weight: 5

Styleguide: core-scripts
*/

/*
Sass tools

Available when using MLUT as a [toolkit](section-start.html#kssref-start-usage). Names of tools that are associated with custom utilities begin with 'c' prefix. Examples: [$cGg-range](#kssref-sass-tools-settings-utils), [cCl](#kssref-sass-tools-mixins-general--cl) mixin.

Weight: 6

Styleguide: sass-tools
*/

/*
Sass modules

Modules include themes, tools, utility sets, and more. Now there are not many modules included in MLUT, so their documentation will be in this section.

Names of variables, mixins, and sass functions in modules must have prefixes `m#{abbreviated module name}`. For themes, this prefix should look like: `mt#{theme name}`. The names of common CSS classes in modules must comply with [BEM](https://ru.bem.info/) naming rules.

## Themes

Design theme can be used on different sites. They may contain utilities, styles with BEM naming, tools and more. Theme example see [here](section-sass_modules.html#kssref-sass_modules-demo_theme).

Each theme consists of at least 2 parts: *config* and *init*.
- the config contains data on the basis of which the theme is created: variables, maps with utility values, etc.
- in the init file all parts of the theme and, if necessary, other modules are included. After including all required parts, the theme is generated.

Themes can be imported to the MLUT assembly for make a single bundle or builded as separate files. To add a theme to your styles, just import an int file. You can also use only the theme config to make it custom build.

The theme documentation is up to you. At a minimum, you should specify:
- main colors
- dependencies
- gzipped size
- info about unusual parts of the theme, such as mixins, additional styles, etc.

Following these rules you can create your own module. Your module can be added to MLUT. To do this, send a issue, pull-request or contact the maintainer in any other way. Also you can create your own modules collection in a separate repository.

Weight: 7

Styleguide: sass_modules
*/

/*
Examples

Additional examples of core blocks, utilities, tools and ready-made components. If in the markup you meet the `{{modifier_class}}` construct, then substitute the necessary classes from the examples instead of it, or just erase

Weight: 8

Styleguide: examples
*/

// Other
//
// Styleguide: examples.other

/*
Settings

Grid settings, compilation flags, constants and more. All core settings are in the `sass/tools/settings/`.

Styleguide: sass-tools.settings
*/

@forward 'styles';
@forward 'blocks';
@forward 'utils';
