/*
Getting started

There are 2 ways to start using MLUT:

- assembled distributive
- developer toolkit

Weight: 0

Styleguide: start
*/

/*
Installation

### [Git](https://github.com/mr150/mlut) ###
```
git clone https://github.com/mr150/mlut.git
```

### NPM ###
```
npm i mlut -D
```

### CDN ###
```html
<link href="https://unpkg.com/mlut@latest/dist/css/mlut.min.css" rel="stylesheet">
```
```html
<script src="https://unpkg.com/mlut@latest/dist/js/mlut.min.js"></script>
```
### Download ###
Download assembled files: [CSS](https://unpkg.com/mlut@latest/dist/css/mlut.min.css), [JS](https://unpkg.com/mlut@latest/dist/js/mlut.min.js)

Weight: 0

Styleguide: start.install
*/

/*
Usage

### HTML ###
Before starting work, make sure you have the correct HTML5 doctype:
```html
<!DOCTYPE html>
```
and the responsive viewport meta tag:
```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

### Distributive ###
You can get assembled MLUT code and include it to your project. There are some ways to get a distributive.

- just plug in with CDN
- if used `git clone`, files are located in the `dist/` folder
- if used `npm`, files are in `node_modules/mlut/dist/`

Add the file to your page like here:
```html
<link href="css/mlut.min.css" rel="stylesheet">
<script src="js/mlut.min.js"></script>
```
And just add MLUT classes to markup:
```html
<div class="row D-f">
	<div class="row__col W3c_md">
		<h3>Simple text</h3>
```
Try [examples](section-examples.html) with ready HTML.

### Toolkit ###
To use all MLUT features you need an assembly. There are 3 ways:

- Use [MLUT project template](https://github.com/mr150/mlut-project)
- Use [npm](#kssref-start-install), import tools from `node_modules/mlut/src/` and setup assembly based on [technologies list](./)
- [Clone](#kssref-start-install) MLUT repo and use configured assembly from it

#### Assembly ####
If you cloned git repo:
```
npm i
```
Run dev server with live reload, code linting and documentation building:
```
npm run dev
```
or
```
gulp
```
Build without dev server:
```
npm run build
```

#### Styles ####
Once the assembly is configured, import sass tools and settings to your `style.scss`
```scss
@import 'tools/settings';
@import 'tools/functions';
@import 'tools/mixins';
```
Then you can import blocks and utilities how it is done in the [src/sass/mlut.scss](https://github.com/mr150/mlut/blob/master/src/sass/mlut.scss) to get the standard build. Or you can import only what you need:
```scss
@import 'core/blocks/wrapper';
@import 'core/utils/display';

@include mlu-bpm('md') {
	.inp--common {
		padding: mlu-px2em(16px) 16px;
	}
}
```

Weight: 1

Styleguide: start.usage
*/

/*
Basic concepts

Before reading the documentation, learn Mlut basic concepts.

Weight: 1

Styleguide: concepts
*/

/*
Naming algorithm

Almost all abbreviations in Mlut are compiled by one algorithm. Below will be a simplified algorithm for compiling the abbreviations of the utilities names. Later it will be supplemented

1. get all CSS properties that starts with one letter
1. make ranking of them by popularity or alphabet if the popularity is not possible to calculate. Popularity for properties is calculated based on [Chrome platforf statistic](https://chromestatus.com/metrics/css/popularity)
1. compose groups of properties that starts with one word. Select a group leader: repeating first word. Leader rating is the max rating of the property from group
1. make abbreviations by the scheme below. Important notes:
	- in descending order by rating, regardless of the relationship of the property to the group
	- abbreviate the property, group leader or the first word property so that it does not intersect with already abbreviated properties
	- subsequent abbreviations of all properties of the group and properties with the same initial word should begin with the same abbreviation, which was previously done
	- if the group contains 2 or more subgroups (excluding logical: `block`, `inline`), its leader is abbreviate by at least 2 letters: `Fn`, `Bd`
	- properties from 3 and less letters do not abbreviate: `Gap`, `All`
	- properties and subproperties with physical directions have fixed abbreviations: `T`, `R`, `B`, `L`, `I`
	- subsequent words in properties are abbreviated by the same rules recursively

The one abbreviation scheme:
- the name must be abbreviate to the first letter of the source word.
- if the name is from several words, then every word is abbreviate to one letter
- if two names have the same first letter, then in the next name, when sorting them by the rating, the letter is added
- if the name is from several words, then the letter is added, depending on the name affiliation to the group

The order of adding the letter:
1. consonant of the next syllable. If the next syllable begins to vowel, then we take the nearest previous consonant from it
1. next consonant
1. next vowel without a jump through the consonant

Examples you can see in the [utils reference](section-utils-reference.html). More visual examples here will appear later.

Weight: 0

Styleguide: concepts.naming
*/

/*
Utility

An entity that, depending on the parameters, does 1 action with the element styles. Utilities can change both one CSS property and several.

Weight: 1

Styleguide: concepts.util
*/

/*
General syntax

Utilities consist of out:
<img class="D" src="kss-assets/utils-syntax.jpg" alt="utilities syntax">

1. CSS [at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule): breakpoints, `@supports`, ect
1. pre-states \- part of selector before the utility class name
1. name
1. value
1. post-states \- part of selector after the utility class name

Each part is separated by the lower underscore.

Weight: 0

Styleguide: concepts.util.syntax
*/

/*
Naming

By origin, the utilities are:

* **Common** \- named and work like CSS properties.
* **Custom** \- affects several CSS properties or manages custom properties. Their names begin with a hyphen. All utilities that you will add, it is recommended to name as custom.

The names of utilities are written in upper CamelCase and can only contain letters. Thanks to the first capital letter, they are easy to add to an existing project without fear of name conflicts.

Weight: 1

Styleguide: concepts.util.naming
*/

/*
Components

To work with utilities in Mlut, the parsing to parts (components) is used. Most of them correspond to the usual syntax. The utility divides to this components:
- at-rules
- pre-states
- post-states
- important: `!` modifier at the end of the utility value adds `!important` to CSS
- value: it can be a separate value, the name of the utility, group etc

Here is an example, as the utility will be parsed to the components:
```scss
@debug ml.parse-util('<sm_:f:>_D!_h::^sub');
// (
//   'at-rules': '<sm',
//   'pre-states': ':f:>',
//   'post-states': 'h::^sub',
//   'important': true,
//   'value': 'D',
// ),
```
Note that the *order* of components is important.

Utility Components Syntax - the way to describe, with which components we want to generate utilities. It is similar to the syntax utilities in the final code, but has a number of differences:
- components of the same type are separated by spaces
- by default, the utilities with the components of each type are generated *separately*. It means that: `xl_^:h_Bdb_h,f` => `xl_Bdb`, `^:h_Bdb`, `Bdb_f`
- keywords are used, for explicit instructions, with what components we need utilities and not only: `BpAll ArSt _Bdb_h`

This syntax is used in all places where utilities, utils groups, ranges, etc. are generated.

Most of the components in the Mlut is convertible. This means that if the component or part of it correspond the rules of conversion, it will unfold into some CSS value. How to convert different components, you can read below in the relevant sections. If the Mlut does not know how to convert the component, the behavior will depend on its type.

Weight: 2

Styleguide: concepts.util.components
*/

/*
Values

The values of utilities are almost arbitrary. That is, if the value is not converted, it appear in the CSS without changes.

To explicitly prevent conversion, use the `=` before the value. Also, use `= before` the value in quotes `''`: `Ct='test'_af`, since in the future quotes will be used in the values *without* separator.

```scss
@include ml.mk-util('Ml', (5, 5exe, '=5'));

// CSS
.Ml5 {
	margin-left: 5px;
}

.Ml5exe {
	margin-left: 5exe;
}

.Ml\=5 {
	margin-left: 5;
}
```

Weight: 2

Styleguide: concepts.values
*/

/*
Types

Mlut has the following types of values that partially intersect with [CSS data types](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types). In the examples below will use a function that get a CSS value of the utility.

Weight: 0

Styleguide: concepts.values.type
*/

/*
Number

Numbers can be both with units of measurements and without. Float values are allowed, and fractions also can be used in the default conversion type:
```scss
@debug ml.uv('Fnw100'); // 100
@debug ml.uv('Ml3r'); // 3rem
@debug ml.uv('W1/4'); // 25%
```

Styleguide: concepts.values.type.number
*/

/*
CSS variables

Their names begin with `$` written in lower camelCase and may contain numbers. They can be used almost everywhere, even as part of a complex value, for example in fractions:
```scss
@debug ml.uv('W1/$div'); // calc(1 / var(--ml-div) * 100%);
```
To specify a fallback, use `?`. In the fallback, you can specify any value, including another variable with fallback:
```scss
@debug ml.uv('W-$myCard?200'); // var(--ml-myCard, 200px)
@debug ml.uv('W-$myCard?$defWd?150'); // var(--ml-myCard, var(--ml-defWd, 150px))
```

Styleguide: concepts.values.type.css_var
*/

/*
Color

You can use both HEX colors and color names set by the user. Read more about adding your colors here. With colors, you can specify the opacity modifier `*`. This converter is used to convert opacity. With modifier, you can use CSS variables or global keywords in any position:
```scss
@debug ml.uv('C#60c*20p'); // rgba(102, 0, 204, 0.2)
@debug ml.uv('C-red0*$co'); // rgba(204, 0, 102, var(--ml-co, 1))
```
If a variable is specified as opacity, then by default, it will have fallback `1`.

Styleguide: concepts.values.type.color
*/

/*
Keywords

Keywords \- abbreviations that comply with CSS keywords. They are written Camel Camel Case and may contain numbers. How to add your keywords look here.
```scss
@debug ml.uv('D-if'); // inline-flex
```

Styleguide: concepts.values.type.kw
*/

/*
Global keywords

Similar to ordinary, but differ in that they can be used in any utility. You can add your global keywords in the settings. It is recommended to use the prefix, for example: `gMyKw`. You can find the default Mlut global keywords in the settings.
```scss
@debug ml.uv('W-ih'); // inherit
```

Styleguide: concepts.values.type.gkw
*/

/*
Abbreviations

In the values of some utilities you can use the names of other utilities.
```scss
@debug ml.uv('Tsp-bdc'); // border-color
```

Styleguide: concepts.values.type.abbr
*/

/*
Conversion type

In different utilities, the values will be converted in different ways. Conversion type is a rule by which the value will be converted. It consists of a sequence of converters and keywords. Conversion type is specified in the `conversion` option of utilities. For details on conversion and existing types, see here.

Weight: 1

Styleguide: concepts.values.convert
*/

/*
Multiple values

For any utility you can specify multiple values. Instead of a blank used `;`:
```scss
@debug ml.uv('Bd3;sec0;d'); // 3px #0c6 dotted
```
In some utilities, you can specify several lists of values. To do this, use the same separator as in CSS: `/` or `,`
```scss
@debug ml.uv('Bdrd1r;2/5p'); // 1rem 2px / 5%
```
The separator for multi-list is specified in the `multi-list-separator` utility option. Please note that each value is converted separately. The prevent-conversion token `=` also applies to each value in the list separately:
```scss
@debug ml.uv('M1r;=10x'); // 1rem 10x
```

Weight: 2

Styleguide: concepts.values.multi
*/

/*
Separators

Depending on the value type, different separators between the name and value of the utility are used. By default, only for strings without quotes (including empty) and CSS variables, the separator `-` are used: `Txd-u`, `C-$prime`. For all other values, separators are not used: `W100p`, `Fnw700`, but you can set them in the settings.

`=` token will also be a separator if you want to prevent conversion: `-Mut=5`.

Weight: 3

Styleguide: concepts.values.sep
*/

/*
CSS important

At the end of the value or their sequences, you can specify `!` which will add the CSS `!important` to the final value. If the utility affects several properties, then `!important` adds to each.
```scss
@include ml.apply('M2r;12! -I2r!');

// CSS
.M2r\;12\! {
	margin: 2rem 12px !important;
}

.-I2r! {
	top: 2rem !important;
	right: 2rem !important;
	bottom: 2rem !important;
	left: 2rem !important;
}
```

Weight: 4

Styleguide: concepts.values.important
*/

/*
Negation

The negation is denoted by `-` before the value and works everywhere where it is appropriate. With numbers, with CSS variables and with keywords, if the final value may be negative.
```scss
@include ml.mk-util('Ml', ('2/-8', -0.7, '-$myVar'));

// CSS
.Ml2\/-8 {
	margin-left: -25%;
}

.Ml-0\.7 {
	margin-left: -0.7rem;
}

.Ml--\$myVar {
	margin-left: calc(var(--ml-myVar) * -1);
}
```

Weight: 5

Styleguide: concepts.values.negation
*/

/*
At-rules

At-rules component may consist of breakpoints and rules. To specify breakpoint, just write it name: `lg_D-f`. To add rule, specify `@` before its name: `@s:ctv_D-g`. Breakpoints can only be specified 1 time in the entire component and only at the beginning, and rules - as much as you need.
```scss
@include ml.mk-util('D', ('xl_', '@s:ctv_g'));

// CSS
@media (min-width: 1200px) {
  .xl_D {
    display: block;
  }
}

@supports (content-visibility: auto) {
  .\@s\:ctv_D-g {
    display: grid;
  }
}
```

In all at-rules, you can create complex conditions using the `:` and `, ` operators, which corresponds `and` and `or` in CSS. In some examples below, functions for at-rules conversion will be used for brevity.
```scss
@debug ml.convert-ar-media('pr:h>gSm:dm,p-c:w>=90r'); // print and (min-height: #{ml.bp(sm) + 1}) and (display-mode: fullscreen), (pointer: coarse) and (min-width: 90rem)
```
And of course, Rules can be used in any order and in any combination.

Weight: 3

Styleguide: concepts.at_rules
*/

/*
Breakpoints

The width of the screen on which the styles change. The default mobile-first approach is used, so breakpoints are converted to `min-width` media queries. How to configure breakpoints see here.

If required `max-width`, add the `<` before the breakpoint:
```scss
@debug ml.convert-ar-bp('<sm'); // (max-width: 519px)
```
Or use operators to create a range:
```scss
@debug ml.convert-ar-bp('sm:md,xl'); // (min-width: 520px) and (max-width: 767px), (min-width: 1200px)
```

Styleguide: concepts.at_rules.bp
*/

/*
@media

In @media rule, you can use the type, features and custom queries. There are two media types:
- `pr` \- `print`
- `s` \- `screen`

`@media` is the default rule. To choose it, just write `@` and then specify queries. The default rule can be selected in the settings.
```scss
@include ml.mk-util('@:w>=gSm:o _D', 'if');

// CSS
@media (min-width: 520px) and (orientation: landscape) {
  .\@\:w\>\=gSm\:o_D-if {
    display: inline-flex;
  }
}
```

Styleguide: concepts.at_rules.media
*/

/*
Media features

Work almost as well as utilities. Key differences:
- if the feature has only two values, then to check its presence, you can simply write a name. For checking lack, you can use the `none` keyword. *Note* that some features also have the default value.
- if the features can check the range of values, then you can use the range syntax from [The Media Queries Level 4](https://www.w3.org/TR/mediaqueries-4/#mq-range-context)
```scss
@debug ml.convert-ar-media('ah'); // (any-hover)
@debug ml.convert-ar-media('h-n'); // (hover: none)
@debug ml.convert-ar-media('dm'); // (display-mode: fullscreen)
@debug ml.convert-ar-media('c<256'); // (max-color: 255)
```

Styleguide: concepts.at_rules.media.feat
*/

/*
@supports

In @supports rule, you can check the support of properties and values of any utility from the registry. To check the current value of the utility used, leave the rule blank.
```scss
@include ml.mk-util('Ps', '@s:d-flr_sk');
@include ml.mk-util('D', '@s_f');

// CSS
@supports (display: flow-root) {
  .\@s\:d-flr_Ps-sk {
    position: sticky;
  }
}

@supports (display: flex) {
  .\@s_D-f {
		display: flex;
	}
}
```
To check the property, it is not necessary to specify the value:
```scss
@debug ml.convert-ar-supports('apcr'); // (aspect-ratio: initial)
```
You can also use this-utility alias `&` in a complex condition.
```scss
@debug ml.convert-ar-supports('d-ig:&', ('name': 'Jc', 'value': '-se'); // (display: inline-grid) and (justify-content: space-evenly)
```
To check the lack of support, add an operator `!` before the utility:
```scss
@debug ml.convert-ar-supports('!d-ig'); // (not (display: inline-grid))
```
Please note that in one supports rule, only one type of the operator is supported for a combination of expressions. When using both immediately, an error will appear
```scss
@debug ml.convert-ar-supports('ps-sc,h1vh:m-a'); // ERROR: Different operators are not allowed in one abbreviations list
```

Styleguide: concepts.at_rules.supports
*/

/*
Custom expressions

You can add custom expressions to any at-rule. Regardless of the name you specify, custom expressions always begin with `-`. See in the settings how to add it.

Weight: 1

Styleguide: concepts.at_rules.custom
*/

/*
States

In the states you can use pseudo-class, pseudo-elements and almost everything that CSS selectors allow. States are two types: `pre` and `post`, depending on the position in the CSS utility selector. In both of them, you can use the same parts.
```scss
@include ml.mk-util(':h _D_ af', 'f');

// CSS
.D-f {
	display: flex;
}

:hover .\:h_D-f {
	display: flex;
}

.D-f_af::after {
	display: flex;
}
```
In essence, the states is a simplified [CSS selector list](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list). To combine the states, use `:`, and for the separation of selector to the lists - `,`. For a space in the selector, use `::` or `:` if post-state is the first in the list.
```scss
@include ml.mk-util('D_ h,f h:b :fc', '');

// CSS
...

.D_h\,f:hover,
.D_h\,f:focus {
	display: block;
}

.D_h\:b:hover::before {
	display: block;
}

.D_\:fc :first-child {
	display: block;
}
```

You can use almost arbitrary parts in any order: combinators, classes, etc. In terms of conversion, the states are similar to the values of utilities:
- unconvertible parts will fall into the selector unchanged
- use `=` to prevent conversion
```scss
@include ml.mk-util('=a. h1+ _D_ .js:a', '');

// CSS
...

a.\=a\._D {
	display: block;
}

h1 + .h1\+_D {
	display: block;
}

.D_\.js\:a.js:active {
	display: block;
}
```
Full list of existing states see in the configuration.

Weight: 4

Styleguide: concepts.states
*/

/*
Special states

There are several special states that are converted by a special way.

Styleguide: concepts.states.special
*/

/*
Context

With the help of a context, the utilities can react to the state of the container, adjacent item etc. It is denoted by `^` and is just an alias for `.-Ctx`. Add this class to markup, and in the states of utilities, make a combination for the necessary behavior.

You can also specify the name of the context. Allowed lower camelCase and numbers.
```scss
@include ml.mk-util('^:h ^one:lc:>_D', 'f');

// CSS
...

.-Ctx:hover .\^\:h_D-f {
	display: flex;
}

.-Ctx-one:last-child > .\^one\:lc\>_D-f {
	display: flex;
}
```

Styleguide: concepts.states.special.ctx
*/

/*
Not

To use a pseudo-class `not`, add `! ` before any part of state:
```scss
@include ml.mk-util('D_!fc !input', '');

// CSS
...

.D_\!fc:not(:first-child) {
	display: block;
}

.D_\!input:not(input) {
	display: block;
}
```

Styleguide: concepts.states.special.not
*/

/*
This utility alias

As in [@supports](#kssref-concepts-at_rules-supports), `&` can be used in the states. To increase specificity, it can only be used in post-states so many times as much as you need:
```scss
@include ml.apply('D_&');

// CSS
...

.D_\&.D_\& {
	display: block;
}
```

Styleguide: concepts.states.special.tu
*/

/*
Custom states

Works similarly as the [custom at-rules expressions](#kssref-concepts-at_rules-custom), see more here.

Weight: 1

Styleguide: concepts.states.custom
*/

/*
Custom units of measure

In Mlut there are 3 custom units:
- `su` \- space unit
- `gg` \- grid gutter
- `gc` \- grid column. Used only in the legacy grid-system

*Important note*: in some utilities, `su` and` gg` are converted to `rem`, and not in `px`. About such behavior says the `default-unit` in the value "rem". It helps accessibility, if the user has increased default font in the browser.

You can set the custom units values in the [settings](section-sass-tools.html#kssref-sass-tools-settings-general).

Weight: 5

Styleguide: concepts.custom_unit
*/

/*
Space unit

Unit of measurement to create a scale of sizes and indents in your design system. By default `1su = 4px`.
```scss
@debug ml.uv('Ml3su'); // 12px
@debug ml.uv('Fns6su'); // 1.5rem
```

Styleguide: concepts.custom_unit.su
*/

/*
Grid gutter

The value of this unit depends on the corresponding CSS variables: `--ml-gg` and `--ml-gg-rem`. Due to this, its value can be changed dynamically. By default `--ml-gg = 3su` but increase to `4su` on the `lg` breakpoint.
```scss
@debug ml.uv('Ml3su'); // 12px
@debug ml.uv('Fns6su'); // 1.5rem
```

Styleguide: concepts.custom_unit.gg
*/

/*
General reference

Reference of the utils groups, at-rule etc.

Weight: 2

Styleguide: general_reference
*/

/*
Utilities groups

Reference of the utils groups.

Styleguide: general_reference.groups
*/

/*
Media features

`@media` at-rule features.

Styleguide: general_reference.media
*/

/*
Utilities keywords

Reference of the keywords in the utils values.

Styleguide: general_reference.kw
*/

/*
Core blocks

Set of universal [blocks](section-concepts.html#kssref-concepts-block) for using on any project. Some blocks contain [elements](section-concepts.html#kssref-concepts-element) and [modifiers](section-concepts.html#kssref-concepts-modifier).

Core blocks don't contain, or almost don't contain styles such as colors, backgrounds, etc. Such styles are set on the theme or 'design' layer. To style blocks or their elements, use utilities or modifiers such as `block--mod`.

Weight: 2

Styleguide: core-blocks
*/

/*
Utils reference

Set of utilities that can be used on any project.

Utilities are grouped by sections. The description of each section lists the values of the utilities that relate to it and are included in the MLUT core. Custom utilities, utilities with more values and non-standard values are allocated in subsections. Values of common utilities correspond to [Emmet](https://docs.emmet.io/cheat-sheet/) abbreviations([pdf](https://yadi.sk/i/VcKfz5u7DBHrLA)). If written that all values are available in the utility, you can see them in the Emmet cheat sheet from the link above.

In the description of the utilities, there may be a '**Parameters**' item in which the available values are listed. Instead of the utility value, the '`initial`' keyword may be specified. We will get this effect when using the utility with no value. The range of values can be specified as `0..3`.

If the property does not have a special value 'i' then 'i' value means `inherit`.

Some utilities responsive by design or have only responsive values. It will be indicated in the description like this: *Responsive*.

For some utilities, there is a description for non-developers.

In the examples of the work of some utilities for demonstration, other utilities may be used like this: '`Util1.Util2`'. In the markup, instead of a dot, you need to use a space to separate utilities, like this: '`Util1 Util2`'

Weight: 3

Styleguide: utils-reference
*/

/*
Core styles

You can find their in `sass/core/`.

Weight: 4

Styleguide: core-styles
*/

/*
Sass tools

Available when using MLUT as a [toolkit](section-start.html#kssref-start-usage). Names of tools that are associated with custom utilities begin with 'c' prefix. Examples: [$cGg-range](#kssref-sass-tools-settings-utils), [cCl](#kssref-sass-tools-mixins-general--cl) mixin.

Weight: 6

Styleguide: sass-tools
*/

/*
Sass modules

Modules include themes, tools, utility sets, and more. Now there are not many modules included in MLUT, so their documentation will be in this section.

Names of variables, mixins, and sass functions in modules must have prefixes `m#{abbreviated module name}`. For themes, this prefix should look like: `mt#{theme name}`. The names of common CSS classes in modules must comply with [BEM](https://ru.bem.info/) naming rules.

## Themes

Design theme can be used on different sites. They may contain utilities, styles with BEM naming, tools and more. Theme example see [here](section-sass_modules.html#kssref-sass_modules-demo_theme).

Each theme consists of at least 2 parts: *config* and *init*.
- the config contains data on the basis of which the theme is created: variables, maps with utility values, etc.
- in the init file all parts of the theme and, if necessary, other modules are included. After including all required parts, the theme is generated.

Themes can be imported to the MLUT assembly for make a single bundle or builded as separate files. To add a theme to your styles, just import an int file. You can also use only the theme config to make it custom build.

The theme documentation is up to you. At a minimum, you should specify:
- main colors
- dependencies
- gzipped size
- info about unusual parts of the theme, such as mixins, additional styles, etc.

Following these rules you can create your own module. Your module can be added to MLUT. To do this, send a issue, pull-request or contact the maintainer in any other way. Also you can create your own modules collection in a separate repository.

Weight: 7

Styleguide: sass_modules
*/

/*
Examples

Additional examples of core blocks, utilities, tools and ready-made components. If in the markup you meet the `{{modifier_class}}` construct, then substitute the necessary classes from the examples instead of it, or just erase

Weight: 8

Styleguide: examples
*/

// Other
//
// Styleguide: examples.other

/*
Settings

Grid settings, compilation flags, constants and more. All core settings are in the `sass/tools/settings/`.

Styleguide: sass-tools.settings
*/

@forward 'styles';
@forward 'blocks';
@forward 'utils';
