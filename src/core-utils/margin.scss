/*
Margin

You can set some margins in the grid-gutters(gg). For example margin top - `Mt` and margin bottom - `Mb`. By default, margins in `gg` contain `var()` fallback as [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col)

Vertical margins in grid-gutters are converted to `rems`. This affects accessibility, because margins will be scaled when changing font sizes in the browser settings.

* `M0` \- clear all margins.
* `M-a`
* `Mr0`
* `Mt0`
* `Mt1gg..Mt4gg`

Styleguide: core-utils.margin
*/

/*
Ml

Margin left. You can set left margin in the [grid units](section-concepts.html#kssref-concepts-grid)(gc, gg, gs) or [space units](section-concepts.html#kssref-concepts-su)(su). So you can set the offset for layout elements.

* `Ml-a` \- *Responsive*.
* `Ml0` \- *Responsive*.
* `Ml-2gg..Ml2gg` \- the range includes 2 negative margins and 2 positive.
* `Ml1gg` \- if `gc` turned on. It is needed to return the default column gutter. *Responsive*.
* `Ml1gs..Ml10gs` \- available margin in `gs` on all breakpoints, starting with `md`.
* `Ml1gc..Ml10gc` \- if `gc` turned on.
* `Ml2su`
* `Ml-2su`

Markup: ../../../docs/examples/core-utils/margin/ml.html

Styleguide: core-utils.margin.ml
*/

/*
Mb

Margin bottom. You can set bottom margin in the grid-gutters(gg) or [space units](section-concepts.html#kssref-concepts-su)(su).

* `Mb0` \- *Responsive*
* `Mb1gg..Mb4gg`
* `Mb2gg` \- *Responsive*
* `Mb1su..Mb3su`
* `Mb6su`
* `Mb-2gg`

Styleguide: core-utils.margin.mb
*/

/*
Mx

Margin on X axis. Sets left and right margin.

* `Mx-a` \- centered the DOM node with a given width and `block` [display type](#kssref-core-utils-visual-d). *Responsive*.
* `Mx1gg` \- if `gc` turned on. *Responsive*.
* `Mx-1gg` \- it needed for imposes left and right margins of the outermost columns on the fields of the [wrapper](section-core-blocks.html#kssref-core-blocks-wrapper). This behavior is necessary so that there are no double fields in the layout, using [row__col](section-core-blocks.html#kssref-core-blocks-row-row__col) or `Mx1gg`.
* `Mx0` \- *responsive*.

Markup: ../../../docs/examples/core-utils/margin/mx.html

Styleguide: core-utils.margin.mx
*/

$mlu-su-rem: mlu-px2rem($mlu-su);

.M0 {
	margin: 0px;
}

.M-a {
	margin: auto;
}

@each $value in $mlu-main-directions {
	$letter: str-slice($value, 1, 1);

	.M#{$letter}0 {
		margin-#{$value}: 0;
	}
}

@include mlu-bp-all(".Mb0", 0) {
	margin-bottom: 0px;
}

@include mlu-bp-all(".Mx0", 0) {
	margin-right: 0px;
	margin-left: 0px;
}

@include mlu-bp-all(".Ml-a") {
	margin-left: auto;
}

@include mlu-bp-all(".Mx-a") {
	margin-right: auto;
	margin-left: auto;
}

@for $i from $mlu-My-range through 1 {
	.Mt#{$i}gg {
		@include mlu-mk-gtr("rem", $coef: $i, $direct: "top");
	}

	.Mb#{$i}gg {
		@include mlu-mk-gtr("rem", $coef: $i, $direct: "bottom");
	}
}

@include mlu-bp-all(".Mb2gg", 0) {
	@include mlu-mk-gtr("rem", $coef: 2, $direct: "bottom");
}

.Mb1su {
	margin-bottom: $mlu-su-rem;
}

.Mb2su {
	margin-bottom: $mlu-su-rem * 2;
}

.Mb3su {
	margin-bottom: $mlu-su-rem * 3;
}

.Mb6su {
	margin-bottom: $mlu-su-rem * 6;
}

.Mb-2gg {
	@include mlu-mk-gtr($coef: -2, $direct: "bottom");
}

.Ml-2gg {
	@include mlu-mk-gtr($coef: -2, $direct: "left");
}

.Ml2gg {
	@include mlu-mk-gtr($coef: 2, $direct: "left");
}

.Ml-1gg {
	@include mlu-mk-gtr($coef: -1, $direct: "left");
}

.Ml1gg {
	@include mlu-mk-gtr($direct: "left");
}

.Ml-2su {
	margin-left: $mlu-su * -2;
}

.Ml2su {
	margin-left: $mlu-su * 2;
}

.Mx1gg {
	@include mlu-mk-gtr();
}

.Mx-1gg {
	@include mlu-mk-gtr($coef: -1);
}

@each $key, $value in $mlu-grid-gutters {
	@include mlu-bpm($key) {
		@if $MLU-FLAG-COL-MARGIN {
			.Ml1gg_#{$key} {
				@include mlu-mk-gtr($direct: "left");
			}

			.Mx1gg_#{$key} {
				@include mlu-mk-gtr();
			}
		}
	}
}
