@use 'sass:map';
@use '../tools' as ml;

$colors: (
	'gray0': #c5ccd3,
	'red0': #ff5c5c,
	'orange0': #ffad5c,
	'yellow0': #faeb61,
	'green0': #70fa61,
	'aqua0': #5cffbb,
	'blue0': #62a8f8,
	'purple0': #d35cff,
);

ml.$utils-db: map.merge(
	ml.$utils-db, 'common', 'keywords', 'colors',
	map.merge(
		$colors,
		map.get(ml.$utils-db, 'common', 'keywords', 'colors')
	)
);

$generate: true !default;
$colors-at-rules: ml.$kBpAll !default;
$colors-pre-states: '^:h' !default;
$colors-post-states: 'h f fw ph' !default;
$shade-step: -25 !default;

$colors-at-rules: $colors-at-rules and $colors-at-rules + '_';
$colors-pre-states: $colors-pre-states and $colors-pre-states + ' _';
$colors-post-states: $colors-post-states and '_' + $colors-post-states;

$-color-names: map.keys($colors);
$-colors-key: $colors-at-rules + $colors-pre-states + 'Colors' + $colors-post-states;

//stylelint-disable
$utils: (
	ml.$cBpAllCp + 'W': (5su, 10su, 20su, 25su, 40su, 70su),
	ml.$cBpAllCp + 'H': (5su, 10su, 20su, 25su),
	$-colors-key: ([
		$-color-names, 8, ('rgb': $shade-step)
	],),
	ml.$cBpAllCp + 'Fns': ([1su, 8], 3gg, 14su, 4gg, 5gg),
	ml.$cBpAllCp + 'Lnh': (
		'md': 1.4,
		'lg': 1.6,
		'xl': 1.8,
		'xxl': 2,
	),
	ml.$cBpAllCp + 'BdWidth': (1su, 2su),
	ml.$cBpAllCp + 'BdRadius': (2, [1su, 4]),
	ml.$kBpAll + ' #{ml.$kArSt}_^:h _O_h f fw': ([10p, 90, 10],),
	ml.$kBpAll + ' #{ml.$kArSt}_^:h _Bxsd_h f fw': (
		'sm': rgba(0, 0, 0, 0.16) 0px 1px 4px,
		'md': rgba(0, 0, 0, 0.24) 0px 3px 8px,
		'lg': rgba(0, 0, 0, 0.35) 0px 5px 15px,
	),
	ml.$cArStBp + '-S_h f': (0.8, 0.9, 1.1, 1.2, 1.5),
);

@if $generate {
	ml.$utils-map: map.set(
		ml.$utils-map,
		'demo-theme',
		$utils
	);
}
