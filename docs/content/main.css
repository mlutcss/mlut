/*
Getting started

There are 2 ways to start using mlut:

- assembled distributive
- toolkit

Weight: 0

Styleguide: start
*/

/*
Installation

### NPM ###
```
npm i mlut -D
```

### CDN ###
With Demo theme:
```html
<link href="https://unpkg.com/mlut@latest/dist/mlut-demo-theme.min.css" rel="stylesheet">
```

Weight: 0

Styleguide: start.install
*/

/*
Usage

### Distributive ###
You can get assembled mlut code and include it to your project. There are some ways to get a distributive.

- just plug in with CDN
- if used `npm`, files are in `node_modules/mlut/dist/`

Add the files to your page like here:
```html
<link href="css/mlut-demo-theme.min.css" rel="stylesheet">
```
And just use classes in the markup:
```html
<div class="D-g Gtc-t3">
  <div class="Bd P2u">
    <h3>Simple text</h3>
```

### Toolkit ###
mlut has a CLI:
```
Usage:
  mlut [-i input.scss] [-o output.css] [--watch] [options...]

Options:
  -h, --help            Print this help message
  -i, --input           Input sass file
  -o, --output          Output css file
  -w, --watch           Watch for changes and rebuild as needed
  -m, --minify          Generate minified css file
      --content         Paths to content with markup
      --no-merge-mq     Prevent merging of css media queries during minification
```

In the input sass file, you can customize mlut and write your own styles. Input file is optional, but if you use it, you must import mlut
```scss
@use 'mlut' with (
  $breakpoints: (
    'xxl': 1600px,
  ),
  $colors: (
    'red0': #f20,
  ),
);

.complex-block {
	// CSS
}
```
You can add the JIT options here too. Options must be a **valid JSON**, but single quotes is allowed. Paths will be resolved relative to the JIT engine working directory
```scss
@use 'mlut' with (
	$jit: (
		'output': 'src/assets/css/style.css',
		'content': [
			'src/*.ejs', 'src/assets/js/*.js'
		]
	),
);
```
To start the build process:
```
npx mlut -i src/assets/sass/style.scss -w
```
Add the compiled CSS to your page and use mlut utils!
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link href="/assets/css/style.css" rel="stylesheet">
  </head>
  <body class="M0">
		<h1 class="C-red Fnw800 P2u">
			Lorem Ipsum
		</h1>
	</body>
</html>
```

Weight: 1

Styleguide: start.usage
*/

/*
Basic concepts

Before reading the documentation, learn mlut basic concepts.

Weight: 1

Styleguide: concepts
*/

/*
Naming algorithm

Almost all abbreviations in mlut are compiled by one algorithm. Below will be a simplified algorithm for compiling the abbreviations of the utilities names. Later it will be supplemented

1. get all CSS properties that starts with one letter
1. make ranking of them by popularity or alphabet if the popularity is not possible to calculate. Popularity for properties is calculated based on [Chrome platforf statistic](https://chromestatus.com/metrics/css/popularity)
1. compose groups of properties that starts with one word. Select a group leader: repeating first word. Leader rating is the max rating of the property from group
1. make abbreviations by the scheme below. Important notes:
	- in descending order by rating, regardless of the relationship of the property to the group
	- abbreviate the property, group leader or the first word property so that it does not intersect with already abbreviated properties
	- subsequent abbreviations of all properties of the group and properties with the same initial word should begin with the same abbreviation, which was previously done
	- if the group contains 2 or more subgroups (excluding logical: `block`, `inline`), its leader is abbreviate by at least 2 letters: `Fn`, `Bd`
	- properties from 3 and less letters do not abbreviate: `Gap`, `All`
	- properties and subproperties with physical directions have fixed abbreviations: `T`, `R`, `B`, `L`, `I`
	- subsequent words in properties are abbreviated by the same rules recursively

The one abbreviation scheme:
- the name must be abbreviate to the first letter of the source word.
- if the name is from several words, then every word is abbreviate to one letter
- if two names have the same first letter, then in the next name, when sorting them by the rating, the letter is added
- if the name is from several words, then the letter is added, depending on the name affiliation to the group

The order of adding the letter:
1. consonant of the next syllable. If the next syllable begins to vowel, then we take the nearest previous consonant from it
1. next consonant
1. next vowel without a jump through the consonant

Examples you can see in the [utils reference](section-utils-reference.html). More visual examples here will appear later.

Weight: 0

Styleguide: concepts.naming
*/

/*
Utility

An entity that, depending on the parameters, does 1 action with the element styles. Utilities can change both one CSS property and several.

Weight: 1

Styleguide: concepts.util
*/

/*
General syntax

Utilities consist of out:
<img class="D" src="kss-assets/utils-syntax.jpg" alt="utilities syntax">

1. CSS [at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule): breakpoints, `@supports`, ect
1. pre-states \- part of selector before the utility class name
1. name
1. value
1. post-states \- part of selector after the utility class name

Each part is separated by the lower underscore.

Weight: 0

Styleguide: concepts.util.syntax
*/

/*
Naming

By origin, the utilities are:

* **Common** \- named and work like CSS properties.
* **Custom** \- affects several CSS properties or manages custom properties. Their names begin with a hyphen. All utilities that you will add, it is recommended to name as custom.

The names of utilities are written in upper CamelCase and can only contain letters. Thanks to the first capital letter, they are easy to add to an existing project without fear of name conflicts.

Weight: 1

Styleguide: concepts.util.naming
*/

/*
Components

To work with utilities in mlut, the parsing to parts (components) is used. Most of them correspond to the usual syntax. The utility divides to this components:
- at-rules
- pre-states
- post-states
- important: `!` modifier at the end of the utility value adds `!important` to CSS
- value: it can be a separate value, the name of the utility, group etc

Here is an example, as the utility will be parsed to the components:
```scss
@debug ml.parse-util('<sm_:f:>_D!_h::^sub');
// (
//   'at-rules': '<sm',
//   'pre-states': ':f:>',
//   'post-states': 'h::^sub',
//   'important': true,
//   'value': 'D',
// ),
```
Note that the *order* of components is important.

Most of the components in the mlut is convertible. This means that if the component or part of it correspond the rules of conversion, it will unfold into some CSS value. How to convert different components, you can read below in the relevant sections. If the mlut does not know how to convert the component, the behavior will depend on its type.

Weight: 2

Styleguide: concepts.util.components
*/

/*
Utility Generation Syntax (AOT)

**Utility Generation Syntax** - is the way to describe, with which components we want to generate utilities. It is similar to the syntax utilities in the final code, but has a number of differences:
- components of the same type are separated by spaces
- by default, the utilities with the components of each type are generated *separately*. It means that: `xl_^:h_Bdb_h,f` => `xl_Bdb`, `^:h_Bdb` and `Bdb_f`
- [keywords](section-how_to.html#kssref-how_to-mk_utils-kw_cp) are used, for explicit instructions, with what components we need utilities and not only: `BpAll ArSt _Bdb_h`

This syntax is used in all places where utilities, utils groups, ranges, etc. are generated.

Styleguide: concepts.util.components.syntax
*/

/*
Values

The values of utilities are almost arbitrary. That is, if the value is not converted, it appear in the CSS without changes.

To explicitly prevent conversion, use the `=` before the value. Also, use `= before` the value in quotes `''`: `Ct='test'_af`, since in the future quotes will be used in the values *without* separator.

```scss
@include ml.mk-util('Ml', (5, 5exe, '=5'));

// CSS
.Ml5 {
	margin-left: 5px;
}

.Ml5exe {
	margin-left: 5exe;
}

.Ml\=5 {
	margin-left: 5;
}
```

Weight: 2

Styleguide: concepts.values
*/

/*
Types

mlut has the following types of values that partially intersect with [CSS data types](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types). In the examples below will use a function that get a CSS value of the utility.

Weight: 0

Styleguide: concepts.values.type
*/

/*
Number

Numbers can be both with units of measurements and without. Float values are allowed, and fractions also can be used in the default conversion type:
```scss
@debug ml.uv('Fnw100'); // 100
@debug ml.uv('Ml3r'); // 3rem
@debug ml.uv('W1/4'); // 25%
```

Styleguide: concepts.values.type.number
*/

/*
CSS variables

Their names begin with `$` written in lower camelCase and may contain numbers. They can be used almost everywhere, even as part of a complex value, for example in fractions:
```scss
@debug ml.uv('W1/$div'); // calc(1 / var(--ml-div) * 100%);
```
To specify a fallback, use `?`. In the fallback, you can specify any value, including another variable with fallback:
```scss
@debug ml.uv('W-$myCard?200'); // var(--ml-myCard, 200px)
@debug ml.uv('W-$myCard?$defWd?150'); // var(--ml-myCard, var(--ml-defWd, 150px))
```

Styleguide: concepts.values.type.css_var
*/

/*
Color

You can use both HEX colors and color names set by the user. Read more about adding your colors [here](section-how_to.html#kssref-how_to-config-colors). With colors, you can specify the opacity modifier `*`. This converter is used to convert opacity. With modifier, you can use CSS variables or global keywords in any position:
```scss
@debug ml.uv('C#60c*20p'); // rgba(102, 0, 204, 0.2)
@debug ml.uv('C-red0*$co'); // rgba(204, 0, 102, var(--ml-co, 1))
```
If a variable is specified as opacity, then by default, it will have fallback `1`.

Styleguide: concepts.values.type.color
*/

/*
Keywords

Keywords \- abbreviations that comply with CSS keywords. They are written Camel Camel Case and may contain numbers. How to add your keywords look [here](section-settings.html#kssref-settings-utils-data-kw).
```scss
@debug ml.uv('D-if'); // inline-flex
```

Styleguide: concepts.values.type.kw
*/

/*
Global keywords

Similar to ordinary, but differ in that they can be used in any utility. You can add your global keywords in the settings. It is recommended to use the prefix, for example: `gMyKw`. You can find the default mlut global keywords [here](section-general_reference.html#kssref-general_reference-common_kw).
```scss
@debug ml.uv('W-ih'); // inherit
```

Styleguide: concepts.values.type.gkw
*/

/*
Abbreviations

In the values of some utilities you can use the names of other utilities.
```scss
@debug ml.uv('Tsp-bdc'); // border-color
```

Styleguide: concepts.values.type.abbr
*/

/*
Conversion type

In different utilities, the values will be converted in different ways. Conversion type is a rule by which the value will be converted. It consists of a sequence of converters and keywords. Conversion type is specified in the `conversion` option of utilities. For details on conversion and existing types, see [here](section-settings.html#kssref-settings-utils-config-conversion).

Weight: 1

Styleguide: concepts.values.convert
*/

/*
Multiple values

For any utility you can specify multiple values. Instead of a blank used `;`:
```scss
@debug ml.uv('Bd3;sec0;d'); // 3px #0c6 dotted
```
In some utilities, you can specify several lists of values. To do this, use the same separator as in CSS: `/` or `,`
```scss
@debug ml.uv('Bdrd1r;2/5p'); // 1rem 2px / 5%
```
The separator for multi-list is specified in the `multi-list-separator` utility option. Please note that each value is converted separately. The prevent-conversion token `=` also applies to each value in the list separately:
```scss
@debug ml.uv('M1r;=10x'); // 1rem 10x
```

Weight: 2

Styleguide: concepts.values.multi
*/

/*
Separators

Depending on the value type, different separators between the name and value of the utility are used. By default, only for strings without quotes (including empty) and CSS variables, the separator `-` are used: `Txd-u`, `C-$prime`. For all other values, separators are not used: `W100p`, `Fnw700`, but you can set them in the settings.

`=` token will also be a separator if you want to prevent conversion: `-Mut=5`.

Weight: 3

Styleguide: concepts.values.sep
*/

/*
CSS important

At the end of the value or their sequences, you can specify `!` which will add the CSS `!important` to the final value. If the utility affects several properties, then `!important` adds to each.
```scss
@include ml.apply('M2r;12! -I2r!');

// CSS
.M2r\;12\! {
	margin: 2rem 12px !important;
}

.-I2r! {
	top: 2rem !important;
	right: 2rem !important;
	bottom: 2rem !important;
	left: 2rem !important;
}
```

Weight: 4

Styleguide: concepts.values.important
*/

/*
Negation

The negation is denoted by `-` before the value and works everywhere where it is appropriate. With numbers, with CSS variables and with keywords, if the final value may be negative.
```scss
@include ml.mk-util('Ml', ('2/-8', -0.7, '-$myVar'));

// CSS
.Ml2\/-8 {
	margin-left: -25%;
}

.Ml-0\.7 {
	margin-left: -0.7rem;
}

.Ml--\$myVar {
	margin-left: calc(var(--ml-myVar) * -1);
}
```

Weight: 5

Styleguide: concepts.values.negation
*/

/*
At-rules

At-rules component may consist of breakpoints and rules. To specify breakpoint, just write it name: `lg_D-f`. To add rule, specify `@` before its name: `@s:ctv_D-g`. Breakpoints can only be specified 1 time in the entire component and only at the beginning, and rules - as much as you need.
```scss
@include ml.mk-util('D', ('xl_', '@s:ctv_g'));

// CSS
@media (min-width: 1200px) {
  .xl_D {
    display: block;
  }
}

@supports (content-visibility: auto) {
  .\@s\:ctv_D-g {
    display: grid;
  }
}
```

In all at-rules, you can create complex conditions using the `:` and `, ` operators, which corresponds `and` and `or` in CSS. In some examples below, functions for at-rules conversion will be used for brevity.
```scss
@debug ml.convert-ar-media('pr:h>gSm:dm,p-c:w>=90r'); // print and (min-height: #{ml.bp(sm) + 1}) and (display-mode: fullscreen), (pointer: coarse) and (min-width: 90rem)
```
And of course, Rules can be used in any order and in any combination.

Weight: 3

Styleguide: concepts.at_rules
*/

/*
Breakpoints

The width of the screen on which the styles change. The default mobile-first approach is used, so breakpoints are converted to `min-width` media queries. How to configure breakpoints see [here](section-settings.html#kssref-settings-at_rules-breakpoints).

If required `max-width`, add the `<` before the breakpoint:
```scss
@debug ml.convert-ar-bp('<sm'); // (max-width: 519px)
```
Or use operators to create a range:
```scss
@debug ml.convert-ar-bp('sm:md,xl'); // (min-width: 520px) and (max-width: 767px), (min-width: 1200px)
```

Styleguide: concepts.at_rules.bp
*/

/*
@media

In @media rule, you can use the type, features and custom queries. There are two media types:
- `pr` \- `print`
- `s` \- `screen`

`@media` is the default rule. To choose it, just write `@` and then specify queries. The default rule can be selected in the settings.
```scss
@include ml.mk-util('@:w>=gSm:o _D', 'if');

// CSS
@media (min-width: 520px) and (orientation: landscape) {
  .\@\:w\>\=gSm\:o_D-if {
    display: inline-flex;
  }
}
```

Styleguide: concepts.at_rules.media
*/

/*
Media features

Work almost as well as utilities. Key differences:
- if the feature has only two values, then to check its presence, you can simply write a name. For checking lack, you can use the `none` keyword. *Note* that some features also have the default value.
- if the features can check the range of values, then you can use the range syntax from [The Media Queries Level 4](https://www.w3.org/TR/mediaqueries-4/#mq-range-context)
```scss
@debug ml.convert-ar-media('ah'); // (any-hover)
@debug ml.convert-ar-media('h-n'); // (hover: none)
@debug ml.convert-ar-media('dm'); // (display-mode: fullscreen)
@debug ml.convert-ar-media('c<256'); // (max-color: 255)
```

Styleguide: concepts.at_rules.media.feat
*/

/*
@supports

In @supports rule, you can check the support of properties and values of any utility from the registry. To check the current value of the utility used, leave the rule blank.
```scss
@include ml.mk-util('Ps', '@s:d-flr_sk');
@include ml.mk-util('D', '@s_f');

// CSS
@supports (display: flow-root) {
  .\@s\:d-flr_Ps-sk {
    position: sticky;
  }
}

@supports (display: flex) {
  .\@s_D-f {
		display: flex;
	}
}
```
To check the property, it is not necessary to specify the value:
```scss
@debug ml.convert-ar-supports('apcr'); // (aspect-ratio: initial)
```
You can also use this-utility alias `&` in a complex condition.
```scss
@debug ml.convert-ar-supports('d-ig:&', ('name': 'Jc', 'value': '-se'); // (display: inline-grid) and (justify-content: space-evenly)
```
To check the lack of support, add an operator `!` before the utility:
```scss
@debug ml.convert-ar-supports('!d-ig'); // (not (display: inline-grid))
```
Please note that in one supports rule, only one type of the operator is supported for a combination of expressions. When using both immediately, an error will appear
```scss
@debug ml.convert-ar-supports('ps-sc,h1vh:m-a'); // ERROR: Different operators are not allowed in one abbreviations list
```

Styleguide: concepts.at_rules.supports
*/

/*
@layer

With the @layer rule, you can put some utils to different cascade layers

```scss
@include ml.apply('@l:utils_C-red');

// CSS
@layer utils {
  .\@l\:utils_C-red {
    color: red;
  }
}
```

Styleguide: concepts.at_rules.layer
*/

/*
@container

WIP

Styleguide: concepts.at_rules.container
*/

/*
Custom expressions

You can add custom expressions to any at-rule. Regardless of the name you specify, custom expressions always begin with `-`. See in the settings how to add it.

Weight: 1

Styleguide: concepts.at_rules.custom
*/

/*
States

In the states you can use pseudo-class, pseudo-elements and almost everything that CSS selectors allow. States are two types: `pre` and `post`, depending on the position in the CSS utility selector. In both of them, you can use the same parts.
```scss
@include ml.mk-util(':h _D_ af', 'f');

// CSS
.D-f {
	display: flex;
}

:hover .\:h_D-f {
	display: flex;
}

.D-f_af::after {
	display: flex;
}
```
In essence, the states is a simplified [CSS selector list](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list). To combine the states, use `:`, and for the separation of selector to the lists - `,`. For a space in the selector, use `::` or `:` if post-state is the first in the list.
```scss
@include ml.mk-util('D_ h,f h:b :fc', '');

// CSS
...

.D_h\,f:hover,
.D_h\,f:focus {
	display: block;
}

.D_h\:b:hover::before {
	display: block;
}

.D_\:fc :first-child {
	display: block;
}
```

You can use almost arbitrary parts in any order: combinators, classes, etc. In terms of conversion, the states are similar to the values of utilities:
- unconvertible parts will fall into the selector unchanged
- use `=` to prevent conversion
```scss
@include ml.mk-util('=a. h1+ _D_ .js:a', '');

// CSS
...

a.\=a\._D {
	display: block;
}

h1 + .h1\+_D {
	display: block;
}

.D_\.js\:a.js:active {
	display: block;
}
```
Full list of existing states see in the [configuration](section-settings.html#kssref-settings-utils-config-states).

Weight: 4

Styleguide: concepts.states
*/

/*
Special states

There are several special states that are converted by a special way.

Styleguide: concepts.states.special
*/

/*
Context

With the help of a context, the utilities can react to the state of the container, adjacent item etc. It is denoted by `^` and is just an alias for `.-Ctx`. Add this class to markup, and in the states of utilities, make a combination for the necessary behavior.

You can also specify the name of the context. Allowed lower camelCase and numbers.
```scss
@include ml.mk-util('^:h ^one:lc:>_D', 'f');

// CSS
...

.-Ctx:hover .\^\:h_D-f {
	display: flex;
}

.-Ctx-one:last-child > .\^one\:lc\>_D-f {
	display: flex;
}
```

Styleguide: concepts.states.special.ctx
*/

/*
Not

To use a pseudo-class `not`, add `! ` before any part of state:
```scss
@include ml.mk-util('D_!fc !input', '');

// CSS
...

.D_\!fc:not(:first-child) {
	display: block;
}

.D_\!input:not(input) {
	display: block;
}
```

Styleguide: concepts.states.special.not
*/

/*
This utility alias

As in [@supports](#kssref-concepts-at_rules-supports), `&` can be used in the states. To increase specificity, it can only be used in post-states so many times as much as you need:
```scss
@include ml.apply('D_&');

// CSS
...

.D_\&.D_\& {
	display: block;
}
```

Styleguide: concepts.states.special.tu
*/

/*
Custom states

Works similarly as the [custom at-rules expressions](#kssref-concepts-at_rules-custom), see more here.

Weight: 1

Styleguide: concepts.states.custom
*/

/*
Custom units of measure

In mlut there are 3 custom units:
- `u` \- space unit
- `gg` \- grid gutter
- `gc` \- grid column. Used only in the legacy grid-system

You can set the custom units values in the [settings](section-settings.html#kssref-settings-general).

Weight: 5

Styleguide: concepts.custom_unit
*/

/*
Space unit

Unit of measurement to create a scale of sizes and indents in your design system. By default `1u = 0.25rem`(4px).
```scss
@debug ml.uv('Fns6u'); // 1.5rem
```

Styleguide: concepts.custom_unit.su
*/

/*
Grid gutter

The value of this unit depends on the CSS variable `--ml-gg`. Due to this, it value can be changed dynamically. By default `--ml-gg = 3u` but increase to `4u` on the `lg` breakpoint.
```scss
@debug ml.uv('Ml-2.5gg'); // calc(var(--ml-gg) * -2.5)
```

Styleguide: concepts.custom_unit.gg
*/

/*
How to

Ways to solve standard tasks

Weight: 2

Styleguide: how_to
*/

/*
Utils Generation (AOT)

mlut has 3 methods for generating utility classes:
1. in the configuration when importing
1. with special mixins
1. with top-level `apply` mixin

Styleguide: how_to.mk_utils
*/

/*
Standard ways

Standard methods include creating through config and using `mk-` [mixins](section-sass-tools.html#kssref-sass-tools-mixins-utils-mk_util). As the values of utilities, you can use a list or map. The generation syntax can be used both in the names of utilities/groups and in the values.
```scss
@include ml.mk-util(
	'Mxw',
	(
		'cardXs': 12r,
		'sm0': 560px,
	)
);

// CSS
.Mxw-cardXs {
	max-width: 12rem;
}

.Mxw-sm0 {
	max-width: 560px;
}
```
If you add new values via map, they will appended to the registry and after ,you can use them again.

You can find other examples of the standard way usage in the [basic concepts](section-concepts.html#kssref-concepts-values-negation).

Weight: 0

Styleguide: how_to.mk_utils.std
*/

/*
Utilities groups

For mass generation utilities, you can use groups. Existing groups can be found [here](section-general_reference.html#kssref-general_reference-groups), and you can add new ones to `$utils-groups` map.
```scss
@include ml.mk-utils-group('Paddings', 150);

// CSS
.P150 {
	padding: 150px;
}

.Pt150 {
	padding-top: 150px;
}

.Pr150 {
	padding-right: 150px;
}

// etc.
```

Weight: 1

Styleguide: how_to.mk_utils.groups
*/

/*
In the config

The main method of creating utilities - in config. Use map `$utils`. As keys, specify the names of utilities or groups.
```scss
@use 'mlut' with (
	$utils: (
		'D': ('', 'n'),
		'xl_P': 10e,
	)
);

// CSS
.D {
	display: block;
}

.D-n {
	display: none;
}

.P10e {
	padding: 10em;
}

@media (min-width: 1200px) {
	.xl_P10e {
		padding: 10em;
	}
}
```


Styleguide: how_to.mk_utils.std.cfg
*/

/*
Keywords alias

To generate the values of the utility with all the keywords, use `KW` in the list or map of values. You can also get a specific keywords group from `common` section of the utils registry. To do this, specify the name of the group through the dot: `KW.colors`
```scss
@include ml.mk-util('Ec', 'KW');

// CSS
.Ec-s {
	empty-cells: show;
}

.Ec-h {
	empty-cells: hide;
}
```

Weight: 2

Styleguide: how_to.mk_utils.kw
*/

/*
Top-level apply

If you want to create only a few utilities with specific values or components, you can use the [apply](section-sass-tools.html#kssref-sass-tools-mixins-utils-apply) mixin. If you call it outside another rule, it will generate the specified utilities:
```scss
@include ml.apply(
	'-Gdl-r,#0f0;30p,#00f;80p,red -Drps10;15;#00f,20;2r;5;#0ff'
);

// CSS
.-Gdl-r\,\#0f0\;30p\,\#00f\;80p\,red {
	background-image: linear-gradient(to right, #0f0 30%, #00f 80%, red);
}

.-Drps10\;15\;\#00f\,20\;2r\;5\;\#0ff {
	--ml-drps: drop-shadow(10px 15px #00f) drop-shadow(20px 2rem 5px #0ff);
}
```

Weight: 5

Styleguide: how_to.mk_utils.apply
*/

/*
Range syntax

To generate a range of values, mlut has range syntaxes. Now there are 2 types of such syntaxes: `number` and `color`. Range syntax is written in square brackets in the list or map of values. Range syntax depends on `range-generator` utility option.

*Note*: if only one range is specified in the list of values, after it you need to put a comma:<br> `([-1, 5],)`. Otherwise, the program will take the range for the list of values.

Weight: 3

Styleguide: how_to.mk_utils.range
*/

/*
Number

Number is default range syntax. You can use it with any utility if another range generator is not specified in its options. May consist of 2 or 3 arguments. General form: <br>`[$start, $end, $step: 1]`.<br> In the `$start` value, and only in it, you can specify a measurement unit, as well as the utility components.
```scss
@include ml.mk-util('Bdw', ([2u, 4],));

// CSS
.Bdw2u {
	border-width: 0.5rem;
}

.Bdw3u {
	border-width: 0.75rem;
}

// etc.
```

Styleguide: how_to.mk_utils.range.number
*/

/*
Color

May consist of three or four arguments. General form: <br>`[$colors-list, $shades, $step, $function: 'adjust']`.
```scss
@include ml.mk-util('C', (
	['prm0', '2_h StOl', ('alpha': 0.2, 'green': 30)],
));

// CSS
.C-prm0_h:hover {
	color: #c06;
}

.C-prm0\*80p_h:hover {
	color: rgba(204, 0, 102, 0.8);
}

.C-prm50_h:hover {
	color: #cc1e66;
}

.C-prm50\*80p_h:hover {
	color: rgba(204, 30, 102, 0.8);
}
```

$colors-list - In the color list, you can specify: <ul><li>in advance declared color <li>hex color <li> global keyword that contains color <li> CSS variable
$shades - the number of shades to generate. *Note* that alpha shades are generated separately from the other shades. Generation syntax is allowed
$step - map with arguments for a function, with which the shades is generated. If the `red`, `green` and `blue` arguments have the same value, then you can specify one `rgb` argument. In `alpha` you can specify CSS Variable.
$function = 'adjust' - a function that is used to generate a shades. You can specify the name of the function from the `sass:color` module, or the custom function with [meta.get-function()](https://www.sass-lang.com/documentation/modules/meta#get-function)

Styleguide: how_to.mk_utils.range.color
*/

/*
Keywords of components control

In the generation syntax, you can use keywords to specified with what components you need to generate utilities. Keywords are written as ordinary components through a space. *Note* that by default when specifying the components, the value of the utility without components is also generated. This behavior can also be changed.

Also, using one keyword, you can specify several of the same type of components.

More detailed examples will be added later.

ArOl - at-rules only. No generate values without at-rules
ArSt - at-rules states. Generate values with states, with at-rules and with states + at-rules
ArSO - at-rules states only. Generate only values with states + at-rules
StOl - states only. No generate values without states
StCb - states combine. Generates values with post and pre states at the same time, if they are listed after the keyword. Example: `StCb ^:h_C-red_ StCb lc` => `^:h_C-red_lc`
BpAll - all breakpoints. Generate values with all breakpoints

Weight: 3

Styleguide: how_to.mk_utils.kw_cp
*/

/*
Work with library

As you remember, the library part of mlut contains [basic styles](section-core-styles.html), [helpers](section-core-helpers.html) and utilities. By default, only basic styles and helpers are included:
```scss
@use 'mlut/tools' as ml;
@use 'mlut/dist/core';
```
But you can include only the necessary parts of the core:
```scss
@use 'mlut/tools' as ml;
@use 'mlut/dist/core/helpers';
```
*Note*: for convenience, in the examples we will include mlut as if we specified a Sass load path, so that each time we do not write `../../node_modules/mlut`. It is default behavior with JIT engine

Weight: 2

Styleguide: how_to.lib
*/

/*
Core utilities (AOT)

This section contains modules with ready-made utilities and a module for initialization. To get all utilities, just include `core/utils`. If you want to load only certain sets, then include them, and then include the initialization module:
```scss
@use 'mlut/dist/core/utils/box-model';
@use 'mlut/dist/core/utils/text';
@use 'mlut/dist/core/utils/init';
```
To load core utils without generating them, include the `core/utils/load` module. This may be needed when using [addons](section-addons.html).

All utilities are sets to `$utils-map` by the key `core`.

Styleguide: how_to.lib.utils
*/

/*
Utilities configuration (AOT)

When including libraries and addons, you can include, exclude or overwrite only certain utilities. To do this, use the special fields in the `$utils` map:
- `/allow` - include only these utilities, `list`
- `/ban` - exclude these utilities, `list`
- `/override` - `map` with utilities and values, which will be merged into `$utils-map` with overwriting. Passing `null` will clear `$utils-map`.
```scss
@use 'mlut/dist/core/utils' with (
	$utils: (
		'C': red,

		'/override': (
			'M': (1u, 2r)
		),

		'/allow': (
			'M', 'C',
		),
	),
);

// CSS
.C-ih {
  color: inherit;
}

.M1u {
  margin: 0.25rem 4px;
}

.M2r {
  margin: 2rem;
}

.C-red {
  color: red;
}
```

Styleguide: how_to.lib.utils_config
*/

/*
Configuration basics

Information about the most frequently used settings.

Weight: 3

Styleguide: how_to.config
*/

/*
Generic CSS

Generic CSS includes resetting styles, setting `box-sizing` etc. You can customize or completely remove these styles. Their configuration is in `$general-config`, by the key `generic-css`.
The configuration is a `map`, each element of which is a boolean flag. If set to `true`, the specified CSS will be generated. To disable these styles, pass `null` instead of a map.
```scss
@use 'mlut' with (
	$general-config: (
		'generic-css': (
			'svg-fill-cur-color': true,
			'reset-border': true,
		)
	),
);
```
For the time being, available settings can be viewed only in the [code](https://github.com/mr150/mlut/blob/master/src/tools/settings/base/_general.scss#L124), but later they will appear in this documentation. You can find [here](https://github.com/mr150/mlut/blob/master/src/core/styles/generic.scss) The final CSS with comments.

Weight: 3

Styleguide: how_to.config.generic_css
*/

/*
Colors

There are 2 ways to add colors:

<div>1. with <code>$colors</code> map</div>

```scss
@use 'mlut/tools' as ml with (
	$colors: (
		'red22': #c00,
	),
);

@include ml.apply('Bdc-red22');

// CSS
.Bdc-red22 {
  border-color: #c00;
}
```

<div>2. when generating any utility or utility group, which has a <code>color</code> type of conversion. If you specify a map with colors as values, then they will be added to the settings and they can be used below in other values of utilities</div>

```scss
@use 'mlut' as ml with (
	$utils: (
		'C': (
			'red100': #911
		),
		'/override': null,
	),
);

@include ml.apply('Bgc-red100');

// CSS
...
.C-red100 {
  color: #911;
}

.Bgc-red100 {
  background-color: #911;
}
```

Styleguide: how_to.config.colors
*/

/*
Breakpoints

To add or change breakpoints, use the `$breakpoints` map.
```scss
@use 'mlut/tools' as ml with (
	$breakpoints: (
		'xxxl': 1600px,
		'sm': 480px,
	),
);

@include ml.apply('<sm_W15 xxxl_W150');

// CSS
@media (max-width: 479px) {
  .\<sm_W15 {
    width: 15px;
  }
}

@media (min-width: 1600px) {
  .xxxl_W150 {
    width: 150px;
  }
}
```
The order of adding does not matter, the breakpoints will be sorted by increasing. How to completely rewrite the breakpoints, see the [settings](section-settings.html#kssref-settings-at_rules-breakpoints).

Styleguide: how_to.config.bp
*/

/*
Create new utils

To create a new utility, add it to the registry during configuration. As a value, you can specify CSS property or map with options.
```scss
@use 'mlut/tools' as ml with (
	$utils-data: (
		'utils': (
			'registry': (
				'Mil': margin-inline,
				'Ir': (
					'properties': image-rendering,
					'keywords': (
						'ce': crisp-edges,
						'p': pixelated,
					),
				),
			),
		),
	),
);

@include ml.apply('Mil-15 Ir-p');

// CSS
.Mil-15 {
  margin-inline: -15px;
}

.Ir-p {
  image-rendering: pixelated;
}
```
You can create a utility for changing one property even without registration <s>and SMS</s>. Just specify the name and values. If the name of the utility begins with `-`, then it will control the custom property.
```scss
@use 'mlut' with (
	$utils: (
		'display': (flex, 5r),
		'/override': null,
	),
);

@include mlut.apply('-MySize-a');

// CSS
.display-flex {
  display: flex;
}

.display5r {
  display: 5rem;
}

.-MySize-a {
  --ml-mySize: auto;
}
```
This works for any method of generating utilities. Please note that the default conversion type will be used for the values of such utilities.

Styleguide: how_to.config.new_utils
*/

/*
Media features and queries

For long media queries, you can create a short alias. Such alias is called custom media query. Use `$at-rures-data` map in the configuration. *Note* when using custom media query, a hyphen is added to their names.
```scss
@use 'mlut/tools' as ml with (
	$at-rules-data: (
		'media': (
			'custom': (
				'myMq': '(orientation: landscape) and (min-height: 20rem)',
			),
		),
	),
);

@include ml.apply('@:-myMq_D-f');

// CSS
@media (orientation: landscape) and (min-height: 20rem) {
  .\@\:-myMq_D-f {
    display: flex;
  }
}
```
You can also add a new media feature. They are stored in the same registry as the utilities, in the `media` section. Added as well as utilities.
```scss
@use 'mlut/tools' as ml with (
	$utils-data: (
		'media': (
			'registry': (
				'st': scripting,
			),
		),
	),
);

@include ml.apply('@:st-n_D');

// CSS
@media (scripting: none) {
  .\@\:st-n_D {
    display: block;
  }
}
```

Styleguide: how_to.config.media
*/

/*
General reference

Reference of the utils groups, at-rule etc. Much of this reference has been made according to the same rules as in [utilites reference](section-utils-reference.html). Recommends to check it out before.

Weight: 6

Styleguide: general_reference
*/

/*
Utilities groups

In the description of each group are specified the included utilities. When specifying utilities, [Generation Syntax](section-concepts.html#kssref-concepts-util-components-syntax) can be used. After the utilities list, the values of the group that are contained **in the Core** library may be writted. In this values also may be used the Generation Syntax.

Styleguide: general_reference.groups
*/

/*
Media features

`@media` at-rule features.

Styleguide: general_reference.media
*/

/*
Utilities keywords

Reference of the keywords in the utils values.

Styleguide: general_reference.utils_kw
*/

/*
Common keywords

Keywords that can be used both in utilities and in media features

Styleguide: general_reference.common_kw
*/

/*
Core styles

Base styles for mlut library.

Weight: 3

Styleguide: core-styles
*/

/*
Core helpers

Set of universal helpers for using on any project.

Weight: 4

Styleguide: core-helpers
*/

/*
Utils reference

All utilities that available in the registry.

This reference is generated on the basis of settings in the code. In the left column, the [options](section-settings.html#kssref-settings-utils-data-options) of the utility are specified, and in the right - their values. In maps with values, the *default* is the CSS value that will be used without specifying the utility value. Speaking more accurately, *default* is a `''`(empty string) in the utility value:
```scss
@include ml.mk-util('D', '');

// CSS
.D {
	display: block;
}
```

After the options, the values of utility that are contained **in the Core** library may be specified. The values are written in [Generation Syntax](section-concepts.html#kssref-concepts-util-components-syntax)

Weight: 5

Styleguide: utils-reference
*/

/*
Sass tools

Available when using mlut as a [toolkit](section-start.html#kssref-start-usage).

Weight: 7

Styleguide: sass-tools
*/

/*
Settings

Most of the settings are stored in large maps, which are called depending on the area: `utils`, `at-aules` etc. Such settings are divided into two types, depending on the contents: data and configurations. Next, we will call their *databases* and *configures*, accordingly.

For user settings, separate maps are provided, which differ in the suffix. It is in them that you add changes in the configuration and they also merge into the original maps.
* maps with data: source suffix \- `db`, user's \- `data`
* maps with configs: source suffix \- `cfg`, user's \- `config`
```scss
@use 'mlut/tools' with (
	$utils-config: (
		'states': (
			'custom': (
				'are': '[aria-expanded=“true”]',
			),
		),
	),
	$at-rules-data: (
		'container': (
			'alias': 'c',
		),
	),
);
```

If you want to completely overwrite map or one of its fields, specify `null`. Below in the configuration use `*mapname*-ext` and then your values.
```scss
@use 'mlut/tools' as ml with (
	$utils-data: (
		'utils': (
			'registry': (
				'Ps': null,
			),
		),
	),
	$utils-data-ext: (
		'utils': (
			'registry': (
				'Ps': (
					'properties': position,
					'keywords': ('sc': sticky),
				),
			)
		),
	),
);

@debug ml.uv('Ps-sc'); // sticky
@debug ml.uv('Ps-a'); // a
```
This is relevant for some smaller maps like a `$breakpoints`. In the specific settings will specified which maps have the possibility of rewriting using `ext`.

For the time being, you can look at the structure of maps with the settings in the code, but later it will be described in the documentation.

Weight: 8

Styleguide: settings
*/

/*
Addons

Addons may include styles, tools, utility sets, and more. For the time being, they are in a main repository, but later they will be moved into separate NPM packages.

Weight: 9

Styleguide: addons
*/

/*
How it works

Here you will learn how to include addons, their structure, and also how to create your own addon.

Weight: 0

Styleguide: addons.how_works
*/

/*
Import

To import addon that contains utilities, you will need:
```scss
@charset "utf-8";

// import tools
@use "mlut/tools" as ml;

// optional import styles from the core that you need: helpers, utilities, etc
@use "mlut/dist/core/base-setup";

// import addons
@use "mlut/dist/addons/demo-theme";

// import a module that initialize utilities
@use "mlut/dist/core/utils/init";
```
You can also cancel the generation of all utilities from the addon, and get only the necessary values from there. To do this, pass the parameter to the config of the addon: `$generate: false`.

If the addon contains only a ready-made SASS/CSS code, it can be included in any order after tools. Addon also may have their own settings. They can be seen in the code or documentation.

Styleguide: addons.how_works.import
*/

/*
Structure

To create an addon containing utilities:
```scss
// import mlut tools
@use '../tools' as ml;

// create a map with the same scheme as map $utils,
// when creating utilities in the config
$utils: (
	'BpAll _W': (5u, 10u, 20u, 25u, 40u, 70u),
	'BpAll _H': (5u, 10u, 20u, 25u),
);

// put a map with new utils to the $utils-map from tools
// as a key, use the unique name of the addon
ml.$utils-map: map.set(
	ml.$utils-map,
	'my-addon',
	$utils
);

// you can add the ability to cancel the generation of all utilities
// to do this, create a setting
$generate: true !default;

// and hide behind it the writing new utilities to the common map
@if $generate {
	ml.$utils-map: map.set(
...
```

Styleguide: addons.how_works.structure
*/

/*
Catalog

Addons that are delivered with mlut are described here.

Weight: 1

Styleguide: addons.catalog
*/
